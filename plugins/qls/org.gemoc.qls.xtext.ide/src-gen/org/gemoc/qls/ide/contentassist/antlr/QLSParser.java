/*
 * generated by Xtext 2.31.0
 */
package org.gemoc.qls.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.gemoc.qls.ide.contentassist.antlr.internal.InternalQLSParser;
import org.gemoc.qls.services.QLSGrammarAccess;

public class QLSParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(QLSGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, QLSGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeStyleAccess().getAlternatives(), "rule__TypeStyle__Alternatives");
			builder.put(grammarAccess.getNumericTypeStyleAccess().getAlternatives(), "rule__NumericTypeStyle__Alternatives");
			builder.put(grammarAccess.getQLModelAccess().getAlternatives_5(), "rule__QLModel__Alternatives_5");
			builder.put(grammarAccess.getValueTypeAccess().getAlternatives(), "rule__ValueType__Alternatives");
			builder.put(grammarAccess.getUnaryOrPrimaryExpressionAccess().getAlternatives(), "rule__UnaryOrPrimaryExpression__Alternatives");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives_2_1(), "rule__PrimaryExpression__Alternatives_2_1");
			builder.put(grammarAccess.getCallAccess().getAlternatives(), "rule__Call__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getDefinitionGroupAccess().getAlternatives_3(), "rule__DefinitionGroup__Alternatives_3");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getQuestionGroupAccess().getAlternatives_3(), "rule__QuestionGroup__Alternatives_3");
			builder.put(grammarAccess.getConstantCallAccess().getValueAlternatives_1_0(), "rule__ConstantCall__ValueAlternatives_1_0");
			builder.put(grammarAccess.getEDoubleAccess().getAlternatives_3_0(), "rule__EDouble__Alternatives_3_0");
			builder.put(grammarAccess.getBooleanStyleKindAccess().getAlternatives(), "rule__BooleanStyleKind__Alternatives");
			builder.put(grammarAccess.getBinaryOperatorKindAccess().getAlternatives(), "rule__BinaryOperatorKind__Alternatives");
			builder.put(grammarAccess.getUnaryOperatorKindAccess().getAlternatives(), "rule__UnaryOperatorKind__Alternatives");
			builder.put(grammarAccess.getAdditionOperatorKindAccess().getAlternatives(), "rule__AdditionOperatorKind__Alternatives");
			builder.put(grammarAccess.getMultiplicationOperatorKindAccess().getAlternatives(), "rule__MultiplicationOperatorKind__Alternatives");
			builder.put(grammarAccess.getComparisionOperatorKindAccess().getAlternatives(), "rule__ComparisionOperatorKind__Alternatives");
			builder.put(grammarAccess.getQLSModelAccess().getGroup(), "rule__QLSModel__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getQuestionStyleAccess().getGroup(), "rule__QuestionStyle__Group__0");
			builder.put(grammarAccess.getQuestionStyleAccess().getGroup_3(), "rule__QuestionStyle__Group_3__0");
			builder.put(grammarAccess.getQuestionStyleAccess().getGroup_4(), "rule__QuestionStyle__Group_4__0");
			builder.put(grammarAccess.getLabelStyleAccess().getGroup(), "rule__LabelStyle__Group__0");
			builder.put(grammarAccess.getBooleanTypeStyleAccess().getGroup(), "rule__BooleanTypeStyle__Group__0");
			builder.put(grammarAccess.getNumericTypeTextFieldStyleAccess().getGroup(), "rule__NumericTypeTextFieldStyle__Group__0");
			builder.put(grammarAccess.getNumericTypeTextFieldStyleAccess().getGroup_4(), "rule__NumericTypeTextFieldStyle__Group_4__0");
			builder.put(grammarAccess.getNumericTypeSpinnerStyleAccess().getGroup(), "rule__NumericTypeSpinnerStyle__Group__0");
			builder.put(grammarAccess.getTextTypeStyleAccess().getGroup(), "rule__TextTypeStyle__Group__0");
			builder.put(grammarAccess.getQLModelAccess().getGroup(), "rule__QLModel__Group__0");
			builder.put(grammarAccess.getQLModelAccess().getGroup_3(), "rule__QLModel__Group_3__0");
			builder.put(grammarAccess.getQLModelAccess().getGroup_3_2(), "rule__QLModel__Group_3_2__0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getGroup(), "rule__UnaryExpression__Group__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_2(), "rule__PrimaryExpression__Group_2__0");
			builder.put(grammarAccess.getIfExpressionAccess().getGroup(), "rule__IfExpression__Group__0");
			builder.put(grammarAccess.getIfExpressionAccess().getGroup_5(), "rule__IfExpression__Group_5__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getEqualExpressionAccess().getGroup(), "rule__EqualExpression__Group__0");
			builder.put(grammarAccess.getEqualExpressionAccess().getGroup_1(), "rule__EqualExpression__Group_1__0");
			builder.put(grammarAccess.getComparisionExpressionAccess().getGroup(), "rule__ComparisionExpression__Group__0");
			builder.put(grammarAccess.getComparisionExpressionAccess().getGroup_1(), "rule__ComparisionExpression__Group_1__0");
			builder.put(grammarAccess.getAdditionExpressionAccess().getGroup(), "rule__AdditionExpression__Group__0");
			builder.put(grammarAccess.getAdditionExpressionAccess().getGroup_1(), "rule__AdditionExpression__Group_1__0");
			builder.put(grammarAccess.getMultiplicationExpressionAccess().getGroup(), "rule__MultiplicationExpression__Group__0");
			builder.put(grammarAccess.getMultiplicationExpressionAccess().getGroup_1(), "rule__MultiplicationExpression__Group_1__0");
			builder.put(grammarAccess.getDefinitionGroupAccess().getGroup(), "rule__DefinitionGroup__Group__0");
			builder.put(grammarAccess.getQuestionGroupAccess().getGroup(), "rule__QuestionGroup__Group__0");
			builder.put(grammarAccess.getQuestionGroupAccess().getGroup_1(), "rule__QuestionGroup__Group_1__0");
			builder.put(grammarAccess.getValueType_ImplAccess().getGroup(), "rule__ValueType_Impl__Group__0");
			builder.put(grammarAccess.getValueType_ImplAccess().getGroup_4(), "rule__ValueType_Impl__Group_4__0");
			builder.put(grammarAccess.getBasicBinaryExpressionAccess().getGroup(), "rule__BasicBinaryExpression__Group__0");
			builder.put(grammarAccess.getBasicBinaryExpressionAccess().getGroup_4(), "rule__BasicBinaryExpression__Group_4__0");
			builder.put(grammarAccess.getConstantCallAccess().getGroup(), "rule__ConstantCall__Group__0");
			builder.put(grammarAccess.getBasicUnaryExpressionAccess().getGroup(), "rule__BasicUnaryExpression__Group__0");
			builder.put(grammarAccess.getBasicUnaryExpressionAccess().getGroup_2(), "rule__BasicUnaryExpression__Group_2__0");
			builder.put(grammarAccess.getBasicUnaryExpressionAccess().getGroup_3(), "rule__BasicUnaryExpression__Group_3__0");
			builder.put(grammarAccess.getQuestionCallAccess().getGroup(), "rule__QuestionCall__Group__0");
			builder.put(grammarAccess.getBooleanValueTypeAccess().getGroup(), "rule__BooleanValueType__Group__0");
			builder.put(grammarAccess.getBooleanValueTypeAccess().getGroup_3(), "rule__BooleanValueType__Group_3__0");
			builder.put(grammarAccess.getBooleanValueTypeAccess().getGroup_3_1(), "rule__BooleanValueType__Group_3_1__0");
			builder.put(grammarAccess.getIntegerValueTypeAccess().getGroup(), "rule__IntegerValueType__Group__0");
			builder.put(grammarAccess.getIntegerValueTypeAccess().getGroup_3(), "rule__IntegerValueType__Group_3__0");
			builder.put(grammarAccess.getIntegerValueTypeAccess().getGroup_3_1(), "rule__IntegerValueType__Group_3_1__0");
			builder.put(grammarAccess.getIntegerValueTypeAccess().getGroup_3_2(), "rule__IntegerValueType__Group_3_2__0");
			builder.put(grammarAccess.getIntegerValueTypeAccess().getGroup_3_3(), "rule__IntegerValueType__Group_3_3__0");
			builder.put(grammarAccess.getDecimalValueTypeAccess().getGroup(), "rule__DecimalValueType__Group__0");
			builder.put(grammarAccess.getDecimalValueTypeAccess().getGroup_3(), "rule__DecimalValueType__Group_3__0");
			builder.put(grammarAccess.getDecimalValueTypeAccess().getGroup_3_1(), "rule__DecimalValueType__Group_3_1__0");
			builder.put(grammarAccess.getDateValueTypeAccess().getGroup(), "rule__DateValueType__Group__0");
			builder.put(grammarAccess.getDateValueTypeAccess().getGroup_3(), "rule__DateValueType__Group_3__0");
			builder.put(grammarAccess.getDateValueTypeAccess().getGroup_3_1(), "rule__DateValueType__Group_3_1__0");
			builder.put(grammarAccess.getEnumerationValueTypeAccess().getGroup(), "rule__EnumerationValueType__Group__0");
			builder.put(grammarAccess.getEnumerationValueTypeAccess().getGroup_3(), "rule__EnumerationValueType__Group_3__0");
			builder.put(grammarAccess.getEnumerationValueTypeAccess().getGroup_3_1(), "rule__EnumerationValueType__Group_3_1__0");
			builder.put(grammarAccess.getEnumerationValueTypeAccess().getGroup_3_2(), "rule__EnumerationValueType__Group_3_2__0");
			builder.put(grammarAccess.getEnumerationValueTypeAccess().getGroup_3_2_3(), "rule__EnumerationValueType__Group_3_2_3__0");
			builder.put(grammarAccess.getStringValueTypeAccess().getGroup(), "rule__StringValueType__Group__0");
			builder.put(grammarAccess.getStringValueTypeAccess().getGroup_3(), "rule__StringValueType__Group_3__0");
			builder.put(grammarAccess.getStringValueTypeAccess().getGroup_3_1(), "rule__StringValueType__Group_3_1__0");
			builder.put(grammarAccess.getEnumerationLiteralAccess().getGroup(), "rule__EnumerationLiteral__Group__0");
			builder.put(grammarAccess.getIntegerValueAccess().getGroup(), "rule__IntegerValue__Group__0");
			builder.put(grammarAccess.getStringValueAccess().getGroup(), "rule__StringValue__Group__0");
			builder.put(grammarAccess.getBooleanValueAccess().getGroup(), "rule__BooleanValue__Group__0");
			builder.put(grammarAccess.getEnumerationCallAccess().getGroup(), "rule__EnumerationCall__Group__0");
			builder.put(grammarAccess.getDateValueAccess().getGroup(), "rule__DateValue__Group__0");
			builder.put(grammarAccess.getDateValueAccess().getGroup_3(), "rule__DateValue__Group_3__0");
			builder.put(grammarAccess.getDecimalValueAccess().getGroup(), "rule__DecimalValue__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup_3(), "rule__EDouble__Group_3__0");
			builder.put(grammarAccess.getQuestionDefinitionAccess().getGroup(), "rule__QuestionDefinition__Group__0");
			builder.put(grammarAccess.getQuestionDefinitionAccess().getGroup_3(), "rule__QuestionDefinition__Group_3__0");
			builder.put(grammarAccess.getQuestionDefinitionAccess().getGroup_3_2(), "rule__QuestionDefinition__Group_3_2__0");
			builder.put(grammarAccess.getQuestionDefinitionAccess().getGroup_7(), "rule__QuestionDefinition__Group_7__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getQLSModelAccess().getImportsAssignment_1(), "rule__QLSModel__ImportsAssignment_1");
			builder.put(grammarAccess.getQLSModelAccess().getQuestionStylesAssignment_6(), "rule__QLSModel__QuestionStylesAssignment_6");
			builder.put(grammarAccess.getImportAccess().getImportURIAssignment_2(), "rule__Import__ImportURIAssignment_2");
			builder.put(grammarAccess.getQuestionStyleAccess().getStyledQuestionAssignment_1(), "rule__QuestionStyle__StyledQuestionAssignment_1");
			builder.put(grammarAccess.getQuestionStyleAccess().getLabelStyleAssignment_3_1(), "rule__QuestionStyle__LabelStyleAssignment_3_1");
			builder.put(grammarAccess.getQuestionStyleAccess().getTypeStyleAssignment_4_1(), "rule__QuestionStyle__TypeStyleAssignment_4_1");
			builder.put(grammarAccess.getLabelStyleAccess().getItalicAssignment_2(), "rule__LabelStyle__ItalicAssignment_2");
			builder.put(grammarAccess.getLabelStyleAccess().getBoldAssignment_3(), "rule__LabelStyle__BoldAssignment_3");
			builder.put(grammarAccess.getBooleanTypeStyleAccess().getBooleanStyleKindAssignment_2(), "rule__BooleanTypeStyle__BooleanStyleKindAssignment_2");
			builder.put(grammarAccess.getNumericTypeTextFieldStyleAccess().getStepAssignment_4_1(), "rule__NumericTypeTextFieldStyle__StepAssignment_4_1");
			builder.put(grammarAccess.getTextTypeStyleAccess().getMultilineAssignment_3(), "rule__TextTypeStyle__MultilineAssignment_3");
			builder.put(grammarAccess.getQLModelAccess().getNameAssignment_2(), "rule__QLModel__NameAssignment_2");
			builder.put(grammarAccess.getQLModelAccess().getCanSubmitAssignment_3_1(), "rule__QLModel__CanSubmitAssignment_3_1");
			builder.put(grammarAccess.getQLModelAccess().getSubmitDateAssignment_3_2_1(), "rule__QLModel__SubmitDateAssignment_3_2_1");
			builder.put(grammarAccess.getQLModelAccess().getDefinitionGroupAssignment_5_0(), "rule__QLModel__DefinitionGroupAssignment_5_0");
			builder.put(grammarAccess.getQLModelAccess().getQuestionGroupsAssignment_5_1(), "rule__QLModel__QuestionGroupsAssignment_5_1");
			builder.put(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_1(), "rule__UnaryExpression__OperatorAssignment_1");
			builder.put(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_2(), "rule__UnaryExpression__OperandAssignment_2");
			builder.put(grammarAccess.getIfExpressionAccess().getConditionAssignment_2(), "rule__IfExpression__ConditionAssignment_2");
			builder.put(grammarAccess.getIfExpressionAccess().getThenExpressionAssignment_4(), "rule__IfExpression__ThenExpressionAssignment_4");
			builder.put(grammarAccess.getIfExpressionAccess().getElseExpressionAssignment_5_1(), "rule__IfExpression__ElseExpressionAssignment_5_1");
			builder.put(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1(), "rule__OrExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getOrExpressionAccess().getRhsOperandAssignment_1_2(), "rule__OrExpression__RhsOperandAssignment_1_2");
			builder.put(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1(), "rule__AndExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAndExpressionAccess().getRhsOperandAssignment_1_2(), "rule__AndExpression__RhsOperandAssignment_1_2");
			builder.put(grammarAccess.getEqualExpressionAccess().getOperatorAssignment_1_1(), "rule__EqualExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getEqualExpressionAccess().getRhsOperandAssignment_1_2(), "rule__EqualExpression__RhsOperandAssignment_1_2");
			builder.put(grammarAccess.getComparisionExpressionAccess().getOperatorAssignment_1_1(), "rule__ComparisionExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getComparisionExpressionAccess().getRhsOperandAssignment_1_2(), "rule__ComparisionExpression__RhsOperandAssignment_1_2");
			builder.put(grammarAccess.getAdditionExpressionAccess().getOperatorAssignment_1_1(), "rule__AdditionExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getAdditionExpressionAccess().getRhsOperandAssignment_1_2(), "rule__AdditionExpression__RhsOperandAssignment_1_2");
			builder.put(grammarAccess.getMultiplicationExpressionAccess().getOperatorAssignment_1_1(), "rule__MultiplicationExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationExpressionAccess().getRhsOperandAssignment_1_2(), "rule__MultiplicationExpression__RhsOperandAssignment_1_2");
			builder.put(grammarAccess.getDefinitionGroupAccess().getQuestionDefinitionsAssignment_3_0(), "rule__DefinitionGroup__QuestionDefinitionsAssignment_3_0");
			builder.put(grammarAccess.getDefinitionGroupAccess().getDataTypesAssignment_3_1(), "rule__DefinitionGroup__DataTypesAssignment_3_1");
			builder.put(grammarAccess.getQuestionGroupAccess().getGuardAssignment_1_1(), "rule__QuestionGroup__GuardAssignment_1_1");
			builder.put(grammarAccess.getQuestionGroupAccess().getQuestionGroupsAssignment_3_0(), "rule__QuestionGroup__QuestionGroupsAssignment_3_0");
			builder.put(grammarAccess.getQuestionGroupAccess().getQuestionsAssignment_3_1(), "rule__QuestionGroup__QuestionsAssignment_3_1");
			builder.put(grammarAccess.getQuestionAccess().getQuestionDefinitionAssignment(), "rule__Question__QuestionDefinitionAssignment");
			builder.put(grammarAccess.getValueType_ImplAccess().getNameAssignment_2(), "rule__ValueType_Impl__NameAssignment_2");
			builder.put(grammarAccess.getValueType_ImplAccess().getUnitAssignment_4_1(), "rule__ValueType_Impl__UnitAssignment_4_1");
			builder.put(grammarAccess.getBasicBinaryExpressionAccess().getOperatorAssignment_3(), "rule__BasicBinaryExpression__OperatorAssignment_3");
			builder.put(grammarAccess.getBasicBinaryExpressionAccess().getResultTypeAssignment_4_1(), "rule__BasicBinaryExpression__ResultTypeAssignment_4_1");
			builder.put(grammarAccess.getBasicBinaryExpressionAccess().getLhsOperandAssignment_6(), "rule__BasicBinaryExpression__LhsOperandAssignment_6");
			builder.put(grammarAccess.getBasicBinaryExpressionAccess().getRhsOperandAssignment_8(), "rule__BasicBinaryExpression__RhsOperandAssignment_8");
			builder.put(grammarAccess.getConstantCallAccess().getValueAssignment_1(), "rule__ConstantCall__ValueAssignment_1");
			builder.put(grammarAccess.getBasicUnaryExpressionAccess().getOperatorAssignment_2_1(), "rule__BasicUnaryExpression__OperatorAssignment_2_1");
			builder.put(grammarAccess.getBasicUnaryExpressionAccess().getResultTypeAssignment_3_1(), "rule__BasicUnaryExpression__ResultTypeAssignment_3_1");
			builder.put(grammarAccess.getBasicUnaryExpressionAccess().getOperandAssignment_5(), "rule__BasicUnaryExpression__OperandAssignment_5");
			builder.put(grammarAccess.getQuestionCallAccess().getQuestionAssignment_1(), "rule__QuestionCall__QuestionAssignment_1");
			builder.put(grammarAccess.getBooleanValueTypeAccess().getNameAssignment_2(), "rule__BooleanValueType__NameAssignment_2");
			builder.put(grammarAccess.getBooleanValueTypeAccess().getUnitAssignment_3_1_1(), "rule__BooleanValueType__UnitAssignment_3_1_1");
			builder.put(grammarAccess.getIntegerValueTypeAccess().getNameAssignment_2(), "rule__IntegerValueType__NameAssignment_2");
			builder.put(grammarAccess.getIntegerValueTypeAccess().getUnitAssignment_3_1_1(), "rule__IntegerValueType__UnitAssignment_3_1_1");
			builder.put(grammarAccess.getIntegerValueTypeAccess().getMinAssignment_3_2_1(), "rule__IntegerValueType__MinAssignment_3_2_1");
			builder.put(grammarAccess.getIntegerValueTypeAccess().getMaxAssignment_3_3_1(), "rule__IntegerValueType__MaxAssignment_3_3_1");
			builder.put(grammarAccess.getDecimalValueTypeAccess().getNameAssignment_2(), "rule__DecimalValueType__NameAssignment_2");
			builder.put(grammarAccess.getDecimalValueTypeAccess().getUnitAssignment_3_1_1(), "rule__DecimalValueType__UnitAssignment_3_1_1");
			builder.put(grammarAccess.getDateValueTypeAccess().getNameAssignment_2(), "rule__DateValueType__NameAssignment_2");
			builder.put(grammarAccess.getDateValueTypeAccess().getUnitAssignment_3_1_1(), "rule__DateValueType__UnitAssignment_3_1_1");
			builder.put(grammarAccess.getEnumerationValueTypeAccess().getNameAssignment_2(), "rule__EnumerationValueType__NameAssignment_2");
			builder.put(grammarAccess.getEnumerationValueTypeAccess().getUnitAssignment_3_1_1(), "rule__EnumerationValueType__UnitAssignment_3_1_1");
			builder.put(grammarAccess.getEnumerationValueTypeAccess().getEnumerationLiteralsAssignment_3_2_2(), "rule__EnumerationValueType__EnumerationLiteralsAssignment_3_2_2");
			builder.put(grammarAccess.getEnumerationValueTypeAccess().getEnumerationLiteralsAssignment_3_2_3_1(), "rule__EnumerationValueType__EnumerationLiteralsAssignment_3_2_3_1");
			builder.put(grammarAccess.getStringValueTypeAccess().getNameAssignment_2(), "rule__StringValueType__NameAssignment_2");
			builder.put(grammarAccess.getStringValueTypeAccess().getUnitAssignment_3_1_1(), "rule__StringValueType__UnitAssignment_3_1_1");
			builder.put(grammarAccess.getEnumerationLiteralAccess().getNameAssignment_1(), "rule__EnumerationLiteral__NameAssignment_1");
			builder.put(grammarAccess.getIntegerValueAccess().getIntValueAssignment_1(), "rule__IntegerValue__IntValueAssignment_1");
			builder.put(grammarAccess.getStringValueAccess().getStringValueAssignment_1(), "rule__StringValue__StringValueAssignment_1");
			builder.put(grammarAccess.getBooleanValueAccess().getBooleanValueAssignment_1(), "rule__BooleanValue__BooleanValueAssignment_1");
			builder.put(grammarAccess.getEnumerationCallAccess().getEnumerationLiteralAssignment_1(), "rule__EnumerationCall__EnumerationLiteralAssignment_1");
			builder.put(grammarAccess.getDateValueAccess().getDateValueAssignment_3_1(), "rule__DateValue__DateValueAssignment_3_1");
			builder.put(grammarAccess.getDecimalValueAccess().getDecimalValueAssignment_1(), "rule__DecimalValue__DecimalValueAssignment_1");
			builder.put(grammarAccess.getQuestionDefinitionAccess().getIsMandatoryAssignment_0(), "rule__QuestionDefinition__IsMandatoryAssignment_0");
			builder.put(grammarAccess.getQuestionDefinitionAccess().getNameAssignment_2(), "rule__QuestionDefinition__NameAssignment_2");
			builder.put(grammarAccess.getQuestionDefinitionAccess().getIsDisplayedAssignment_3_1(), "rule__QuestionDefinition__IsDisplayedAssignment_3_1");
			builder.put(grammarAccess.getQuestionDefinitionAccess().getCurrentValueAssignment_3_2_1(), "rule__QuestionDefinition__CurrentValueAssignment_3_2_1");
			builder.put(grammarAccess.getQuestionDefinitionAccess().getLabelAssignment_5(), "rule__QuestionDefinition__LabelAssignment_5");
			builder.put(grammarAccess.getQuestionDefinitionAccess().getDataTypeAssignment_6(), "rule__QuestionDefinition__DataTypeAssignment_6");
			builder.put(grammarAccess.getQuestionDefinitionAccess().getComputedExpressionAssignment_7_1(), "rule__QuestionDefinition__ComputedExpressionAssignment_7_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private QLSGrammarAccess grammarAccess;

	@Override
	protected InternalQLSParser createParser() {
		InternalQLSParser result = new InternalQLSParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public QLSGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(QLSGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
