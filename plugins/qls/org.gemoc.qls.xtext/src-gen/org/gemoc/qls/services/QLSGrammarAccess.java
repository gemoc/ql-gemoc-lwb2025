/*
 * generated by Xtext 2.31.0
 */
package org.gemoc.qls.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.gemoc.ql.services.QLGrammarAccess;

@Singleton
public class QLSGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class QLSModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.qls.QLS.QLSModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQLSModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Keyword cQLSModelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStyledQLModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStyledQLModelQLModelCrossReference_3_0 = (CrossReference)cStyledQLModelAssignment_3.eContents().get(0);
		private final RuleCall cStyledQLModelQLModelQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cStyledQLModelQLModelCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cQuestionStylesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cQuestionStylesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cQuestionStylesQuestionStyleParserRuleCall_7_0 = (RuleCall)cQuestionStylesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////generate qLS "http://www.gemoc.org/qls/QLS"
		//QLSModel returns QLSModel:
		//    {QLSModel}
		//    imports+=Import*
		//    'QLSModel'
		//    styledQLModel=[ql::QLModel|QualifiedName]
		//    '{'
		//        'questionStyles' '{'  (questionStyles+=QuestionStyle)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{QLSModel}
		//imports+=Import*
		//'QLSModel'
		//styledQLModel=[ql::QLModel|QualifiedName]
		//'{'
		//    'questionStyles' '{'  (questionStyles+=QuestionStyle)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{QLSModel}
		public Action getQLSModelAction_0() { return cQLSModelAction_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
		
		//'QLSModel'
		public Keyword getQLSModelKeyword_2() { return cQLSModelKeyword_2; }
		
		//styledQLModel=[ql::QLModel|QualifiedName]
		public Assignment getStyledQLModelAssignment_3() { return cStyledQLModelAssignment_3; }
		
		//[ql::QLModel|QualifiedName]
		public CrossReference getStyledQLModelQLModelCrossReference_3_0() { return cStyledQLModelQLModelCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getStyledQLModelQLModelQualifiedNameParserRuleCall_3_0_1() { return cStyledQLModelQLModelQualifiedNameParserRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'questionStyles'
		public Keyword getQuestionStylesKeyword_5() { return cQuestionStylesKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//(questionStyles+=QuestionStyle)*
		public Assignment getQuestionStylesAssignment_7() { return cQuestionStylesAssignment_7; }
		
		//QuestionStyle
		public RuleCall getQuestionStylesQuestionStyleParserRuleCall_7_0() { return cQuestionStylesQuestionStyleParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.qls.QLS.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportURISTRINGTerminalRuleCall_2_0 = (RuleCall)cImportURIAssignment_2.eContents().get(0);
		
		//Import returns Import:
		//    {Import}
		//    'import' importURI=STRING
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Import}
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//{Import}
		public Action getImportAction_0() { return cImportAction_0; }
		
		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_2() { return cImportURIAssignment_2; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_2_0() { return cImportURISTRINGTerminalRuleCall_2_0; }
	}
	public class TypeStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.qls.QLS.TypeStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanTypeStyleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericTypeStyleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextTypeStyleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypeStyle returns TypeStyle:
		//    BooleanTypeStyle | NumericTypeStyle | TextTypeStyle;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanTypeStyle | NumericTypeStyle | TextTypeStyle
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanTypeStyle
		public RuleCall getBooleanTypeStyleParserRuleCall_0() { return cBooleanTypeStyleParserRuleCall_0; }
		
		//NumericTypeStyle
		public RuleCall getNumericTypeStyleParserRuleCall_1() { return cNumericTypeStyleParserRuleCall_1; }
		
		//TextTypeStyle
		public RuleCall getTextTypeStyleParserRuleCall_2() { return cTextTypeStyleParserRuleCall_2; }
	}
	public class NumericTypeStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.qls.QLS.NumericTypeStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericTypeTextFieldStyleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericTypeSpinnerStyleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericTypeStyle returns NumericTypeStyle:
		//    NumericTypeTextFieldStyle | NumericTypeSpinnerStyle
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NumericTypeTextFieldStyle | NumericTypeSpinnerStyle
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericTypeTextFieldStyle
		public RuleCall getNumericTypeTextFieldStyleParserRuleCall_0() { return cNumericTypeTextFieldStyleParserRuleCall_0; }
		
		//NumericTypeSpinnerStyle
		public RuleCall getNumericTypeSpinnerStyleParserRuleCall_1() { return cNumericTypeSpinnerStyleParserRuleCall_1; }
	}
	public class QuestionStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.qls.QLS.QuestionStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStyledQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStyledQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStyledQuestionQuestionDefinitionCrossReference_1_0 = (CrossReference)cStyledQuestionAssignment_1.eContents().get(0);
		private final RuleCall cStyledQuestionQuestionDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cStyledQuestionQuestionDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLabelStyleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLabelStyleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLabelStyleLabelStyleParserRuleCall_3_1_0 = (RuleCall)cLabelStyleAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeStyleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeStyleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeStyleTypeStyleParserRuleCall_4_1_0 = (RuleCall)cTypeStyleAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//QuestionStyle returns QuestionStyle:
		//    'styledQuestion' styledQuestion=[ql::QuestionDefinition|QualifiedName]
		//    '{'
		//        ('labelStyle' labelStyle=LabelStyle)?
		//        ('typeStyle' typeStyle=TypeStyle)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'styledQuestion' styledQuestion=[ql::QuestionDefinition|QualifiedName]
		//'{'
		//    ('labelStyle' labelStyle=LabelStyle)?
		//    ('typeStyle' typeStyle=TypeStyle)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'styledQuestion'
		public Keyword getStyledQuestionKeyword_0() { return cStyledQuestionKeyword_0; }
		
		//styledQuestion=[ql::QuestionDefinition|QualifiedName]
		public Assignment getStyledQuestionAssignment_1() { return cStyledQuestionAssignment_1; }
		
		//[ql::QuestionDefinition|QualifiedName]
		public CrossReference getStyledQuestionQuestionDefinitionCrossReference_1_0() { return cStyledQuestionQuestionDefinitionCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getStyledQuestionQuestionDefinitionQualifiedNameParserRuleCall_1_0_1() { return cStyledQuestionQuestionDefinitionQualifiedNameParserRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('labelStyle' labelStyle=LabelStyle)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'labelStyle'
		public Keyword getLabelStyleKeyword_3_0() { return cLabelStyleKeyword_3_0; }
		
		//labelStyle=LabelStyle
		public Assignment getLabelStyleAssignment_3_1() { return cLabelStyleAssignment_3_1; }
		
		//LabelStyle
		public RuleCall getLabelStyleLabelStyleParserRuleCall_3_1_0() { return cLabelStyleLabelStyleParserRuleCall_3_1_0; }
		
		//('typeStyle' typeStyle=TypeStyle)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'typeStyle'
		public Keyword getTypeStyleKeyword_4_0() { return cTypeStyleKeyword_4_0; }
		
		//typeStyle=TypeStyle
		public Assignment getTypeStyleAssignment_4_1() { return cTypeStyleAssignment_4_1; }
		
		//TypeStyle
		public RuleCall getTypeStyleTypeStyleParserRuleCall_4_1_0() { return cTypeStyleTypeStyleParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LabelStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.qls.QLS.LabelStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabelStyleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItalicAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cItalicItalicKeyword_2_0 = (Keyword)cItalicAssignment_2.eContents().get(0);
		private final Assignment cBoldAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cBoldBoldKeyword_3_0 = (Keyword)cBoldAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LabelStyle returns LabelStyle:
		//    {LabelStyle}
		//    '{'
		//        (italic?='italic')?
		//        (bold?='bold')?
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{LabelStyle}
		//'{'
		//    (italic?='italic')?
		//    (bold?='bold')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{LabelStyle}
		public Action getLabelStyleAction_0() { return cLabelStyleAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(italic?='italic')?
		public Assignment getItalicAssignment_2() { return cItalicAssignment_2; }
		
		//'italic'
		public Keyword getItalicItalicKeyword_2_0() { return cItalicItalicKeyword_2_0; }
		
		//(bold?='bold')?
		public Assignment getBoldAssignment_3() { return cBoldAssignment_3; }
		
		//'bold'
		public Keyword getBoldBoldKeyword_3_0() { return cBoldBoldKeyword_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BooleanTypeStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.qls.QLS.BooleanTypeStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBooleanStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBooleanStyleKindAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBooleanStyleKindBooleanStyleKindEnumRuleCall_2_0 = (RuleCall)cBooleanStyleKindAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BooleanTypeStyle returns BooleanTypeStyle:
		//    'BooleanStyle'
		//    '{'
		//        booleanStyleKind=BooleanStyleKind
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BooleanStyle'
		//'{'
		//    booleanStyleKind=BooleanStyleKind
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'BooleanStyle'
		public Keyword getBooleanStyleKeyword_0() { return cBooleanStyleKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//booleanStyleKind=BooleanStyleKind
		public Assignment getBooleanStyleKindAssignment_2() { return cBooleanStyleKindAssignment_2; }
		
		//BooleanStyleKind
		public RuleCall getBooleanStyleKindBooleanStyleKindEnumRuleCall_2_0() { return cBooleanStyleKindBooleanStyleKindEnumRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class NumericTypeTextFieldStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.qls.QLS.NumericTypeTextFieldStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumericTypeTextFieldStyleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumericStyleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTextFieldKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NumericTypeTextFieldStyle returns NumericTypeTextFieldStyle:
		//    {NumericTypeTextFieldStyle}
		//    'NumericStyle' 'textField'
		//    '{'    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{NumericTypeTextFieldStyle}
		//'NumericStyle' 'textField'
		//'{'    '}'
		public Group getGroup() { return cGroup; }
		
		//{NumericTypeTextFieldStyle}
		public Action getNumericTypeTextFieldStyleAction_0() { return cNumericTypeTextFieldStyleAction_0; }
		
		//'NumericStyle'
		public Keyword getNumericStyleKeyword_1() { return cNumericStyleKeyword_1; }
		
		//'textField'
		public Keyword getTextFieldKeyword_2() { return cTextFieldKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NumericTypeSpinnerStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.qls.QLS.NumericTypeSpinnerStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumericTypeSpinnerStyleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumericStyleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSpinnerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStepKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStepAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStepEDoubleParserRuleCall_4_1_0 = (RuleCall)cStepAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//NumericTypeSpinnerStyle returns NumericTypeSpinnerStyle:
		//    {NumericTypeSpinnerStyle}
		//    'NumericStyle' 'spinner' '{'
		//        ('step' step=EDouble)?'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{NumericTypeSpinnerStyle}
		//'NumericStyle' 'spinner' '{'
		//    ('step' step=EDouble)?'}'
		public Group getGroup() { return cGroup; }
		
		//{NumericTypeSpinnerStyle}
		public Action getNumericTypeSpinnerStyleAction_0() { return cNumericTypeSpinnerStyleAction_0; }
		
		//'NumericStyle'
		public Keyword getNumericStyleKeyword_1() { return cNumericStyleKeyword_1; }
		
		//'spinner'
		public Keyword getSpinnerKeyword_2() { return cSpinnerKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('step' step=EDouble)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'step'
		public Keyword getStepKeyword_4_0() { return cStepKeyword_4_0; }
		
		//step=EDouble
		public Assignment getStepAssignment_4_1() { return cStepAssignment_4_1; }
		
		//EDouble
		public RuleCall getStepEDoubleParserRuleCall_4_1_0() { return cStepEDoubleParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TextTypeStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.qls.QLS.TextTypeStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextTypeStyleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTextStyleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMultilineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cMultilineMultilineKeyword_3_0 = (Keyword)cMultilineAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TextTypeStyle returns TextTypeStyle:
		//    {TextTypeStyle}
		//    'TextStyle' '{' (multiline?='multiline')? '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{TextTypeStyle}
		//'TextStyle' '{' (multiline?='multiline')? '}'
		public Group getGroup() { return cGroup; }
		
		//{TextTypeStyle}
		public Action getTextTypeStyleAction_0() { return cTextTypeStyleAction_0; }
		
		//'TextStyle'
		public Keyword getTextStyleKeyword_1() { return cTextStyleKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(multiline?='multiline')?
		public Assignment getMultilineAssignment_3() { return cMultilineAssignment_3; }
		
		//'multiline'
		public Keyword getMultilineMultilineKeyword_3_0() { return cMultilineMultilineKeyword_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	public class BooleanStyleKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.qls.QLS.BooleanStyleKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCHECKBOXEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCHECKBOXCHECKBOXKeyword_0_0 = (Keyword)cCHECKBOXEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTWO_RADIOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTWO_RADIOTWO_RADIOKeyword_1_0 = (Keyword)cTWO_RADIOEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDROPDOWNEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDROPDOWNDROPDOWNKeyword_2_0 = (Keyword)cDROPDOWNEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BooleanStyleKind returns BooleanStyleKind:
		//                CHECKBOX = 'CHECKBOX' | TWO_RADIO = 'TWO_RADIO' | DROPDOWN = 'DROPDOWN';
		public EnumRule getRule() { return rule; }
		
		//CHECKBOX = 'CHECKBOX' | TWO_RADIO = 'TWO_RADIO' | DROPDOWN = 'DROPDOWN'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CHECKBOX = 'CHECKBOX'
		public EnumLiteralDeclaration getCHECKBOXEnumLiteralDeclaration_0() { return cCHECKBOXEnumLiteralDeclaration_0; }
		
		//'CHECKBOX'
		public Keyword getCHECKBOXCHECKBOXKeyword_0_0() { return cCHECKBOXCHECKBOXKeyword_0_0; }
		
		//TWO_RADIO = 'TWO_RADIO'
		public EnumLiteralDeclaration getTWO_RADIOEnumLiteralDeclaration_1() { return cTWO_RADIOEnumLiteralDeclaration_1; }
		
		//'TWO_RADIO'
		public Keyword getTWO_RADIOTWO_RADIOKeyword_1_0() { return cTWO_RADIOTWO_RADIOKeyword_1_0; }
		
		//DROPDOWN = 'DROPDOWN'
		public EnumLiteralDeclaration getDROPDOWNEnumLiteralDeclaration_2() { return cDROPDOWNEnumLiteralDeclaration_2; }
		
		//'DROPDOWN'
		public Keyword getDROPDOWNDROPDOWNKeyword_2_0() { return cDROPDOWNDROPDOWNKeyword_2_0; }
	}
	
	private final QLSModelElements pQLSModel;
	private final ImportElements pImport;
	private final TypeStyleElements pTypeStyle;
	private final NumericTypeStyleElements pNumericTypeStyle;
	private final QuestionStyleElements pQuestionStyle;
	private final LabelStyleElements pLabelStyle;
	private final BooleanTypeStyleElements pBooleanTypeStyle;
	private final NumericTypeTextFieldStyleElements pNumericTypeTextFieldStyle;
	private final NumericTypeSpinnerStyleElements pNumericTypeSpinnerStyle;
	private final TextTypeStyleElements pTextTypeStyle;
	private final BooleanStyleKindElements eBooleanStyleKind;
	
	private final Grammar grammar;
	
	private final QLGrammarAccess gaQL;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QLSGrammarAccess(GrammarProvider grammarProvider,
			QLGrammarAccess gaQL,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaQL = gaQL;
		this.gaTerminals = gaTerminals;
		this.pQLSModel = new QLSModelElements();
		this.pImport = new ImportElements();
		this.pTypeStyle = new TypeStyleElements();
		this.pNumericTypeStyle = new NumericTypeStyleElements();
		this.pQuestionStyle = new QuestionStyleElements();
		this.pLabelStyle = new LabelStyleElements();
		this.pBooleanTypeStyle = new BooleanTypeStyleElements();
		this.pNumericTypeTextFieldStyle = new NumericTypeTextFieldStyleElements();
		this.pNumericTypeSpinnerStyle = new NumericTypeSpinnerStyleElements();
		this.pTextTypeStyle = new TextTypeStyleElements();
		this.eBooleanStyleKind = new BooleanStyleKindElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.qls.QLS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public QLGrammarAccess getQLGrammarAccess() {
		return gaQL;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////generate qLS "http://www.gemoc.org/qls/QLS"
	//QLSModel returns QLSModel:
	//    {QLSModel}
	//    imports+=Import*
	//    'QLSModel'
	//    styledQLModel=[ql::QLModel|QualifiedName]
	//    '{'
	//        'questionStyles' '{'  (questionStyles+=QuestionStyle)* '}'
	//    '}';
	public QLSModelElements getQLSModelAccess() {
		return pQLSModel;
	}
	
	public ParserRule getQLSModelRule() {
		return getQLSModelAccess().getRule();
	}
	
	//Import returns Import:
	//    {Import}
	//    'import' importURI=STRING
	//    ;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//TypeStyle returns TypeStyle:
	//    BooleanTypeStyle | NumericTypeStyle | TextTypeStyle;
	public TypeStyleElements getTypeStyleAccess() {
		return pTypeStyle;
	}
	
	public ParserRule getTypeStyleRule() {
		return getTypeStyleAccess().getRule();
	}
	
	//NumericTypeStyle returns NumericTypeStyle:
	//    NumericTypeTextFieldStyle | NumericTypeSpinnerStyle
	//;
	public NumericTypeStyleElements getNumericTypeStyleAccess() {
		return pNumericTypeStyle;
	}
	
	public ParserRule getNumericTypeStyleRule() {
		return getNumericTypeStyleAccess().getRule();
	}
	
	//QuestionStyle returns QuestionStyle:
	//    'styledQuestion' styledQuestion=[ql::QuestionDefinition|QualifiedName]
	//    '{'
	//        ('labelStyle' labelStyle=LabelStyle)?
	//        ('typeStyle' typeStyle=TypeStyle)?
	//    '}';
	public QuestionStyleElements getQuestionStyleAccess() {
		return pQuestionStyle;
	}
	
	public ParserRule getQuestionStyleRule() {
		return getQuestionStyleAccess().getRule();
	}
	
	//LabelStyle returns LabelStyle:
	//    {LabelStyle}
	//    '{'
	//        (italic?='italic')?
	//        (bold?='bold')?
	//    '}'
	//    ;
	public LabelStyleElements getLabelStyleAccess() {
		return pLabelStyle;
	}
	
	public ParserRule getLabelStyleRule() {
		return getLabelStyleAccess().getRule();
	}
	
	//BooleanTypeStyle returns BooleanTypeStyle:
	//    'BooleanStyle'
	//    '{'
	//        booleanStyleKind=BooleanStyleKind
	//    '}';
	public BooleanTypeStyleElements getBooleanTypeStyleAccess() {
		return pBooleanTypeStyle;
	}
	
	public ParserRule getBooleanTypeStyleRule() {
		return getBooleanTypeStyleAccess().getRule();
	}
	
	//NumericTypeTextFieldStyle returns NumericTypeTextFieldStyle:
	//    {NumericTypeTextFieldStyle}
	//    'NumericStyle' 'textField'
	//    '{'    '}';
	public NumericTypeTextFieldStyleElements getNumericTypeTextFieldStyleAccess() {
		return pNumericTypeTextFieldStyle;
	}
	
	public ParserRule getNumericTypeTextFieldStyleRule() {
		return getNumericTypeTextFieldStyleAccess().getRule();
	}
	
	//NumericTypeSpinnerStyle returns NumericTypeSpinnerStyle:
	//    {NumericTypeSpinnerStyle}
	//    'NumericStyle' 'spinner' '{'
	//        ('step' step=EDouble)?'}'
	//    ;
	public NumericTypeSpinnerStyleElements getNumericTypeSpinnerStyleAccess() {
		return pNumericTypeSpinnerStyle;
	}
	
	public ParserRule getNumericTypeSpinnerStyleRule() {
		return getNumericTypeSpinnerStyleAccess().getRule();
	}
	
	//TextTypeStyle returns TextTypeStyle:
	//    {TextTypeStyle}
	//    'TextStyle' '{' (multiline?='multiline')? '}'
	//    ;
	public TextTypeStyleElements getTextTypeStyleAccess() {
		return pTextTypeStyle;
	}
	
	public ParserRule getTextTypeStyleRule() {
		return getTextTypeStyleAccess().getRule();
	}
	
	//enum BooleanStyleKind returns BooleanStyleKind:
	//                CHECKBOX = 'CHECKBOX' | TWO_RADIO = 'TWO_RADIO' | DROPDOWN = 'DROPDOWN';
	public BooleanStyleKindElements getBooleanStyleKindAccess() {
		return eBooleanStyleKind;
	}
	
	public EnumRule getBooleanStyleKindRule() {
		return getBooleanStyleKindAccess().getRule();
	}
	
	//QLModel returns QLModel:
	//    {QLModel}
	//    'QLModel' name=ID
	//    ('(' (canSubmit?='canSubmit')? ('submitDate' submitDate=EDate)? ')')?
	//    '{'
	//        ( 'definitions' definitionGroup+=DefinitionGroup | ( 'displayableQuestions' questionGroups+=QuestionGroup))*
	//    '}';
	public QLGrammarAccess.QLModelElements getQLModelAccess() {
		return gaQL.getQLModelAccess();
	}
	
	public ParserRule getQLModelRule() {
		return getQLModelAccess().getRule();
	}
	
	//ValueType returns ValueType:
	//    ValueType_Impl | BooleanValueType | IntegerValueType | DecimalValueType | DateValueType | EnumerationValueType | StringValueType;
	public QLGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaQL.getValueTypeAccess();
	}
	
	public ParserRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//Expression returns Expression:
	//    UnaryOrPrimaryExpression;
	public QLGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaQL.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//    //BasicBinaryExpression | ConstantCall | BasicUnaryExpression | QuestionCall;
	//UnaryOrPrimaryExpression returns Expression:
	//    PrimaryExpression | UnaryExpression
	//    ;
	public QLGrammarAccess.UnaryOrPrimaryExpressionElements getUnaryOrPrimaryExpressionAccess() {
		return gaQL.getUnaryOrPrimaryExpressionAccess();
	}
	
	public ParserRule getUnaryOrPrimaryExpressionRule() {
		return getUnaryOrPrimaryExpressionAccess().getRule();
	}
	
	//UnaryExpression returns Expression :
	//    {BasicUnaryExpression}
	//    operator=UnaryOperatorKind operand=UnaryOrPrimaryExpression
	//    ;
	public QLGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaQL.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//PrimaryExpression returns Expression:
	//    Call  | IfExpression | '(' (OrExpression | UnaryExpression) ')'  ;
	public QLGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaQL.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//IfExpression returns IfExpression:
	//    {IfExpression}
	//    'if' condition=Expression
	//    'then' thenExpression=Expression
	//    ('else' elseExpression=Expression )?
	//    'endif'
	//;
	public QLGrammarAccess.IfExpressionElements getIfExpressionAccess() {
		return gaQL.getIfExpressionAccess();
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//OrExpression returns Expression:
	//    AndExpression (
	//        {BasicBinaryExpression.lhsOperand=current}
	//        operator=OrOperatorKind
	//        rhsOperand=AndExpression
	//    )*
	//;
	public QLGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaQL.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression returns Expression:
	//    EqualExpression (
	//        {BasicBinaryExpression.lhsOperand=current}
	//        operator=AndOperatorKind
	//        rhsOperand=EqualExpression
	//    )*
	//;
	public QLGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaQL.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualExpression returns Expression:
	//    ComparisionExpression (
	//        {BasicBinaryExpression.lhsOperand=current}
	//        operator=EqualOperatorKind
	//        rhsOperand=ComparisionExpression
	//    )*
	//;
	public QLGrammarAccess.EqualExpressionElements getEqualExpressionAccess() {
		return gaQL.getEqualExpressionAccess();
	}
	
	public ParserRule getEqualExpressionRule() {
		return getEqualExpressionAccess().getRule();
	}
	
	//ComparisionExpression returns Expression:
	//    AdditionExpression (
	//        {BasicBinaryExpression.lhsOperand=current}
	//        operator=ComparisionOperatorKind
	//        rhsOperand=AdditionExpression
	//    )*
	//;
	public QLGrammarAccess.ComparisionExpressionElements getComparisionExpressionAccess() {
		return gaQL.getComparisionExpressionAccess();
	}
	
	public ParserRule getComparisionExpressionRule() {
		return getComparisionExpressionAccess().getRule();
	}
	
	//AdditionExpression returns Expression:
	//    MultiplicationExpression (
	//        {BasicBinaryExpression.lhsOperand=current}
	//        operator=AdditionOperatorKind
	//        rhsOperand=MultiplicationExpression
	//    )*
	//;
	public QLGrammarAccess.AdditionExpressionElements getAdditionExpressionAccess() {
		return gaQL.getAdditionExpressionAccess();
	}
	
	public ParserRule getAdditionExpressionRule() {
		return getAdditionExpressionAccess().getRule();
	}
	
	//MultiplicationExpression returns Expression:
	//    PrimaryExpression (
	//        {BasicBinaryExpression.lhsOperand=current}
	//        operator=MultiplicationOperatorKind
	//        rhsOperand=UnaryOrPrimaryExpression
	//    )*
	//;
	public QLGrammarAccess.MultiplicationExpressionElements getMultiplicationExpressionAccess() {
		return gaQL.getMultiplicationExpressionAccess();
	}
	
	public ParserRule getMultiplicationExpressionRule() {
		return getMultiplicationExpressionAccess().getRule();
	}
	
	//Call returns Call:
	//    ConstantCall | QuestionCall | EnumerationCall;
	public QLGrammarAccess.CallElements getCallAccess() {
		return gaQL.getCallAccess();
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//Value returns Value:
	//    IntegerValue | StringValue | BooleanValue | DateValue | DecimalValue;
	public QLGrammarAccess.ValueElements getValueAccess() {
		return gaQL.getValueAccess();
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//DefinitionGroup returns DefinitionGroup:
	//    {DefinitionGroup}
	//    '{'
	//        ( questionDefinitions+=QuestionDefinition | dataTypes+=ValueType )*
	//    '}';
	public QLGrammarAccess.DefinitionGroupElements getDefinitionGroupAccess() {
		return gaQL.getDefinitionGroupAccess();
	}
	
	public ParserRule getDefinitionGroupRule() {
		return getDefinitionGroupAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public QLGrammarAccess.EBooleanElements getEBooleanAccess() {
		return gaQL.getEBooleanAccess();
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EDate returns ecore::EDate:
	//    'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;
	public QLGrammarAccess.EDateElements getEDateAccess() {
		return gaQL.getEDateAccess();
	}
	
	public ParserRule getEDateRule() {
		return getEDateAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public QLGrammarAccess.EStringElements getEStringAccess() {
		return gaQL.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//QuestionGroup returns QuestionGroup:
	//    {QuestionGroup}
	//    ('if' guard=Expression )?
	//    '{'
	//        ( questionGroups+=QuestionGroup | questions+=Question)*
	//    '}';
	public QLGrammarAccess.QuestionGroupElements getQuestionGroupAccess() {
		return gaQL.getQuestionGroupAccess();
	}
	
	public ParserRule getQuestionGroupRule() {
		return getQuestionGroupAccess().getRule();
	}
	
	//Question returns Question:
	//    questionDefinition=[QuestionDefinition|QualifiedName]
	//    ;
	public QLGrammarAccess.QuestionElements getQuestionAccess() {
		return gaQL.getQuestionAccess();
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//ValueType_Impl returns ValueType:
	//    {ValueType}
	//    'ValueType'
	//    name=ID
	//    '{'
	//        ('unit' unit=EString)?
	//    '}';
	public QLGrammarAccess.ValueType_ImplElements getValueType_ImplAccess() {
		return gaQL.getValueType_ImplAccess();
	}
	
	public ParserRule getValueType_ImplRule() {
		return getValueType_ImplAccess().getRule();
	}
	
	//BasicBinaryExpression returns BasicBinaryExpression:
	//    'BasicBinaryExpression'
	//    '{'
	//        'operator' operator=BinaryOperatorKind
	//        ('resultType' resultType=[ValueType|EString])?
	//        'lhsOperand' lhsOperand=Expression
	//        'rhsOperand' rhsOperand=Expression
	//    '}';
	public QLGrammarAccess.BasicBinaryExpressionElements getBasicBinaryExpressionAccess() {
		return gaQL.getBasicBinaryExpressionAccess();
	}
	
	public ParserRule getBasicBinaryExpressionRule() {
		return getBasicBinaryExpressionAccess().getRule();
	}
	
	//ConstantCall returns ConstantCall:
	//    {ConstantCall}
	//    value=(StringValue | IntegerValue | BooleanValue | DecimalValue )
	//    ;
	public QLGrammarAccess.ConstantCallElements getConstantCallAccess() {
		return gaQL.getConstantCallAccess();
	}
	
	public ParserRule getConstantCallRule() {
		return getConstantCallAccess().getRule();
	}
	
	//BasicUnaryExpression returns BasicUnaryExpression:
	//    'BasicUnaryExpression'
	//    '{'
	//        ('operator' operator=UnaryOperatorKind)?
	//        ('resultType' resultType=[ValueType|QualifiedName])?
	//        'operand' operand=Expression
	//    '}';
	public QLGrammarAccess.BasicUnaryExpressionElements getBasicUnaryExpressionAccess() {
		return gaQL.getBasicUnaryExpressionAccess();
	}
	
	public ParserRule getBasicUnaryExpressionRule() {
		return getBasicUnaryExpressionAccess().getRule();
	}
	
	//QuestionCall returns QuestionCall:
	//    {QuestionCall}
	//    question=[QuestionDefinition|QualifiedName] '(' ')'
	//    ;
	public QLGrammarAccess.QuestionCallElements getQuestionCallAccess() {
		return gaQL.getQuestionCallAccess();
	}
	
	public ParserRule getQuestionCallRule() {
		return getQuestionCallAccess().getRule();
	}
	
	//BooleanValueType returns BooleanValueType:
	//    {BooleanValueType}
	//    'booleanType'
	//    name=ID
	//    ('{'
	//        ('unit' unit=EString)?
	//    '}')?;
	public QLGrammarAccess.BooleanValueTypeElements getBooleanValueTypeAccess() {
		return gaQL.getBooleanValueTypeAccess();
	}
	
	public ParserRule getBooleanValueTypeRule() {
		return getBooleanValueTypeAccess().getRule();
	}
	
	//IntegerValueType returns IntegerValueType:
	//    {IntegerValueType}
	//    'integerType'
	//    name=ID
	//    ('{'
	//        ('unit' unit=EString)?
	//        ('min' min=EInt)?
	//        ('max' max=EInt)?
	//    '}')?;
	public QLGrammarAccess.IntegerValueTypeElements getIntegerValueTypeAccess() {
		return gaQL.getIntegerValueTypeAccess();
	}
	
	public ParserRule getIntegerValueTypeRule() {
		return getIntegerValueTypeAccess().getRule();
	}
	
	//DecimalValueType returns DecimalValueType:
	//    {DecimalValueType}
	//    'decimalType'
	//    name=ID
	//    ('{'
	//        ('unit' unit=EString)?
	//    '}')?;
	public QLGrammarAccess.DecimalValueTypeElements getDecimalValueTypeAccess() {
		return gaQL.getDecimalValueTypeAccess();
	}
	
	public ParserRule getDecimalValueTypeRule() {
		return getDecimalValueTypeAccess().getRule();
	}
	
	//DateValueType returns DateValueType:
	//    {DateValueType}
	//    'dateType'
	//    name=ID
	//    ('{'
	//        ('unit' unit=EString)?
	//    '}')?;
	public QLGrammarAccess.DateValueTypeElements getDateValueTypeAccess() {
		return gaQL.getDateValueTypeAccess();
	}
	
	public ParserRule getDateValueTypeRule() {
		return getDateValueTypeAccess().getRule();
	}
	
	//EnumerationValueType returns EnumerationValueType:
	//    {EnumerationValueType}
	//    'enumerationType'
	//    name=ID
	//    ('{'
	//        ('unit' unit=EString)?
	//        ('literals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
	//    '}')?;
	public QLGrammarAccess.EnumerationValueTypeElements getEnumerationValueTypeAccess() {
		return gaQL.getEnumerationValueTypeAccess();
	}
	
	public ParserRule getEnumerationValueTypeRule() {
		return getEnumerationValueTypeAccess().getRule();
	}
	
	//StringValueType returns StringValueType:
	//    {StringValueType}
	//    'StringType'
	//    name=ID
	//    ('{'
	//        ('unit' unit=EString)?
	//    '}')?;
	public QLGrammarAccess.StringValueTypeElements getStringValueTypeAccess() {
		return gaQL.getStringValueTypeAccess();
	}
	
	public ParserRule getStringValueTypeRule() {
		return getStringValueTypeAccess().getRule();
	}
	
	//EnumerationLiteral returns EnumerationLiteral:
	//    {EnumerationLiteral}
	//    name=ID;
	public QLGrammarAccess.EnumerationLiteralElements getEnumerationLiteralAccess() {
		return gaQL.getEnumerationLiteralAccess();
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}
	
	//enum BinaryOperatorKind returns BinaryOperatorKind:
	//                PLUS = 'PLUS' | MINUS = 'MINUS' | MULT = 'MULT' | DIV = 'DIV' | EQUAL = 'EQUAL' | NOTEQUAL = 'NOTEQUAL' | GREATER = 'GREATER' | LOWER = 'LOWER' | GREATEROREQUAL = 'GREATEROREQUAL' | LOWEROREQUAL = 'LOWEROREQUAL' | AND = 'AND' | OR = 'OR';
	public QLGrammarAccess.BinaryOperatorKindElements getBinaryOperatorKindAccess() {
		return gaQL.getBinaryOperatorKindAccess();
	}
	
	public EnumRule getBinaryOperatorKindRule() {
		return getBinaryOperatorKindAccess().getRule();
	}
	
	//IntegerValue returns IntegerValue:
	//    {IntegerValue}
	//    intValue=EInt
	//    ;
	public QLGrammarAccess.IntegerValueElements getIntegerValueAccess() {
		return gaQL.getIntegerValueAccess();
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}
	
	//StringValue returns StringValue:
	//    {StringValue}
	//    stringValue=STRING
	//    ;
	public QLGrammarAccess.StringValueElements getStringValueAccess() {
		return gaQL.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//BooleanValue returns BooleanValue:
	//    {BooleanValue}
	//    booleanValue=EBoolean
	//    ;
	public QLGrammarAccess.BooleanValueElements getBooleanValueAccess() {
		return gaQL.getBooleanValueAccess();
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//EnumerationCall returns EnumerationCall:
	//    {EnumerationCall}
	//    enumerationLiteral=[EnumerationLiteral|QualifiedName]
	//    ;
	public QLGrammarAccess.EnumerationCallElements getEnumerationCallAccess() {
		return gaQL.getEnumerationCallAccess();
	}
	
	public ParserRule getEnumerationCallRule() {
		return getEnumerationCallAccess().getRule();
	}
	
	//DateValue returns DateValue:
	//    {DateValue}
	//    'DateValue'
	//    '{'
	//        ('dateValue' dateValue=EDate)?
	//    '}';
	public QLGrammarAccess.DateValueElements getDateValueAccess() {
		return gaQL.getDateValueAccess();
	}
	
	public ParserRule getDateValueRule() {
		return getDateValueAccess().getRule();
	}
	
	//DecimalValue returns DecimalValue:
	//    {DecimalValue}
	//    decimalValue=EDouble
	//    ;
	public QLGrammarAccess.DecimalValueElements getDecimalValueAccess() {
		return gaQL.getDecimalValueAccess();
	}
	
	public ParserRule getDecimalValueRule() {
		return getDecimalValueAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    //'-'? INT;
	//    INT;
	public QLGrammarAccess.EIntElements getEIntAccess() {
		return gaQL.getEIntAccess();
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EDouble returns ecore::EDouble:
	//    //'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	//    INT? '.' INT (('E'|'e') '-'? INT)?;
	public QLGrammarAccess.EDoubleElements getEDoubleAccess() {
		return gaQL.getEDoubleAccess();
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//enum UnaryOperatorKind returns UnaryOperatorKind:
	//                UNARYMINUS = '-' | NOT = 'not';
	public QLGrammarAccess.UnaryOperatorKindElements getUnaryOperatorKindAccess() {
		return gaQL.getUnaryOperatorKindAccess();
	}
	
	public EnumRule getUnaryOperatorKindRule() {
		return getUnaryOperatorKindAccess().getRule();
	}
	
	//enum AdditionOperatorKind returns BinaryOperatorKind:
	//    PLUS = '+' | MINUS = '-'
	//;
	public QLGrammarAccess.AdditionOperatorKindElements getAdditionOperatorKindAccess() {
		return gaQL.getAdditionOperatorKindAccess();
	}
	
	public EnumRule getAdditionOperatorKindRule() {
		return getAdditionOperatorKindAccess().getRule();
	}
	
	//enum MultiplicationOperatorKind returns BinaryOperatorKind:
	//    MULT = '*' | DIV = '/'
	//;
	public QLGrammarAccess.MultiplicationOperatorKindElements getMultiplicationOperatorKindAccess() {
		return gaQL.getMultiplicationOperatorKindAccess();
	}
	
	public EnumRule getMultiplicationOperatorKindRule() {
		return getMultiplicationOperatorKindAccess().getRule();
	}
	
	//enum EqualOperatorKind  returns BinaryOperatorKind:
	//    EQUAL = '='
	//;
	public QLGrammarAccess.EqualOperatorKindElements getEqualOperatorKindAccess() {
		return gaQL.getEqualOperatorKindAccess();
	}
	
	public EnumRule getEqualOperatorKindRule() {
		return getEqualOperatorKindAccess().getRule();
	}
	
	//enum ComparisionOperatorKind  returns BinaryOperatorKind:
	//    GREATER = '>' | LOWER = '<' | GREATEROREQUAL = '>=' | LOWEROREQUAL = '<='
	//;
	public QLGrammarAccess.ComparisionOperatorKindElements getComparisionOperatorKindAccess() {
		return gaQL.getComparisionOperatorKindAccess();
	}
	
	public EnumRule getComparisionOperatorKindRule() {
		return getComparisionOperatorKindAccess().getRule();
	}
	
	//enum AndOperatorKind  returns BinaryOperatorKind:
	//    AND = 'and';
	public QLGrammarAccess.AndOperatorKindElements getAndOperatorKindAccess() {
		return gaQL.getAndOperatorKindAccess();
	}
	
	public EnumRule getAndOperatorKindRule() {
		return getAndOperatorKindAccess().getRule();
	}
	
	//enum OrOperatorKind returns BinaryOperatorKind:
	//    OR = 'or';
	public QLGrammarAccess.OrOperatorKindElements getOrOperatorKindAccess() {
		return gaQL.getOrOperatorKindAccess();
	}
	
	public EnumRule getOrOperatorKindRule() {
		return getOrOperatorKindAccess().getRule();
	}
	
	//QuestionDefinition returns QuestionDefinition:
	//    (isMandatory?='mandatory')?
	//    'question'
	//    name=EString
	//    ( '('    (isDisplayed?='isDisplayed')?
	//        ('currentValue' currentValue=Value)? ')' )?
	//    ":" label=EString dataType=[ValueType|EString]
	//    ('=' computedExpression=Expression ';')?
	//    ;
	public QLGrammarAccess.QuestionDefinitionElements getQuestionDefinitionAccess() {
		return gaQL.getQuestionDefinitionAccess();
	}
	
	public ParserRule getQuestionDefinitionRule() {
		return getQuestionDefinitionAccess().getRule();
	}
	
	//QualifiedName:
	//    ID ('.' ID)*;
	public QLGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaQL.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
