/**
 * generated by Xtext 2.31.0
 */
package org.gemoc.qls.qLS.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.gemoc.qls.qLS.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class QLSFactoryImpl extends EFactoryImpl implements QLSFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static QLSFactory init()
  {
    try
    {
      QLSFactory theQLSFactory = (QLSFactory)EPackage.Registry.INSTANCE.getEFactory(QLSPackage.eNS_URI);
      if (theQLSFactory != null)
      {
        return theQLSFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new QLSFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QLSFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case QLSPackage.QLS_MODEL: return createQLSModel();
      case QLSPackage.IMPORT: return createImport();
      case QLSPackage.TYPE_STYLE: return createTypeStyle();
      case QLSPackage.NUMERIC_TYPE_STYLE: return createNumericTypeStyle();
      case QLSPackage.QUESTION_STYLE: return createQuestionStyle();
      case QLSPackage.LABEL_STYLE: return createLabelStyle();
      case QLSPackage.BOOLEAN_TYPE_STYLE: return createBooleanTypeStyle();
      case QLSPackage.NUMERIC_TYPE_TEXT_FIELD_STYLE: return createNumericTypeTextFieldStyle();
      case QLSPackage.NUMERIC_TYPE_SPINNER_STYLE: return createNumericTypeSpinnerStyle();
      case QLSPackage.TEXT_TYPE_STYLE: return createTextTypeStyle();
      case QLSPackage.NUMERIC_SPINNER_STYLE: return createNumericSpinnerStyle();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case QLSPackage.BOOLEAN_STYLE_KIND:
        return createBooleanStyleKindFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case QLSPackage.BOOLEAN_STYLE_KIND:
        return convertBooleanStyleKindToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QLSModel createQLSModel()
  {
    QLSModelImpl qlsModel = new QLSModelImpl();
    return qlsModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeStyle createTypeStyle()
  {
    TypeStyleImpl typeStyle = new TypeStyleImpl();
    return typeStyle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericTypeStyle createNumericTypeStyle()
  {
    NumericTypeStyleImpl numericTypeStyle = new NumericTypeStyleImpl();
    return numericTypeStyle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QuestionStyle createQuestionStyle()
  {
    QuestionStyleImpl questionStyle = new QuestionStyleImpl();
    return questionStyle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LabelStyle createLabelStyle()
  {
    LabelStyleImpl labelStyle = new LabelStyleImpl();
    return labelStyle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanTypeStyle createBooleanTypeStyle()
  {
    BooleanTypeStyleImpl booleanTypeStyle = new BooleanTypeStyleImpl();
    return booleanTypeStyle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericTypeTextFieldStyle createNumericTypeTextFieldStyle()
  {
    NumericTypeTextFieldStyleImpl numericTypeTextFieldStyle = new NumericTypeTextFieldStyleImpl();
    return numericTypeTextFieldStyle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericTypeSpinnerStyle createNumericTypeSpinnerStyle()
  {
    NumericTypeSpinnerStyleImpl numericTypeSpinnerStyle = new NumericTypeSpinnerStyleImpl();
    return numericTypeSpinnerStyle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TextTypeStyle createTextTypeStyle()
  {
    TextTypeStyleImpl textTypeStyle = new TextTypeStyleImpl();
    return textTypeStyle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericSpinnerStyle createNumericSpinnerStyle()
  {
    NumericSpinnerStyleImpl numericSpinnerStyle = new NumericSpinnerStyleImpl();
    return numericSpinnerStyle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanStyleKind createBooleanStyleKindFromString(EDataType eDataType, String initialValue)
  {
    BooleanStyleKind result = BooleanStyleKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBooleanStyleKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QLSPackage getQLSPackage()
  {
    return (QLSPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static QLSPackage getPackage()
  {
    return QLSPackage.eINSTANCE;
  }

} //QLSFactoryImpl
