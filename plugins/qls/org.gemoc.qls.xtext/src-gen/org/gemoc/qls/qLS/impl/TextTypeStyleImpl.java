/**
 * generated by Xtext 2.31.0
 */
package org.gemoc.qls.qLS.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.gemoc.qls.qLS.QLSPackage;
import org.gemoc.qls.qLS.TextTypeStyle;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Text Type Style</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.gemoc.qls.qLS.impl.TextTypeStyleImpl#isMultiline <em>Multiline</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TextTypeStyleImpl extends TypeStyleImpl implements TextTypeStyle
{
  /**
   * The default value of the '{@link #isMultiline() <em>Multiline</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMultiline()
   * @generated
   * @ordered
   */
  protected static final boolean MULTILINE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMultiline() <em>Multiline</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMultiline()
   * @generated
   * @ordered
   */
  protected boolean multiline = MULTILINE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TextTypeStyleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QLSPackage.Literals.TEXT_TYPE_STYLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isMultiline()
  {
    return multiline;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMultiline(boolean newMultiline)
  {
    boolean oldMultiline = multiline;
    multiline = newMultiline;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QLSPackage.TEXT_TYPE_STYLE__MULTILINE, oldMultiline, multiline));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QLSPackage.TEXT_TYPE_STYLE__MULTILINE:
        return isMultiline();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QLSPackage.TEXT_TYPE_STYLE__MULTILINE:
        setMultiline((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QLSPackage.TEXT_TYPE_STYLE__MULTILINE:
        setMultiline(MULTILINE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QLSPackage.TEXT_TYPE_STYLE__MULTILINE:
        return multiline != MULTILINE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (multiline: ");
    result.append(multiline);
    result.append(')');
    return result.toString();
  }

} //TextTypeStyleImpl
