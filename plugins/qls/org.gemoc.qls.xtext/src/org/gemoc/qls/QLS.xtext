// automatically generated by Xtext
grammar org.gemoc.qls.QLS with org.eclipse.xtext.common.Terminals

import "http://www.gemoc.org/qls" 
import "http://www.gemoc.org/ql" as ql
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

QLSModel returns QLSModel:
	{QLSModel}
	'QLSModel'
	'{'
		('questionStyles' '{' questionStyles+=QuestionStyle ( "," questionStyles+=QuestionStyle)* '}' )?
	'}';




TypeStyle returns TypeStyle:
	BooleanTypeStyle | NumericTypeStyle_Impl | NumericTextFieldStyle | NumericSpinnerStyle | TextTypeStyle;

ValueType returns ql::ValueType:
	ValueType_Impl | BooleanValueType | IntegerValueType | DecimalValueType | DateValueType | EnumerationValueType | StringValueType;

Expression returns ql::Expression:
	BasicBinaryExpression | ConstantCall | BasicUnaryExpression | QuestionCall | EnumerationCall | IfExpression;

Value returns ql::Value:
	IntegerValue | StringValue | BooleanValue | DateValue | DecimalValue | EnumerationCall;


QuestionStyle returns QuestionStyle:
	'QuestionStyle'
	'{'
		'styledQuestion' styledQuestion=[ql::QuestionDefinition|EString]
		('labelStyle' labelStyle=LabelStyle)?
		('typeStyle' typeStyle=TypeStyle)?
	'}';

QuestionDefinition returns ql::QuestionDefinition:
	(isDisplayed?='isDisplayed')?
	(isMandatory?='isMandatory')?
	'QuestionDefinition'
	name=EString
	'{'
		('label' label=EString)?
		'dataType' dataType=[ql::ValueType|EString]
		('computedExpression' computedExpression=Expression)?
		('currentValue' currentValue=Value)?
	'}';

LabelStyle returns LabelStyle:
	{LabelStyle}
	(italic?='italic')?
	(bold?='bold')?
	'LabelStyle'
	;

EString returns ecore::EString:
	STRING | ID;

ValueType_Impl returns ql::ValueType:
	{ql::ValueType}
	'ValueType'
	name=EString
	'{'
		('unit' unit=EString)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

BooleanValueType returns ql::BooleanValueType:
	{ql::BooleanValueType}
	'BooleanValueType'
	name=EString
	'{'
		('unit' unit=EString)?
	'}';

IntegerValueType returns ql::IntegerValueType:
	{ql::IntegerValueType}
	'IntegerValueType'
	name=EString
	'{'
		('unit' unit=EString)?
		('min' min=EInt)?
		('max' max=EInt)?
	'}';

DecimalValueType returns ql::DecimalValueType:
	{ql::DecimalValueType}
	'DecimalValueType'
	name=EString
	'{'
		('unit' unit=EString)?
	'}';

DateValueType returns ql::DateValueType:
	{ql::DateValueType}
	'DateValueType'
	name=EString
	'{'
		('unit' unit=EString)?
	'}';

EnumerationValueType returns ql::EnumerationValueType:
	{ql::EnumerationValueType}
	'EnumerationValueType'
	name=EString
	'{'
		('unit' unit=EString)?
		('enumerationLiterals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
	'}';

StringValueType returns ql::StringValueType:
	{ql::StringValueType}
	'StringValueType'
	name=EString
	'{'
		('unit' unit=EString)?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

EnumerationLiteral returns ql::EnumerationLiteral:
	{ql::EnumerationLiteral}
	'EnumerationLiteral'
	name=EString;

BasicBinaryExpression returns ql::BasicBinaryExpression:
	'BasicBinaryExpression'
	'{'
		'operator' operator=BinaryOperatorKind
		('resultType' resultType=[ql::ValueType|EString])?
		'lhsOperand' lhsOperand=Expression
		'rhsOperand' rhsOperand=Expression
	'}';

ConstantCall returns ql::ConstantCall:
	{ql::ConstantCall}
	'ConstantCall'
	'{'
		('resultType' resultType=[ql::ValueType|EString])?
		('value' value=Value)?
	'}';

BasicUnaryExpression returns ql::BasicUnaryExpression:
	'BasicUnaryExpression'
	'{'
		('operator' operator=UnaryOperatorKind)?
		('resultType' resultType=[ql::ValueType|EString])?
		'operand' operand=Expression
	'}';

QuestionCall returns ql::QuestionCall:
	'QuestionCall'
	'{'
		('resultType' resultType=[ql::ValueType|EString])?
		'question' question=[ql::QuestionDefinition|EString]
	'}';

EnumerationCall returns ql::EnumerationCall:
	'EnumerationCall'
	'{'
		('resultType' resultType=[ql::ValueType|EString])?
		'enumerationLiteral' enumerationLiteral=[ql::EnumerationLiteral|EString]
	'}';

IfExpression returns ql::IfExpression:
	'IfExpression'
	'{'
		('resultType' resultType=[ql::ValueType|EString])?
		'condition' condition=Expression
		'thenExpression' thenExpression=Expression
		('elseExpression' elseExpression=Expression)?
	'}';

enum BinaryOperatorKind returns ql::BinaryOperatorKind:
				PLUS = 'PLUS' | MINUS = 'MINUS' | MULT = 'MULT' | DIV = 'DIV' | EQUAL = 'EQUAL' | NOTEQUAL = 'NOTEQUAL' | GREATER = 'GREATER' | LOWER = 'LOWER' | GREATEROREQUAL = 'GREATEROREQUAL' | LOWEROREQUAL = 'LOWEROREQUAL' | AND = 'AND' | OR = 'OR';

enum UnaryOperatorKind returns ql::UnaryOperatorKind:
				UNARYMINUS = 'UNARYMINUS' | NOT = 'NOT';

IntegerValue returns ql::IntegerValue:
	{ql::IntegerValue}
	'IntegerValue'
	'{'
		('intValue' intValue=EInt)?
	'}';

StringValue returns ql::StringValue:
	{ql::StringValue}
	'StringValue'
	'{'
		('stringValue' stringValue=EString)?
	'}';

BooleanValue returns ql::BooleanValue:
	{ql::BooleanValue}
	(booleanValue?='booleanValue')?
	'BooleanValue'
	;

DateValue returns ql::DateValue:
	{ql::DateValue}
	'DateValue'
	'{'
		('dateValue' dateValue=EDate)?
	'}';

DecimalValue returns ql::DecimalValue:
	{ql::DecimalValue}
	'DecimalValue'
	'{'
		('decimalValue' decimalValue=EDouble)?
	'}';

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

BooleanTypeStyle returns BooleanTypeStyle:
	'BooleanTypeStyle'
	'{'
		'booleanStyleKind' booleanStyleKind=BooleanStyleKind
	'}';

NumericTypeStyle_Impl returns NumericTypeStyle:
	{NumericTypeStyle}
	'NumericTypeStyle'
	;

NumericTextFieldStyle returns NumericTextFieldStyle:
	useStep?='useStep'
	'NumericTextFieldStyle'
	'{'
		('step' step=EDouble)?
	'}';

NumericSpinnerStyle returns NumericSpinnerStyle:
	{NumericSpinnerStyle}
	'NumericSpinnerStyle'
	;

TextTypeStyle returns TextTypeStyle:
	{TextTypeStyle}
	(multiline?='multiline')?
	'TextTypeStyle'
	;

enum BooleanStyleKind returns BooleanStyleKind:
				CHECKBOX = 'CHECKBOX' | TWO_RADIO = 'TWO_RADIO' | DROPDOWN = 'DROPDOWN';
