/*
 * generated by Xtext 2.27.0
 */
package org.gemoc.ql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class QLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.QLModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQLModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQLModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCanSubmitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cCanSubmitCanSubmitKeyword_2_1_0 = (Keyword)cCanSubmitAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cSubmitDateKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSubmitDateAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSubmitDateEDateParserRuleCall_2_2_1_0 = (RuleCall)cSubmitDateAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDefinitionGroupAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDefinitionGroupDefinitionGroupParserRuleCall_4_0_0 = (RuleCall)cDefinitionGroupAssignment_4_0.eContents().get(0);
		private final Assignment cFormsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cFormsFormParserRuleCall_4_1_0 = (RuleCall)cFormsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//QLModel returns QLModel:
		//    {QLModel}
		//    'QLModel' ('(' (canSubmit?='canSubmit')? ('submitDate' submitDate=EDate)? ')')?
		//    '{'
		//        (definitionGroup+=DefinitionGroup | forms+=Form)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{QLModel}
		//'QLModel' ('(' (canSubmit?='canSubmit')? ('submitDate' submitDate=EDate)? ')')?
		//'{'
		//    (definitionGroup+=DefinitionGroup | forms+=Form)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{QLModel}
		public Action getQLModelAction_0() { return cQLModelAction_0; }
		
		//'QLModel'
		public Keyword getQLModelKeyword_1() { return cQLModelKeyword_1; }
		
		//('(' (canSubmit?='canSubmit')? ('submitDate' submitDate=EDate)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(canSubmit?='canSubmit')?
		public Assignment getCanSubmitAssignment_2_1() { return cCanSubmitAssignment_2_1; }
		
		//'canSubmit'
		public Keyword getCanSubmitCanSubmitKeyword_2_1_0() { return cCanSubmitCanSubmitKeyword_2_1_0; }
		
		//('submitDate' submitDate=EDate)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'submitDate'
		public Keyword getSubmitDateKeyword_2_2_0() { return cSubmitDateKeyword_2_2_0; }
		
		//submitDate=EDate
		public Assignment getSubmitDateAssignment_2_2_1() { return cSubmitDateAssignment_2_2_1; }
		
		//EDate
		public RuleCall getSubmitDateEDateParserRuleCall_2_2_1_0() { return cSubmitDateEDateParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(definitionGroup+=DefinitionGroup | forms+=Form)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//definitionGroup+=DefinitionGroup
		public Assignment getDefinitionGroupAssignment_4_0() { return cDefinitionGroupAssignment_4_0; }
		
		//DefinitionGroup
		public RuleCall getDefinitionGroupDefinitionGroupParserRuleCall_4_0_0() { return cDefinitionGroupDefinitionGroupParserRuleCall_4_0_0; }
		
		//forms+=Form
		public Assignment getFormsAssignment_4_1() { return cFormsAssignment_4_1; }
		
		//Form
		public RuleCall getFormsFormParserRuleCall_4_1_0() { return cFormsFormParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueType_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanValueTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerValueTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDecimalValueTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDateValueTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnumerationValueTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStringValueTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ValueType returns ValueType:
		//    ValueType_Impl | BooleanValueType | IntegerValueType | DecimalValueType | DateValueType | EnumerationValueType | StringValueType;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueType_Impl | BooleanValueType | IntegerValueType | DecimalValueType | DateValueType | EnumerationValueType | StringValueType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueType_Impl
		public RuleCall getValueType_ImplParserRuleCall_0() { return cValueType_ImplParserRuleCall_0; }
		
		//BooleanValueType
		public RuleCall getBooleanValueTypeParserRuleCall_1() { return cBooleanValueTypeParserRuleCall_1; }
		
		//IntegerValueType
		public RuleCall getIntegerValueTypeParserRuleCall_2() { return cIntegerValueTypeParserRuleCall_2; }
		
		//DecimalValueType
		public RuleCall getDecimalValueTypeParserRuleCall_3() { return cDecimalValueTypeParserRuleCall_3; }
		
		//DateValueType
		public RuleCall getDateValueTypeParserRuleCall_4() { return cDateValueTypeParserRuleCall_4; }
		
		//EnumerationValueType
		public RuleCall getEnumerationValueTypeParserRuleCall_5() { return cEnumerationValueTypeParserRuleCall_5; }
		
		//StringValueType
		public RuleCall getStringValueTypeParserRuleCall_6() { return cStringValueTypeParserRuleCall_6; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.Expression");
		private final RuleCall cUnaryOrPrimaryExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression returns Expression:
		//    UnaryOrPrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryOrPrimaryExpression
		public RuleCall getUnaryOrPrimaryExpressionParserRuleCall() { return cUnaryOrPrimaryExpressionParserRuleCall; }
	}
	public class UnaryOrPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.UnaryOrPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//    //BasicBinaryExpression | ConstantCall | BasicUnaryExpression | QuestionCall;
		//UnaryOrPrimaryExpression returns Expression:
		//    PrimaryExpression | UnaryExpression
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression | UnaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_1() { return cUnaryExpressionParserRuleCall_1; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBasicUnaryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorKindEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandUnaryOrPrimaryExpressionParserRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		
		//UnaryExpression returns Expression :
		//    {BasicUnaryExpression}
		//    operator=UnaryOperatorKind operand=UnaryOrPrimaryExpression
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BasicUnaryExpression}
		//operator=UnaryOperatorKind operand=UnaryOrPrimaryExpression
		public Group getGroup() { return cGroup; }
		
		//{BasicUnaryExpression}
		public Action getBasicUnaryExpressionAction_0() { return cBasicUnaryExpressionAction_0; }
		
		//operator=UnaryOperatorKind
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//UnaryOperatorKind
		public RuleCall getOperatorUnaryOperatorKindEnumRuleCall_1_0() { return cOperatorUnaryOperatorKindEnumRuleCall_1_0; }
		
		//operand=UnaryOrPrimaryExpression
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//UnaryOrPrimaryExpression
		public RuleCall getOperandUnaryOrPrimaryExpressionParserRuleCall_2_0() { return cOperandUnaryOrPrimaryExpressionParserRuleCall_2_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cUnaryExpressionParserRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PrimaryExpression returns Expression:
		//    Call  | IfExpression | '(' (OrExpression | UnaryExpression) ')'  ;
		@Override public ParserRule getRule() { return rule; }
		
		//Call  | IfExpression | '(' (OrExpression | UnaryExpression) ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Call
		public RuleCall getCallParserRuleCall_0() { return cCallParserRuleCall_0; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_1() { return cIfExpressionParserRuleCall_1; }
		
		//'(' (OrExpression | UnaryExpression) ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(OrExpression | UnaryExpression)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_2_1_0() { return cOrExpressionParserRuleCall_2_1_0; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_2_1_1() { return cUnaryExpressionParserRuleCall_2_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenExpressionExpressionParserRuleCall_4_0 = (RuleCall)cThenExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseExpressionExpressionParserRuleCall_5_1_0 = (RuleCall)cElseExpressionAssignment_5_1.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfExpression returns IfExpression:
		//    {IfExpression}
		//    'if' condition=Expression
		//    'then' thenExpression=Expression
		//    ('else' elseExpression=Expression )?
		//    'endif'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfExpression}
		//'if' condition=Expression
		//'then' thenExpression=Expression
		//('else' elseExpression=Expression )?
		//'endif'
		public Group getGroup() { return cGroup; }
		
		//{IfExpression}
		public Action getIfExpressionAction_0() { return cIfExpressionAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//thenExpression=Expression
		public Assignment getThenExpressionAssignment_4() { return cThenExpressionAssignment_4; }
		
		//Expression
		public RuleCall getThenExpressionExpressionParserRuleCall_4_0() { return cThenExpressionExpressionParserRuleCall_4_0; }
		
		//('else' elseExpression=Expression )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseExpression=Expression
		public Assignment getElseExpressionAssignment_5_1() { return cElseExpressionAssignment_5_1; }
		
		//Expression
		public RuleCall getElseExpressionExpressionParserRuleCall_5_1_0() { return cElseExpressionExpressionParserRuleCall_5_1_0; }
		
		//'endif'
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBasicBinaryExpressionLhsOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorOrOperatorKindEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRhsOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsOperandAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsOperandAssignment_1_2.eContents().get(0);
		
		//OrExpression returns Expression:
		//    AndExpression (
		//        {BasicBinaryExpression.lhsOperand=current}
		//        operator=OrOperatorKind
		//        rhsOperand=AndExpression
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression (
		//    {BasicBinaryExpression.lhsOperand=current}
		//    operator=OrOperatorKind
		//    rhsOperand=AndExpression
		//)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//(
		//       {BasicBinaryExpression.lhsOperand=current}
		//       operator=OrOperatorKind
		//       rhsOperand=AndExpression
		//   )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BasicBinaryExpression.lhsOperand=current}
		public Action getBasicBinaryExpressionLhsOperandAction_1_0() { return cBasicBinaryExpressionLhsOperandAction_1_0; }
		
		//operator=OrOperatorKind
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//OrOperatorKind
		public RuleCall getOperatorOrOperatorKindEnumRuleCall_1_1_0() { return cOperatorOrOperatorKindEnumRuleCall_1_1_0; }
		
		//rhsOperand=AndExpression
		public Assignment getRhsOperandAssignment_1_2() { return cRhsOperandAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRhsOperandAndExpressionParserRuleCall_1_2_0() { return cRhsOperandAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBasicBinaryExpressionLhsOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAndOperatorKindEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRhsOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsOperandEqualExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsOperandAssignment_1_2.eContents().get(0);
		
		//AndExpression returns Expression:
		//    EqualExpression (
		//        {BasicBinaryExpression.lhsOperand=current}
		//        operator=AndOperatorKind
		//        rhsOperand=EqualExpression
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualExpression (
		//    {BasicBinaryExpression.lhsOperand=current}
		//    operator=AndOperatorKind
		//    rhsOperand=EqualExpression
		//)*
		public Group getGroup() { return cGroup; }
		
		//EqualExpression
		public RuleCall getEqualExpressionParserRuleCall_0() { return cEqualExpressionParserRuleCall_0; }
		
		//(
		//       {BasicBinaryExpression.lhsOperand=current}
		//       operator=AndOperatorKind
		//       rhsOperand=EqualExpression
		//   )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BasicBinaryExpression.lhsOperand=current}
		public Action getBasicBinaryExpressionLhsOperandAction_1_0() { return cBasicBinaryExpressionLhsOperandAction_1_0; }
		
		//operator=AndOperatorKind
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AndOperatorKind
		public RuleCall getOperatorAndOperatorKindEnumRuleCall_1_1_0() { return cOperatorAndOperatorKindEnumRuleCall_1_1_0; }
		
		//rhsOperand=EqualExpression
		public Assignment getRhsOperandAssignment_1_2() { return cRhsOperandAssignment_1_2; }
		
		//EqualExpression
		public RuleCall getRhsOperandEqualExpressionParserRuleCall_1_2_0() { return cRhsOperandEqualExpressionParserRuleCall_1_2_0; }
	}
	public class EqualExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EqualExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBasicBinaryExpressionLhsOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEqualOperatorKindEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRhsOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsOperandComparisionExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsOperandAssignment_1_2.eContents().get(0);
		
		//EqualExpression returns Expression:
		//    ComparisionExpression (
		//        {BasicBinaryExpression.lhsOperand=current}
		//        operator=EqualOperatorKind
		//        rhsOperand=ComparisionExpression
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisionExpression (
		//    {BasicBinaryExpression.lhsOperand=current}
		//    operator=EqualOperatorKind
		//    rhsOperand=ComparisionExpression
		//)*
		public Group getGroup() { return cGroup; }
		
		//ComparisionExpression
		public RuleCall getComparisionExpressionParserRuleCall_0() { return cComparisionExpressionParserRuleCall_0; }
		
		//(
		//       {BasicBinaryExpression.lhsOperand=current}
		//       operator=EqualOperatorKind
		//       rhsOperand=ComparisionExpression
		//   )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BasicBinaryExpression.lhsOperand=current}
		public Action getBasicBinaryExpressionLhsOperandAction_1_0() { return cBasicBinaryExpressionLhsOperandAction_1_0; }
		
		//operator=EqualOperatorKind
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//EqualOperatorKind
		public RuleCall getOperatorEqualOperatorKindEnumRuleCall_1_1_0() { return cOperatorEqualOperatorKindEnumRuleCall_1_1_0; }
		
		//rhsOperand=ComparisionExpression
		public Assignment getRhsOperandAssignment_1_2() { return cRhsOperandAssignment_1_2; }
		
		//ComparisionExpression
		public RuleCall getRhsOperandComparisionExpressionParserRuleCall_1_2_0() { return cRhsOperandComparisionExpressionParserRuleCall_1_2_0; }
	}
	public class ComparisionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.ComparisionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBasicBinaryExpressionLhsOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorComparisionOperatorKindEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRhsOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsOperandAdditionExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsOperandAssignment_1_2.eContents().get(0);
		
		//ComparisionExpression returns Expression:
		//    AdditionExpression (
		//        {BasicBinaryExpression.lhsOperand=current}
		//        operator=ComparisionOperatorKind
		//        rhsOperand=AdditionExpression
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditionExpression (
		//    {BasicBinaryExpression.lhsOperand=current}
		//    operator=ComparisionOperatorKind
		//    rhsOperand=AdditionExpression
		//)*
		public Group getGroup() { return cGroup; }
		
		//AdditionExpression
		public RuleCall getAdditionExpressionParserRuleCall_0() { return cAdditionExpressionParserRuleCall_0; }
		
		//(
		//       {BasicBinaryExpression.lhsOperand=current}
		//       operator=ComparisionOperatorKind
		//       rhsOperand=AdditionExpression
		//   )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BasicBinaryExpression.lhsOperand=current}
		public Action getBasicBinaryExpressionLhsOperandAction_1_0() { return cBasicBinaryExpressionLhsOperandAction_1_0; }
		
		//operator=ComparisionOperatorKind
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ComparisionOperatorKind
		public RuleCall getOperatorComparisionOperatorKindEnumRuleCall_1_1_0() { return cOperatorComparisionOperatorKindEnumRuleCall_1_1_0; }
		
		//rhsOperand=AdditionExpression
		public Assignment getRhsOperandAssignment_1_2() { return cRhsOperandAssignment_1_2; }
		
		//AdditionExpression
		public RuleCall getRhsOperandAdditionExpressionParserRuleCall_1_2_0() { return cRhsOperandAdditionExpressionParserRuleCall_1_2_0; }
	}
	public class AdditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.AdditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBasicBinaryExpressionLhsOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditionOperatorKindEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRhsOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsOperandMultiplicationExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsOperandAssignment_1_2.eContents().get(0);
		
		//AdditionExpression returns Expression:
		//    MultiplicationExpression (
		//        {BasicBinaryExpression.lhsOperand=current}
		//        operator=AdditionOperatorKind
		//        rhsOperand=MultiplicationExpression
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicationExpression (
		//    {BasicBinaryExpression.lhsOperand=current}
		//    operator=AdditionOperatorKind
		//    rhsOperand=MultiplicationExpression
		//)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicationExpression
		public RuleCall getMultiplicationExpressionParserRuleCall_0() { return cMultiplicationExpressionParserRuleCall_0; }
		
		//(
		//       {BasicBinaryExpression.lhsOperand=current}
		//       operator=AdditionOperatorKind
		//       rhsOperand=MultiplicationExpression
		//   )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BasicBinaryExpression.lhsOperand=current}
		public Action getBasicBinaryExpressionLhsOperandAction_1_0() { return cBasicBinaryExpressionLhsOperandAction_1_0; }
		
		//operator=AdditionOperatorKind
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AdditionOperatorKind
		public RuleCall getOperatorAdditionOperatorKindEnumRuleCall_1_1_0() { return cOperatorAdditionOperatorKindEnumRuleCall_1_1_0; }
		
		//rhsOperand=MultiplicationExpression
		public Assignment getRhsOperandAssignment_1_2() { return cRhsOperandAssignment_1_2; }
		
		//MultiplicationExpression
		public RuleCall getRhsOperandMultiplicationExpressionParserRuleCall_1_2_0() { return cRhsOperandMultiplicationExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.MultiplicationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBasicBinaryExpressionLhsOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicationOperatorKindEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRhsOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsOperandUnaryOrPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsOperandAssignment_1_2.eContents().get(0);
		
		//MultiplicationExpression returns Expression:
		//    PrimaryExpression (
		//        {BasicBinaryExpression.lhsOperand=current}
		//        operator=MultiplicationOperatorKind
		//        rhsOperand=UnaryOrPrimaryExpression
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression (
		//    {BasicBinaryExpression.lhsOperand=current}
		//    operator=MultiplicationOperatorKind
		//    rhsOperand=UnaryOrPrimaryExpression
		//)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//(
		//       {BasicBinaryExpression.lhsOperand=current}
		//       operator=MultiplicationOperatorKind
		//       rhsOperand=UnaryOrPrimaryExpression
		//   )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BasicBinaryExpression.lhsOperand=current}
		public Action getBasicBinaryExpressionLhsOperandAction_1_0() { return cBasicBinaryExpressionLhsOperandAction_1_0; }
		
		//operator=MultiplicationOperatorKind
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//MultiplicationOperatorKind
		public RuleCall getOperatorMultiplicationOperatorKindEnumRuleCall_1_1_0() { return cOperatorMultiplicationOperatorKindEnumRuleCall_1_1_0; }
		
		//rhsOperand=UnaryOrPrimaryExpression
		public Assignment getRhsOperandAssignment_1_2() { return cRhsOperandAssignment_1_2; }
		
		//UnaryOrPrimaryExpression
		public RuleCall getRhsOperandUnaryOrPrimaryExpressionParserRuleCall_1_2_0() { return cRhsOperandUnaryOrPrimaryExpressionParserRuleCall_1_2_0; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.Call");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuestionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumerationCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Call returns Call:
		//    ConstantCall | QuestionCall | EnumerationCall;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstantCall | QuestionCall | EnumerationCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstantCall
		public RuleCall getConstantCallParserRuleCall_0() { return cConstantCallParserRuleCall_0; }
		
		//QuestionCall
		public RuleCall getQuestionCallParserRuleCall_1() { return cQuestionCallParserRuleCall_1; }
		
		//EnumerationCall
		public RuleCall getEnumerationCallParserRuleCall_2() { return cEnumerationCallParserRuleCall_2; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDecimalValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Value returns Value:
		//    IntegerValue | StringValue | BooleanValue | DateValue | DecimalValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerValue | StringValue | BooleanValue | DateValue | DecimalValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_0() { return cIntegerValueParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_2() { return cBooleanValueParserRuleCall_2; }
		
		//DateValue
		public RuleCall getDateValueParserRuleCall_3() { return cDateValueParserRuleCall_3; }
		
		//DecimalValue
		public RuleCall getDecimalValueParserRuleCall_4() { return cDecimalValueParserRuleCall_4; }
	}
	public class FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.Form");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cQuestionGroupAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuestionGroupQuestionGroupParserRuleCall_2_0 = (RuleCall)cQuestionGroupAssignment_2.eContents().get(0);
		
		//Form returns Form:
		//    'Form'
		//    name=ID
		//    questionGroup=QuestionGroup
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Form'
		//name=ID
		//questionGroup=QuestionGroup
		public Group getGroup() { return cGroup; }
		
		//'Form'
		public Keyword getFormKeyword_0() { return cFormKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//questionGroup=QuestionGroup
		public Assignment getQuestionGroupAssignment_2() { return cQuestionGroupAssignment_2; }
		
		//QuestionGroup
		public RuleCall getQuestionGroupQuestionGroupParserRuleCall_2_0() { return cQuestionGroupQuestionGroupParserRuleCall_2_0; }
	}
	public class DefinitionGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.DefinitionGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinitionGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefinitionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cQuestionDefinitionsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cQuestionDefinitionsQuestionDefinitionParserRuleCall_3_0_0 = (RuleCall)cQuestionDefinitionsAssignment_3_0.eContents().get(0);
		private final Assignment cDataTypesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDataTypesValueTypeParserRuleCall_3_1_0 = (RuleCall)cDataTypesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DefinitionGroup returns DefinitionGroup:
		//    {DefinitionGroup}
		//    'definitions'
		//    '{'
		//        ( questionDefinitions+=QuestionDefinition | dataTypes+=ValueType )*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinitionGroup}
		//'definitions'
		//'{'
		//    ( questionDefinitions+=QuestionDefinition | dataTypes+=ValueType )*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{DefinitionGroup}
		public Action getDefinitionGroupAction_0() { return cDefinitionGroupAction_0; }
		
		//'definitions'
		public Keyword getDefinitionsKeyword_1() { return cDefinitionsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//( questionDefinitions+=QuestionDefinition | dataTypes+=ValueType )*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//questionDefinitions+=QuestionDefinition
		public Assignment getQuestionDefinitionsAssignment_3_0() { return cQuestionDefinitionsAssignment_3_0; }
		
		//QuestionDefinition
		public RuleCall getQuestionDefinitionsQuestionDefinitionParserRuleCall_3_0_0() { return cQuestionDefinitionsQuestionDefinitionParserRuleCall_3_0_0; }
		
		//dataTypes+=ValueType
		public Assignment getDataTypesAssignment_3_1() { return cDataTypesAssignment_3_1; }
		
		//ValueType
		public RuleCall getDataTypesValueTypeParserRuleCall_3_1_0() { return cDataTypesValueTypeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EDate");
		private final Keyword cEDateKeyword = (Keyword)rule.eContents().get(1);
		
		//EDate returns ecore::EDate:
		//    'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;
		@Override public ParserRule getRule() { return rule; }
		
		//'EDate'
		public Keyword getEDateKeyword() { return cEDateKeyword; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class QuestionGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.QuestionGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuestionGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGuardAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_1_1_0 = (RuleCall)cGuardAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cQuestionGroupsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cQuestionGroupsQuestionGroupParserRuleCall_3_0_0 = (RuleCall)cQuestionGroupsAssignment_3_0.eContents().get(0);
		private final Assignment cQuestionsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cQuestionsQuestionParserRuleCall_3_1_0 = (RuleCall)cQuestionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//QuestionGroup returns QuestionGroup:
		//    {QuestionGroup}
		//    ('if' guard=Expression )?
		//    '{'
		//        ( questionGroups+=QuestionGroup | questions+=Question)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{QuestionGroup}
		//('if' guard=Expression )?
		//'{'
		//    ( questionGroups+=QuestionGroup | questions+=Question)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{QuestionGroup}
		public Action getQuestionGroupAction_0() { return cQuestionGroupAction_0; }
		
		//('if' guard=Expression )?
		public Group getGroup_1() { return cGroup_1; }
		
		//'if'
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }
		
		//guard=Expression
		public Assignment getGuardAssignment_1_1() { return cGuardAssignment_1_1; }
		
		//Expression
		public RuleCall getGuardExpressionParserRuleCall_1_1_0() { return cGuardExpressionParserRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//( questionGroups+=QuestionGroup | questions+=Question)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//questionGroups+=QuestionGroup
		public Assignment getQuestionGroupsAssignment_3_0() { return cQuestionGroupsAssignment_3_0; }
		
		//QuestionGroup
		public RuleCall getQuestionGroupsQuestionGroupParserRuleCall_3_0_0() { return cQuestionGroupsQuestionGroupParserRuleCall_3_0_0; }
		
		//questions+=Question
		public Assignment getQuestionsAssignment_3_1() { return cQuestionsAssignment_3_1; }
		
		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_3_1_0() { return cQuestionsQuestionParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.Question");
		private final Assignment cQuestionDefinitionAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cQuestionDefinitionQuestionDefinitionCrossReference_0 = (CrossReference)cQuestionDefinitionAssignment.eContents().get(0);
		private final RuleCall cQuestionDefinitionQuestionDefinitionQualifiedNameParserRuleCall_0_1 = (RuleCall)cQuestionDefinitionQuestionDefinitionCrossReference_0.eContents().get(1);
		
		//Question returns Question:
		//    questionDefinition=[QuestionDefinition|QualifiedName]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//questionDefinition=[QuestionDefinition|QualifiedName]
		public Assignment getQuestionDefinitionAssignment() { return cQuestionDefinitionAssignment; }
		
		//[QuestionDefinition|QualifiedName]
		public CrossReference getQuestionDefinitionQuestionDefinitionCrossReference_0() { return cQuestionDefinitionQuestionDefinitionCrossReference_0; }
		
		//QualifiedName
		public RuleCall getQuestionDefinitionQuestionDefinitionQualifiedNameParserRuleCall_0_1() { return cQuestionDefinitionQuestionDefinitionQualifiedNameParserRuleCall_0_1; }
	}
	public class ValueType_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.ValueType_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValueTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUnitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUnitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_4_1_0 = (RuleCall)cUnitAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ValueType_Impl returns ValueType:
		//    {ValueType}
		//    'ValueType'
		//    name=ID
		//    '{'
		//        ('unit' unit=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ValueType}
		//'ValueType'
		//name=ID
		//'{'
		//    ('unit' unit=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ValueType}
		public Action getValueTypeAction_0() { return cValueTypeAction_0; }
		
		//'ValueType'
		public Keyword getValueTypeKeyword_1() { return cValueTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('unit' unit=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'unit'
		public Keyword getUnitKeyword_4_0() { return cUnitKeyword_4_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_4_1() { return cUnitAssignment_4_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_4_1_0() { return cUnitEStringParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BasicBinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.BasicBinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBasicBinaryExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOperatorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorBinaryOperatorKindEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cResultTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cResultTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cResultTypeValueTypeCrossReference_4_1_0 = (CrossReference)cResultTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cResultTypeValueTypeEStringParserRuleCall_4_1_0_1 = (RuleCall)cResultTypeValueTypeCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLhsOperandKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLhsOperandAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLhsOperandExpressionParserRuleCall_6_0 = (RuleCall)cLhsOperandAssignment_6.eContents().get(0);
		private final Keyword cRhsOperandKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cRhsOperandAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRhsOperandExpressionParserRuleCall_8_0 = (RuleCall)cRhsOperandAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BasicBinaryExpression returns BasicBinaryExpression:
		//    'BasicBinaryExpression'
		//    '{'
		//        'operator' operator=BinaryOperatorKind
		//        ('resultType' resultType=[ValueType|EString])?
		//        'lhsOperand' lhsOperand=Expression
		//        'rhsOperand' rhsOperand=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BasicBinaryExpression'
		//'{'
		//    'operator' operator=BinaryOperatorKind
		//    ('resultType' resultType=[ValueType|EString])?
		//    'lhsOperand' lhsOperand=Expression
		//    'rhsOperand' rhsOperand=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'BasicBinaryExpression'
		public Keyword getBasicBinaryExpressionKeyword_0() { return cBasicBinaryExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'operator'
		public Keyword getOperatorKeyword_2() { return cOperatorKeyword_2; }
		
		//operator=BinaryOperatorKind
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//BinaryOperatorKind
		public RuleCall getOperatorBinaryOperatorKindEnumRuleCall_3_0() { return cOperatorBinaryOperatorKindEnumRuleCall_3_0; }
		
		//('resultType' resultType=[ValueType|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'resultType'
		public Keyword getResultTypeKeyword_4_0() { return cResultTypeKeyword_4_0; }
		
		//resultType=[ValueType|EString]
		public Assignment getResultTypeAssignment_4_1() { return cResultTypeAssignment_4_1; }
		
		//[ValueType|EString]
		public CrossReference getResultTypeValueTypeCrossReference_4_1_0() { return cResultTypeValueTypeCrossReference_4_1_0; }
		
		//EString
		public RuleCall getResultTypeValueTypeEStringParserRuleCall_4_1_0_1() { return cResultTypeValueTypeEStringParserRuleCall_4_1_0_1; }
		
		//'lhsOperand'
		public Keyword getLhsOperandKeyword_5() { return cLhsOperandKeyword_5; }
		
		//lhsOperand=Expression
		public Assignment getLhsOperandAssignment_6() { return cLhsOperandAssignment_6; }
		
		//Expression
		public RuleCall getLhsOperandExpressionParserRuleCall_6_0() { return cLhsOperandExpressionParserRuleCall_6_0; }
		
		//'rhsOperand'
		public Keyword getRhsOperandKeyword_7() { return cRhsOperandKeyword_7; }
		
		//rhsOperand=Expression
		public Assignment getRhsOperandAssignment_8() { return cRhsOperandAssignment_8; }
		
		//Expression
		public RuleCall getRhsOperandExpressionParserRuleCall_8_0() { return cRhsOperandExpressionParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ConstantCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.ConstantCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueStringValueParserRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueIntegerValueParserRuleCall_1_0_1 = (RuleCall)cValueAlternatives_1_0.eContents().get(1);
		private final RuleCall cValueBooleanValueParserRuleCall_1_0_2 = (RuleCall)cValueAlternatives_1_0.eContents().get(2);
		private final RuleCall cValueDecimalValueParserRuleCall_1_0_3 = (RuleCall)cValueAlternatives_1_0.eContents().get(3);
		
		//ConstantCall returns ConstantCall:
		//    {ConstantCall}
		//    value=(StringValue | IntegerValue | BooleanValue | DecimalValue )
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstantCall}
		//value=(StringValue | IntegerValue | BooleanValue | DecimalValue )
		public Group getGroup() { return cGroup; }
		
		//{ConstantCall}
		public Action getConstantCallAction_0() { return cConstantCallAction_0; }
		
		//value=(StringValue | IntegerValue | BooleanValue | DecimalValue )
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//(StringValue | IntegerValue | BooleanValue | DecimalValue )
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }
		
		//StringValue
		public RuleCall getValueStringValueParserRuleCall_1_0_0() { return cValueStringValueParserRuleCall_1_0_0; }
		
		//IntegerValue
		public RuleCall getValueIntegerValueParserRuleCall_1_0_1() { return cValueIntegerValueParserRuleCall_1_0_1; }
		
		//BooleanValue
		public RuleCall getValueBooleanValueParserRuleCall_1_0_2() { return cValueBooleanValueParserRuleCall_1_0_2; }
		
		//DecimalValue
		public RuleCall getValueDecimalValueParserRuleCall_1_0_3() { return cValueDecimalValueParserRuleCall_1_0_3; }
	}
	public class BasicUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.BasicUnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBasicUnaryExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOperatorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOperatorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorKindEnumRuleCall_2_1_0 = (RuleCall)cOperatorAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cResultTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cResultTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cResultTypeValueTypeCrossReference_3_1_0 = (CrossReference)cResultTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cResultTypeValueTypeQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cResultTypeValueTypeCrossReference_3_1_0.eContents().get(1);
		private final Keyword cOperandKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperandAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperandExpressionParserRuleCall_5_0 = (RuleCall)cOperandAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BasicUnaryExpression returns BasicUnaryExpression:
		//    'BasicUnaryExpression'
		//    '{'
		//        ('operator' operator=UnaryOperatorKind)?
		//        ('resultType' resultType=[ValueType|QualifiedName])?
		//        'operand' operand=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BasicUnaryExpression'
		//'{'
		//    ('operator' operator=UnaryOperatorKind)?
		//    ('resultType' resultType=[ValueType|QualifiedName])?
		//    'operand' operand=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'BasicUnaryExpression'
		public Keyword getBasicUnaryExpressionKeyword_0() { return cBasicUnaryExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('operator' operator=UnaryOperatorKind)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'operator'
		public Keyword getOperatorKeyword_2_0() { return cOperatorKeyword_2_0; }
		
		//operator=UnaryOperatorKind
		public Assignment getOperatorAssignment_2_1() { return cOperatorAssignment_2_1; }
		
		//UnaryOperatorKind
		public RuleCall getOperatorUnaryOperatorKindEnumRuleCall_2_1_0() { return cOperatorUnaryOperatorKindEnumRuleCall_2_1_0; }
		
		//('resultType' resultType=[ValueType|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'resultType'
		public Keyword getResultTypeKeyword_3_0() { return cResultTypeKeyword_3_0; }
		
		//resultType=[ValueType|QualifiedName]
		public Assignment getResultTypeAssignment_3_1() { return cResultTypeAssignment_3_1; }
		
		//[ValueType|QualifiedName]
		public CrossReference getResultTypeValueTypeCrossReference_3_1_0() { return cResultTypeValueTypeCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getResultTypeValueTypeQualifiedNameParserRuleCall_3_1_0_1() { return cResultTypeValueTypeQualifiedNameParserRuleCall_3_1_0_1; }
		
		//'operand'
		public Keyword getOperandKeyword_4() { return cOperandKeyword_4; }
		
		//operand=Expression
		public Assignment getOperandAssignment_5() { return cOperandAssignment_5; }
		
		//Expression
		public RuleCall getOperandExpressionParserRuleCall_5_0() { return cOperandExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class QuestionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.QuestionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuestionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cQuestionQuestionDefinitionCrossReference_1_0 = (CrossReference)cQuestionAssignment_1.eContents().get(0);
		private final RuleCall cQuestionQuestionDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cQuestionQuestionDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//QuestionCall returns QuestionCall:
		//    {QuestionCall}
		//    question=[QuestionDefinition|QualifiedName] '(' ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{QuestionCall}
		//question=[QuestionDefinition|QualifiedName] '(' ')'
		public Group getGroup() { return cGroup; }
		
		//{QuestionCall}
		public Action getQuestionCallAction_0() { return cQuestionCallAction_0; }
		
		//question=[QuestionDefinition|QualifiedName]
		public Assignment getQuestionAssignment_1() { return cQuestionAssignment_1; }
		
		//[QuestionDefinition|QualifiedName]
		public CrossReference getQuestionQuestionDefinitionCrossReference_1_0() { return cQuestionQuestionDefinitionCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getQuestionQuestionDefinitionQualifiedNameParserRuleCall_1_0_1() { return cQuestionQuestionDefinitionQualifiedNameParserRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BooleanValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.BooleanValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cUnitKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cUnitAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_3_1_1_0 = (RuleCall)cUnitAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//BooleanValueType returns BooleanValueType:
		//    {BooleanValueType}
		//    'booleanType'
		//    name=ID
		//    ('{'
		//        ('unit' unit=EString)?
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanValueType}
		//'booleanType'
		//name=ID
		//('{'
		//    ('unit' unit=EString)?
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//{BooleanValueType}
		public Action getBooleanValueTypeAction_0() { return cBooleanValueTypeAction_0; }
		
		//'booleanType'
		public Keyword getBooleanTypeKeyword_1() { return cBooleanTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{'
		//    ('unit' unit=EString)?
		//'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'unit'
		public Keyword getUnitKeyword_3_1_0() { return cUnitKeyword_3_1_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_3_1_1() { return cUnitAssignment_3_1_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_3_1_1_0() { return cUnitEStringParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class IntegerValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.IntegerValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cUnitKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cUnitAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_3_1_1_0 = (RuleCall)cUnitAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cMinKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cMinAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_3_2_1_0 = (RuleCall)cMinAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cMaxKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cMaxAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_3_3_1_0 = (RuleCall)cMaxAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//IntegerValueType returns IntegerValueType:
		//    {IntegerValueType}
		//    'integerType'
		//    name=ID
		//    ('{'
		//        ('unit' unit=EString)?
		//        ('min' min=EInt)?
		//        ('max' max=EInt)?
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerValueType}
		//'integerType'
		//name=ID
		//('{'
		//    ('unit' unit=EString)?
		//    ('min' min=EInt)?
		//    ('max' max=EInt)?
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//{IntegerValueType}
		public Action getIntegerValueTypeAction_0() { return cIntegerValueTypeAction_0; }
		
		//'integerType'
		public Keyword getIntegerTypeKeyword_1() { return cIntegerTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{'
		//    ('unit' unit=EString)?
		//    ('min' min=EInt)?
		//    ('max' max=EInt)?
		//'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'unit'
		public Keyword getUnitKeyword_3_1_0() { return cUnitKeyword_3_1_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_3_1_1() { return cUnitAssignment_3_1_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_3_1_1_0() { return cUnitEStringParserRuleCall_3_1_1_0; }
		
		//('min' min=EInt)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'min'
		public Keyword getMinKeyword_3_2_0() { return cMinKeyword_3_2_0; }
		
		//min=EInt
		public Assignment getMinAssignment_3_2_1() { return cMinAssignment_3_2_1; }
		
		//EInt
		public RuleCall getMinEIntParserRuleCall_3_2_1_0() { return cMinEIntParserRuleCall_3_2_1_0; }
		
		//('max' max=EInt)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'max'
		public Keyword getMaxKeyword_3_3_0() { return cMaxKeyword_3_3_0; }
		
		//max=EInt
		public Assignment getMaxAssignment_3_3_1() { return cMaxAssignment_3_3_1; }
		
		//EInt
		public RuleCall getMaxEIntParserRuleCall_3_3_1_0() { return cMaxEIntParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
	}
	public class DecimalValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.DecimalValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecimalValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecimalTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cUnitKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cUnitAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_3_1_1_0 = (RuleCall)cUnitAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//DecimalValueType returns DecimalValueType:
		//    {DecimalValueType}
		//    'decimalType'
		//    name=ID
		//    ('{'
		//        ('unit' unit=EString)?
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DecimalValueType}
		//'decimalType'
		//name=ID
		//('{'
		//    ('unit' unit=EString)?
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//{DecimalValueType}
		public Action getDecimalValueTypeAction_0() { return cDecimalValueTypeAction_0; }
		
		//'decimalType'
		public Keyword getDecimalTypeKeyword_1() { return cDecimalTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{'
		//    ('unit' unit=EString)?
		//'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'unit'
		public Keyword getUnitKeyword_3_1_0() { return cUnitKeyword_3_1_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_3_1_1() { return cUnitAssignment_3_1_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_3_1_1_0() { return cUnitEStringParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class DateValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.DateValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDateValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDateTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cUnitKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cUnitAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_3_1_1_0 = (RuleCall)cUnitAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//DateValueType returns DateValueType:
		//    {DateValueType}
		//    'dateType'
		//    name=ID
		//    ('{'
		//        ('unit' unit=EString)?
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DateValueType}
		//'dateType'
		//name=ID
		//('{'
		//    ('unit' unit=EString)?
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//{DateValueType}
		public Action getDateValueTypeAction_0() { return cDateValueTypeAction_0; }
		
		//'dateType'
		public Keyword getDateTypeKeyword_1() { return cDateTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{'
		//    ('unit' unit=EString)?
		//'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'unit'
		public Keyword getUnitKeyword_3_1_0() { return cUnitKeyword_3_1_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_3_1_1() { return cUnitAssignment_3_1_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_3_1_1_0() { return cUnitEStringParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class EnumerationValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EnumerationValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumerationTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cUnitKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cUnitAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_3_1_1_0 = (RuleCall)cUnitAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cLiteralsKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cEnumerationLiteralsAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cEnumerationLiteralsEnumerationLiteralParserRuleCall_3_2_2_0 = (RuleCall)cEnumerationLiteralsAssignment_3_2_2.eContents().get(0);
		private final Group cGroup_3_2_3 = (Group)cGroup_3_2.eContents().get(3);
		private final Keyword cCommaKeyword_3_2_3_0 = (Keyword)cGroup_3_2_3.eContents().get(0);
		private final Assignment cEnumerationLiteralsAssignment_3_2_3_1 = (Assignment)cGroup_3_2_3.eContents().get(1);
		private final RuleCall cEnumerationLiteralsEnumerationLiteralParserRuleCall_3_2_3_1_0 = (RuleCall)cEnumerationLiteralsAssignment_3_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2_4 = (Keyword)cGroup_3_2.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//EnumerationValueType returns EnumerationValueType:
		//    {EnumerationValueType}
		//    'enumerationType'
		//    name=ID
		//    ('{'
		//        ('unit' unit=EString)?
		//        ('literals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumerationValueType}
		//'enumerationType'
		//name=ID
		//('{'
		//    ('unit' unit=EString)?
		//    ('literals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//{EnumerationValueType}
		public Action getEnumerationValueTypeAction_0() { return cEnumerationValueTypeAction_0; }
		
		//'enumerationType'
		public Keyword getEnumerationTypeKeyword_1() { return cEnumerationTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{'
		//    ('unit' unit=EString)?
		//    ('literals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
		//'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'unit'
		public Keyword getUnitKeyword_3_1_0() { return cUnitKeyword_3_1_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_3_1_1() { return cUnitAssignment_3_1_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_3_1_1_0() { return cUnitEStringParserRuleCall_3_1_1_0; }
		
		//('literals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'literals'
		public Keyword getLiteralsKeyword_3_2_0() { return cLiteralsKeyword_3_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_2_1() { return cLeftCurlyBracketKeyword_3_2_1; }
		
		//enumerationLiterals+=EnumerationLiteral
		public Assignment getEnumerationLiteralsAssignment_3_2_2() { return cEnumerationLiteralsAssignment_3_2_2; }
		
		//EnumerationLiteral
		public RuleCall getEnumerationLiteralsEnumerationLiteralParserRuleCall_3_2_2_0() { return cEnumerationLiteralsEnumerationLiteralParserRuleCall_3_2_2_0; }
		
		//( "," enumerationLiterals+=EnumerationLiteral)*
		public Group getGroup_3_2_3() { return cGroup_3_2_3; }
		
		//","
		public Keyword getCommaKeyword_3_2_3_0() { return cCommaKeyword_3_2_3_0; }
		
		//enumerationLiterals+=EnumerationLiteral
		public Assignment getEnumerationLiteralsAssignment_3_2_3_1() { return cEnumerationLiteralsAssignment_3_2_3_1; }
		
		//EnumerationLiteral
		public RuleCall getEnumerationLiteralsEnumerationLiteralParserRuleCall_3_2_3_1_0() { return cEnumerationLiteralsEnumerationLiteralParserRuleCall_3_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2_4() { return cRightCurlyBracketKeyword_3_2_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class StringValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.StringValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cUnitKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cUnitAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_3_1_1_0 = (RuleCall)cUnitAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//StringValueType returns StringValueType:
		//    {StringValueType}
		//    'StringType'
		//    name=ID
		//    ('{'
		//        ('unit' unit=EString)?
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringValueType}
		//'StringType'
		//name=ID
		//('{'
		//    ('unit' unit=EString)?
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//{StringValueType}
		public Action getStringValueTypeAction_0() { return cStringValueTypeAction_0; }
		
		//'StringType'
		public Keyword getStringTypeKeyword_1() { return cStringTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{'
		//    ('unit' unit=EString)?
		//'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//('unit' unit=EString)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'unit'
		public Keyword getUnitKeyword_3_1_0() { return cUnitKeyword_3_1_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_3_1_1() { return cUnitAssignment_3_1_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_3_1_1_0() { return cUnitEStringParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class EnumerationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EnumerationLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumerationLiteral returns EnumerationLiteral:
		//    {EnumerationLiteral}
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumerationLiteral}
		//name=ID
		public Group getGroup() { return cGroup; }
		
		//{EnumerationLiteral}
		public Action getEnumerationLiteralAction_0() { return cEnumerationLiteralAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.IntegerValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIntValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntValueEIntParserRuleCall_1_0 = (RuleCall)cIntValueAssignment_1.eContents().get(0);
		
		//IntegerValue returns IntegerValue:
		//    {IntegerValue}
		//    intValue=EInt
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerValue}
		//intValue=EInt
		public Group getGroup() { return cGroup; }
		
		//{IntegerValue}
		public Action getIntegerValueAction_0() { return cIntegerValueAction_0; }
		
		//intValue=EInt
		public Assignment getIntValueAssignment_1() { return cIntValueAssignment_1; }
		
		//EInt
		public RuleCall getIntValueEIntParserRuleCall_1_0() { return cIntValueEIntParserRuleCall_1_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.StringValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStringValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringValueAssignment_1.eContents().get(0);
		
		//StringValue returns StringValue:
		//    {StringValue}
		//    stringValue=STRING
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringValue}
		//stringValue=STRING
		public Group getGroup() { return cGroup; }
		
		//{StringValue}
		public Action getStringValueAction_0() { return cStringValueAction_0; }
		
		//stringValue=STRING
		public Assignment getStringValueAssignment_1() { return cStringValueAssignment_1; }
		
		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_1_0() { return cStringValueSTRINGTerminalRuleCall_1_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.BooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBooleanValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBooleanValueEBooleanParserRuleCall_1_0 = (RuleCall)cBooleanValueAssignment_1.eContents().get(0);
		
		//BooleanValue returns BooleanValue:
		//    {BooleanValue}
		//    booleanValue=EBoolean
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanValue}
		//booleanValue=EBoolean
		public Group getGroup() { return cGroup; }
		
		//{BooleanValue}
		public Action getBooleanValueAction_0() { return cBooleanValueAction_0; }
		
		//booleanValue=EBoolean
		public Assignment getBooleanValueAssignment_1() { return cBooleanValueAssignment_1; }
		
		//EBoolean
		public RuleCall getBooleanValueEBooleanParserRuleCall_1_0() { return cBooleanValueEBooleanParserRuleCall_1_0; }
	}
	public class EnumerationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EnumerationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEnumerationLiteralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEnumerationLiteralEnumerationLiteralCrossReference_1_0 = (CrossReference)cEnumerationLiteralAssignment_1.eContents().get(0);
		private final RuleCall cEnumerationLiteralEnumerationLiteralQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cEnumerationLiteralEnumerationLiteralCrossReference_1_0.eContents().get(1);
		
		//EnumerationCall returns EnumerationCall:
		//    {EnumerationCall}
		//    enumerationLiteral=[EnumerationLiteral|QualifiedName]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumerationCall}
		//enumerationLiteral=[EnumerationLiteral|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//{EnumerationCall}
		public Action getEnumerationCallAction_0() { return cEnumerationCallAction_0; }
		
		//enumerationLiteral=[EnumerationLiteral|QualifiedName]
		public Assignment getEnumerationLiteralAssignment_1() { return cEnumerationLiteralAssignment_1; }
		
		//[EnumerationLiteral|QualifiedName]
		public CrossReference getEnumerationLiteralEnumerationLiteralCrossReference_1_0() { return cEnumerationLiteralEnumerationLiteralCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getEnumerationLiteralEnumerationLiteralQualifiedNameParserRuleCall_1_0_1() { return cEnumerationLiteralEnumerationLiteralQualifiedNameParserRuleCall_1_0_1; }
	}
	public class DateValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.DateValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDateValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDateValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDateValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDateValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDateValueEDateParserRuleCall_3_1_0 = (RuleCall)cDateValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DateValue returns DateValue:
		//    {DateValue}
		//    'DateValue'
		//    '{'
		//        ('dateValue' dateValue=EDate)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DateValue}
		//'DateValue'
		//'{'
		//    ('dateValue' dateValue=EDate)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{DateValue}
		public Action getDateValueAction_0() { return cDateValueAction_0; }
		
		//'DateValue'
		public Keyword getDateValueKeyword_1() { return cDateValueKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('dateValue' dateValue=EDate)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'dateValue'
		public Keyword getDateValueKeyword_3_0() { return cDateValueKeyword_3_0; }
		
		//dateValue=EDate
		public Assignment getDateValueAssignment_3_1() { return cDateValueAssignment_3_1; }
		
		//EDate
		public RuleCall getDateValueEDateParserRuleCall_3_1_0() { return cDateValueEDateParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DecimalValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.DecimalValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecimalValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDecimalValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDecimalValueEFloatParserRuleCall_1_0 = (RuleCall)cDecimalValueAssignment_1.eContents().get(0);
		
		//DecimalValue returns DecimalValue:
		//    {DecimalValue}
		//    decimalValue=EFloat
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{DecimalValue}
		//decimalValue=EFloat
		public Group getGroup() { return cGroup; }
		
		//{DecimalValue}
		public Action getDecimalValueAction_0() { return cDecimalValueAction_0; }
		
		//decimalValue=EFloat
		public Assignment getDecimalValueAssignment_1() { return cDecimalValueAssignment_1; }
		
		//EFloat
		public RuleCall getDecimalValueEFloatParserRuleCall_1_0() { return cDecimalValueEFloatParserRuleCall_1_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    //'-'? INT;
		//    INT;
		@Override public ParserRule getRule() { return rule; }
		
		////'-'? INT;
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    //'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		//    INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		////'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		//INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		////'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//('E'|'e')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'E'
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }
		
		//'e'
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_3_1() { return cHyphenMinusKeyword_3_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_2() { return cINTTerminalRuleCall_3_2; }
	}
	public class QuestionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.QuestionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsMandatoryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsMandatoryMandatoryKeyword_0_0 = (Keyword)cIsMandatoryAssignment_0.eContents().get(0);
		private final Keyword cQuestionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIsDisplayedAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cIsDisplayedIsDisplayedKeyword_3_1_0 = (Keyword)cIsDisplayedAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCurrentValueKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cCurrentValueAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cCurrentValueValueParserRuleCall_3_2_1_0 = (RuleCall)cCurrentValueAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelEStringParserRuleCall_5_0 = (RuleCall)cLabelAssignment_5.eContents().get(0);
		private final Assignment cDataTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cDataTypeValueTypeCrossReference_6_0 = (CrossReference)cDataTypeAssignment_6.eContents().get(0);
		private final RuleCall cDataTypeValueTypeEStringParserRuleCall_6_0_1 = (RuleCall)cDataTypeValueTypeCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cComputedExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cComputedExpressionExpressionParserRuleCall_7_1_0 = (RuleCall)cComputedExpressionAssignment_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//QuestionDefinition returns QuestionDefinition:
		//    (isMandatory?='mandatory')?
		//    'question'
		//    name=EString
		//    ( '('    (isDisplayed?='isDisplayed')?
		//        ('currentValue' currentValue=Value)? ')' )?
		//    ":" label=EString dataType=[ValueType|EString]
		//    ('=' computedExpression=Expression ';')?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(isMandatory?='mandatory')?
		//'question'
		//name=EString
		//( '('    (isDisplayed?='isDisplayed')?
		//    ('currentValue' currentValue=Value)? ')' )?
		//":" label=EString dataType=[ValueType|EString]
		//('=' computedExpression=Expression ';')?
		public Group getGroup() { return cGroup; }
		
		//(isMandatory?='mandatory')?
		public Assignment getIsMandatoryAssignment_0() { return cIsMandatoryAssignment_0; }
		
		//'mandatory'
		public Keyword getIsMandatoryMandatoryKeyword_0_0() { return cIsMandatoryMandatoryKeyword_0_0; }
		
		//'question'
		public Keyword getQuestionKeyword_1() { return cQuestionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//( '('    (isDisplayed?='isDisplayed')?
		//    ('currentValue' currentValue=Value)? ')' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//(isDisplayed?='isDisplayed')?
		public Assignment getIsDisplayedAssignment_3_1() { return cIsDisplayedAssignment_3_1; }
		
		//'isDisplayed'
		public Keyword getIsDisplayedIsDisplayedKeyword_3_1_0() { return cIsDisplayedIsDisplayedKeyword_3_1_0; }
		
		//('currentValue' currentValue=Value)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'currentValue'
		public Keyword getCurrentValueKeyword_3_2_0() { return cCurrentValueKeyword_3_2_0; }
		
		//currentValue=Value
		public Assignment getCurrentValueAssignment_3_2_1() { return cCurrentValueAssignment_3_2_1; }
		
		//Value
		public RuleCall getCurrentValueValueParserRuleCall_3_2_1_0() { return cCurrentValueValueParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//label=EString
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }
		
		//EString
		public RuleCall getLabelEStringParserRuleCall_5_0() { return cLabelEStringParserRuleCall_5_0; }
		
		//dataType=[ValueType|EString]
		public Assignment getDataTypeAssignment_6() { return cDataTypeAssignment_6; }
		
		//[ValueType|EString]
		public CrossReference getDataTypeValueTypeCrossReference_6_0() { return cDataTypeValueTypeCrossReference_6_0; }
		
		//EString
		public RuleCall getDataTypeValueTypeEStringParserRuleCall_6_0_1() { return cDataTypeValueTypeEStringParserRuleCall_6_0_1; }
		
		//('=' computedExpression=Expression ';')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_7_0() { return cEqualsSignKeyword_7_0; }
		
		//computedExpression=Expression
		public Assignment getComputedExpressionAssignment_7_1() { return cComputedExpressionAssignment_7_1; }
		
		//Expression
		public RuleCall getComputedExpressionExpressionParserRuleCall_7_1_0() { return cComputedExpressionExpressionParserRuleCall_7_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7_2() { return cSemicolonKeyword_7_2; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class BinaryOperatorKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.BinaryOperatorKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPLUSKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSMINUSKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTMULTKeyword_2_0 = (Keyword)cMULTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVDIVKeyword_3_0 = (Keyword)cDIVEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEQUALEQUALKeyword_4_0 = (Keyword)cEQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEQUALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNOTEQUALNOTEQUALKeyword_5_0 = (Keyword)cNOTEQUALEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGREATERGREATERKeyword_6_0 = (Keyword)cGREATEREnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEREnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cLOWERLOWERKeyword_7_0 = (Keyword)cLOWEREnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEROREQUALEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cGREATEROREQUALGREATEROREQUALKeyword_8_0 = (Keyword)cGREATEROREQUALEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEROREQUALEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cLOWEROREQUALLOWEROREQUALKeyword_9_0 = (Keyword)cLOWEROREQUALEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cANDANDKeyword_10_0 = (Keyword)cANDEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cORORKeyword_11_0 = (Keyword)cOREnumLiteralDeclaration_11.eContents().get(0);
		
		//enum BinaryOperatorKind returns BinaryOperatorKind:
		//                PLUS = 'PLUS' | MINUS = 'MINUS' | MULT = 'MULT' | DIV = 'DIV' | EQUAL = 'EQUAL' | NOTEQUAL = 'NOTEQUAL' | GREATER = 'GREATER' | LOWER = 'LOWER' | GREATEROREQUAL = 'GREATEROREQUAL' | LOWEROREQUAL = 'LOWEROREQUAL' | AND = 'AND' | OR = 'OR';
		public EnumRule getRule() { return rule; }
		
		//PLUS = 'PLUS' | MINUS = 'MINUS' | MULT = 'MULT' | DIV = 'DIV' | EQUAL = 'EQUAL' | NOTEQUAL = 'NOTEQUAL' | GREATER = 'GREATER' | LOWER = 'LOWER' | GREATEROREQUAL = 'GREATEROREQUAL' | LOWEROREQUAL = 'LOWEROREQUAL' | AND = 'AND' | OR = 'OR'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS = 'PLUS'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//'PLUS'
		public Keyword getPLUSPLUSKeyword_0_0() { return cPLUSPLUSKeyword_0_0; }
		
		//MINUS = 'MINUS'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//'MINUS'
		public Keyword getMINUSMINUSKeyword_1_0() { return cMINUSMINUSKeyword_1_0; }
		
		//MULT = 'MULT'
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_2() { return cMULTEnumLiteralDeclaration_2; }
		
		//'MULT'
		public Keyword getMULTMULTKeyword_2_0() { return cMULTMULTKeyword_2_0; }
		
		//DIV = 'DIV'
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_3() { return cDIVEnumLiteralDeclaration_3; }
		
		//'DIV'
		public Keyword getDIVDIVKeyword_3_0() { return cDIVDIVKeyword_3_0; }
		
		//EQUAL = 'EQUAL'
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_4() { return cEQUALEnumLiteralDeclaration_4; }
		
		//'EQUAL'
		public Keyword getEQUALEQUALKeyword_4_0() { return cEQUALEQUALKeyword_4_0; }
		
		//NOTEQUAL = 'NOTEQUAL'
		public EnumLiteralDeclaration getNOTEQUALEnumLiteralDeclaration_5() { return cNOTEQUALEnumLiteralDeclaration_5; }
		
		//'NOTEQUAL'
		public Keyword getNOTEQUALNOTEQUALKeyword_5_0() { return cNOTEQUALNOTEQUALKeyword_5_0; }
		
		//GREATER = 'GREATER'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_6() { return cGREATEREnumLiteralDeclaration_6; }
		
		//'GREATER'
		public Keyword getGREATERGREATERKeyword_6_0() { return cGREATERGREATERKeyword_6_0; }
		
		//LOWER = 'LOWER'
		public EnumLiteralDeclaration getLOWEREnumLiteralDeclaration_7() { return cLOWEREnumLiteralDeclaration_7; }
		
		//'LOWER'
		public Keyword getLOWERLOWERKeyword_7_0() { return cLOWERLOWERKeyword_7_0; }
		
		//GREATEROREQUAL = 'GREATEROREQUAL'
		public EnumLiteralDeclaration getGREATEROREQUALEnumLiteralDeclaration_8() { return cGREATEROREQUALEnumLiteralDeclaration_8; }
		
		//'GREATEROREQUAL'
		public Keyword getGREATEROREQUALGREATEROREQUALKeyword_8_0() { return cGREATEROREQUALGREATEROREQUALKeyword_8_0; }
		
		//LOWEROREQUAL = 'LOWEROREQUAL'
		public EnumLiteralDeclaration getLOWEROREQUALEnumLiteralDeclaration_9() { return cLOWEROREQUALEnumLiteralDeclaration_9; }
		
		//'LOWEROREQUAL'
		public Keyword getLOWEROREQUALLOWEROREQUALKeyword_9_0() { return cLOWEROREQUALLOWEROREQUALKeyword_9_0; }
		
		//AND = 'AND'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_10() { return cANDEnumLiteralDeclaration_10; }
		
		//'AND'
		public Keyword getANDANDKeyword_10_0() { return cANDANDKeyword_10_0; }
		
		//OR = 'OR'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_11() { return cOREnumLiteralDeclaration_11; }
		
		//'OR'
		public Keyword getORORKeyword_11_0() { return cORORKeyword_11_0; }
	}
	public class UnaryOperatorKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.UnaryOperatorKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNARYMINUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNARYMINUSHyphenMinusKeyword_0_0 = (Keyword)cUNARYMINUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTNotKeyword_1_0 = (Keyword)cNOTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UnaryOperatorKind returns UnaryOperatorKind:
		//                UNARYMINUS = '-' | NOT = 'not';
		public EnumRule getRule() { return rule; }
		
		//UNARYMINUS = '-' | NOT = 'not'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNARYMINUS = '-'
		public EnumLiteralDeclaration getUNARYMINUSEnumLiteralDeclaration_0() { return cUNARYMINUSEnumLiteralDeclaration_0; }
		
		//'-'
		public Keyword getUNARYMINUSHyphenMinusKeyword_0_0() { return cUNARYMINUSHyphenMinusKeyword_0_0; }
		
		//NOT = 'not'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_1() { return cNOTEnumLiteralDeclaration_1; }
		
		//'not'
		public Keyword getNOTNotKeyword_1_0() { return cNOTNotKeyword_1_0; }
	}
	public class AdditionOperatorKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.AdditionOperatorKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditionOperatorKind returns BinaryOperatorKind:
		//    PLUS = '+' | MINUS = '-'
		//;
		public EnumRule getRule() { return rule; }
		
		//PLUS = '+' | MINUS = '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS = '+'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS = '-'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
	}
	public class MultiplicationOperatorKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.MultiplicationOperatorKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTAsteriskKeyword_0_0 = (Keyword)cMULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_1_0 = (Keyword)cDIVEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MultiplicationOperatorKind returns BinaryOperatorKind:
		//    MULT = '*' | DIV = '/'
		//;
		public EnumRule getRule() { return rule; }
		
		//MULT = '*' | DIV = '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULT = '*'
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_0() { return cMULTEnumLiteralDeclaration_0; }
		
		//'*'
		public Keyword getMULTAsteriskKeyword_0_0() { return cMULTAsteriskKeyword_0_0; }
		
		//DIV = '/'
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_1() { return cDIVEnumLiteralDeclaration_1; }
		
		//'/'
		public Keyword getDIVSolidusKeyword_1_0() { return cDIVSolidusKeyword_1_0; }
	}
	public class EqualOperatorKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EqualOperatorKind");
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cEQUALEqualsSignKeyword_0 = (Keyword)cEQUALEnumLiteralDeclaration.eContents().get(0);
		
		//enum EqualOperatorKind  returns BinaryOperatorKind:
		//    EQUAL = '='
		//;
		public EnumRule getRule() { return rule; }
		
		//EQUAL = '='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration() { return cEQUALEnumLiteralDeclaration; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_0() { return cEQUALEqualsSignKeyword_0; }
	}
	public class ComparisionOperatorKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.ComparisionOperatorKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGREATERGreaterThanSignKeyword_0_0 = (Keyword)cGREATEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOWERLessThanSignKeyword_1_0 = (Keyword)cLOWEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEROREQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATEROREQUALGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGREATEROREQUALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEROREQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLOWEROREQUALLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLOWEROREQUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ComparisionOperatorKind  returns BinaryOperatorKind:
		//    GREATER = '>' | LOWER = '<' | GREATEROREQUAL = '>=' | LOWEROREQUAL = '<='
		//;
		public EnumRule getRule() { return rule; }
		
		//GREATER = '>' | LOWER = '<' | GREATEROREQUAL = '>=' | LOWEROREQUAL = '<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GREATER = '>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_0() { return cGREATEREnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_0_0() { return cGREATERGreaterThanSignKeyword_0_0; }
		
		//LOWER = '<'
		public EnumLiteralDeclaration getLOWEREnumLiteralDeclaration_1() { return cLOWEREnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getLOWERLessThanSignKeyword_1_0() { return cLOWERLessThanSignKeyword_1_0; }
		
		//GREATEROREQUAL = '>='
		public EnumLiteralDeclaration getGREATEROREQUALEnumLiteralDeclaration_2() { return cGREATEROREQUALEnumLiteralDeclaration_2; }
		
		//'>='
		public Keyword getGREATEROREQUALGreaterThanSignEqualsSignKeyword_2_0() { return cGREATEROREQUALGreaterThanSignEqualsSignKeyword_2_0; }
		
		//LOWEROREQUAL = '<='
		public EnumLiteralDeclaration getLOWEROREQUALEnumLiteralDeclaration_3() { return cLOWEROREQUALEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getLOWEROREQUALLessThanSignEqualsSignKeyword_3_0() { return cLOWEROREQUALLessThanSignEqualsSignKeyword_3_0; }
	}
	public class AndOperatorKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.AndOperatorKind");
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cANDAndKeyword_0 = (Keyword)cANDEnumLiteralDeclaration.eContents().get(0);
		
		//enum AndOperatorKind  returns BinaryOperatorKind:
		//    AND = 'and';
		public EnumRule getRule() { return rule; }
		
		//AND = 'and'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration() { return cANDEnumLiteralDeclaration; }
		
		//'and'
		public Keyword getANDAndKeyword_0() { return cANDAndKeyword_0; }
	}
	public class OrOperatorKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.OrOperatorKind");
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOROrKeyword_0 = (Keyword)cOREnumLiteralDeclaration.eContents().get(0);
		
		//enum OrOperatorKind returns BinaryOperatorKind:
		//    OR = 'or';
		public EnumRule getRule() { return rule; }
		
		//OR = 'or'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration() { return cOREnumLiteralDeclaration; }
		
		//'or'
		public Keyword getOROrKeyword_0() { return cOROrKeyword_0; }
	}
	
	private final QLModelElements pQLModel;
	private final ValueTypeElements pValueType;
	private final ExpressionElements pExpression;
	private final UnaryOrPrimaryExpressionElements pUnaryOrPrimaryExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final IfExpressionElements pIfExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualExpressionElements pEqualExpression;
	private final ComparisionExpressionElements pComparisionExpression;
	private final AdditionExpressionElements pAdditionExpression;
	private final MultiplicationExpressionElements pMultiplicationExpression;
	private final CallElements pCall;
	private final ValueElements pValue;
	private final FormElements pForm;
	private final DefinitionGroupElements pDefinitionGroup;
	private final EBooleanElements pEBoolean;
	private final EDateElements pEDate;
	private final EStringElements pEString;
	private final QuestionGroupElements pQuestionGroup;
	private final QuestionElements pQuestion;
	private final ValueType_ImplElements pValueType_Impl;
	private final BasicBinaryExpressionElements pBasicBinaryExpression;
	private final ConstantCallElements pConstantCall;
	private final BasicUnaryExpressionElements pBasicUnaryExpression;
	private final QuestionCallElements pQuestionCall;
	private final BooleanValueTypeElements pBooleanValueType;
	private final IntegerValueTypeElements pIntegerValueType;
	private final DecimalValueTypeElements pDecimalValueType;
	private final DateValueTypeElements pDateValueType;
	private final EnumerationValueTypeElements pEnumerationValueType;
	private final StringValueTypeElements pStringValueType;
	private final EnumerationLiteralElements pEnumerationLiteral;
	private final BinaryOperatorKindElements eBinaryOperatorKind;
	private final IntegerValueElements pIntegerValue;
	private final StringValueElements pStringValue;
	private final BooleanValueElements pBooleanValue;
	private final EnumerationCallElements pEnumerationCall;
	private final DateValueElements pDateValue;
	private final DecimalValueElements pDecimalValue;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	private final UnaryOperatorKindElements eUnaryOperatorKind;
	private final AdditionOperatorKindElements eAdditionOperatorKind;
	private final MultiplicationOperatorKindElements eMultiplicationOperatorKind;
	private final EqualOperatorKindElements eEqualOperatorKind;
	private final ComparisionOperatorKindElements eComparisionOperatorKind;
	private final AndOperatorKindElements eAndOperatorKind;
	private final OrOperatorKindElements eOrOperatorKind;
	private final QuestionDefinitionElements pQuestionDefinition;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQLModel = new QLModelElements();
		this.pValueType = new ValueTypeElements();
		this.pExpression = new ExpressionElements();
		this.pUnaryOrPrimaryExpression = new UnaryOrPrimaryExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pIfExpression = new IfExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualExpression = new EqualExpressionElements();
		this.pComparisionExpression = new ComparisionExpressionElements();
		this.pAdditionExpression = new AdditionExpressionElements();
		this.pMultiplicationExpression = new MultiplicationExpressionElements();
		this.pCall = new CallElements();
		this.pValue = new ValueElements();
		this.pForm = new FormElements();
		this.pDefinitionGroup = new DefinitionGroupElements();
		this.pEBoolean = new EBooleanElements();
		this.pEDate = new EDateElements();
		this.pEString = new EStringElements();
		this.pQuestionGroup = new QuestionGroupElements();
		this.pQuestion = new QuestionElements();
		this.pValueType_Impl = new ValueType_ImplElements();
		this.pBasicBinaryExpression = new BasicBinaryExpressionElements();
		this.pConstantCall = new ConstantCallElements();
		this.pBasicUnaryExpression = new BasicUnaryExpressionElements();
		this.pQuestionCall = new QuestionCallElements();
		this.pBooleanValueType = new BooleanValueTypeElements();
		this.pIntegerValueType = new IntegerValueTypeElements();
		this.pDecimalValueType = new DecimalValueTypeElements();
		this.pDateValueType = new DateValueTypeElements();
		this.pEnumerationValueType = new EnumerationValueTypeElements();
		this.pStringValueType = new StringValueTypeElements();
		this.pEnumerationLiteral = new EnumerationLiteralElements();
		this.eBinaryOperatorKind = new BinaryOperatorKindElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pStringValue = new StringValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pEnumerationCall = new EnumerationCallElements();
		this.pDateValue = new DateValueElements();
		this.pDecimalValue = new DecimalValueElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
		this.eUnaryOperatorKind = new UnaryOperatorKindElements();
		this.eAdditionOperatorKind = new AdditionOperatorKindElements();
		this.eMultiplicationOperatorKind = new MultiplicationOperatorKindElements();
		this.eEqualOperatorKind = new EqualOperatorKindElements();
		this.eComparisionOperatorKind = new ComparisionOperatorKindElements();
		this.eAndOperatorKind = new AndOperatorKindElements();
		this.eOrOperatorKind = new OrOperatorKindElements();
		this.pQuestionDefinition = new QuestionDefinitionElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.ql.QL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//QLModel returns QLModel:
	//    {QLModel}
	//    'QLModel' ('(' (canSubmit?='canSubmit')? ('submitDate' submitDate=EDate)? ')')?
	//    '{'
	//        (definitionGroup+=DefinitionGroup | forms+=Form)*
	//    '}';
	public QLModelElements getQLModelAccess() {
		return pQLModel;
	}
	
	public ParserRule getQLModelRule() {
		return getQLModelAccess().getRule();
	}
	
	//ValueType returns ValueType:
	//    ValueType_Impl | BooleanValueType | IntegerValueType | DecimalValueType | DateValueType | EnumerationValueType | StringValueType;
	public ValueTypeElements getValueTypeAccess() {
		return pValueType;
	}
	
	public ParserRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//Expression returns Expression:
	//    UnaryOrPrimaryExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//    //BasicBinaryExpression | ConstantCall | BasicUnaryExpression | QuestionCall;
	//UnaryOrPrimaryExpression returns Expression:
	//    PrimaryExpression | UnaryExpression
	//    ;
	public UnaryOrPrimaryExpressionElements getUnaryOrPrimaryExpressionAccess() {
		return pUnaryOrPrimaryExpression;
	}
	
	public ParserRule getUnaryOrPrimaryExpressionRule() {
		return getUnaryOrPrimaryExpressionAccess().getRule();
	}
	
	//UnaryExpression returns Expression :
	//    {BasicUnaryExpression}
	//    operator=UnaryOperatorKind operand=UnaryOrPrimaryExpression
	//    ;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//PrimaryExpression returns Expression:
	//    Call  | IfExpression | '(' (OrExpression | UnaryExpression) ')'  ;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//IfExpression returns IfExpression:
	//    {IfExpression}
	//    'if' condition=Expression
	//    'then' thenExpression=Expression
	//    ('else' elseExpression=Expression )?
	//    'endif'
	//;
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//OrExpression returns Expression:
	//    AndExpression (
	//        {BasicBinaryExpression.lhsOperand=current}
	//        operator=OrOperatorKind
	//        rhsOperand=AndExpression
	//    )*
	//;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression returns Expression:
	//    EqualExpression (
	//        {BasicBinaryExpression.lhsOperand=current}
	//        operator=AndOperatorKind
	//        rhsOperand=EqualExpression
	//    )*
	//;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//EqualExpression returns Expression:
	//    ComparisionExpression (
	//        {BasicBinaryExpression.lhsOperand=current}
	//        operator=EqualOperatorKind
	//        rhsOperand=ComparisionExpression
	//    )*
	//;
	public EqualExpressionElements getEqualExpressionAccess() {
		return pEqualExpression;
	}
	
	public ParserRule getEqualExpressionRule() {
		return getEqualExpressionAccess().getRule();
	}
	
	//ComparisionExpression returns Expression:
	//    AdditionExpression (
	//        {BasicBinaryExpression.lhsOperand=current}
	//        operator=ComparisionOperatorKind
	//        rhsOperand=AdditionExpression
	//    )*
	//;
	public ComparisionExpressionElements getComparisionExpressionAccess() {
		return pComparisionExpression;
	}
	
	public ParserRule getComparisionExpressionRule() {
		return getComparisionExpressionAccess().getRule();
	}
	
	//AdditionExpression returns Expression:
	//    MultiplicationExpression (
	//        {BasicBinaryExpression.lhsOperand=current}
	//        operator=AdditionOperatorKind
	//        rhsOperand=MultiplicationExpression
	//    )*
	//;
	public AdditionExpressionElements getAdditionExpressionAccess() {
		return pAdditionExpression;
	}
	
	public ParserRule getAdditionExpressionRule() {
		return getAdditionExpressionAccess().getRule();
	}
	
	//MultiplicationExpression returns Expression:
	//    PrimaryExpression (
	//        {BasicBinaryExpression.lhsOperand=current}
	//        operator=MultiplicationOperatorKind
	//        rhsOperand=UnaryOrPrimaryExpression
	//    )*
	//;
	public MultiplicationExpressionElements getMultiplicationExpressionAccess() {
		return pMultiplicationExpression;
	}
	
	public ParserRule getMultiplicationExpressionRule() {
		return getMultiplicationExpressionAccess().getRule();
	}
	
	//Call returns Call:
	//    ConstantCall | QuestionCall | EnumerationCall;
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//Value returns Value:
	//    IntegerValue | StringValue | BooleanValue | DateValue | DecimalValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Form returns Form:
	//    'Form'
	//    name=ID
	//    questionGroup=QuestionGroup
	//;
	public FormElements getFormAccess() {
		return pForm;
	}
	
	public ParserRule getFormRule() {
		return getFormAccess().getRule();
	}
	
	//DefinitionGroup returns DefinitionGroup:
	//    {DefinitionGroup}
	//    'definitions'
	//    '{'
	//        ( questionDefinitions+=QuestionDefinition | dataTypes+=ValueType )*
	//    '}';
	public DefinitionGroupElements getDefinitionGroupAccess() {
		return pDefinitionGroup;
	}
	
	public ParserRule getDefinitionGroupRule() {
		return getDefinitionGroupAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EDate returns ecore::EDate:
	//    'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;
	public EDateElements getEDateAccess() {
		return pEDate;
	}
	
	public ParserRule getEDateRule() {
		return getEDateAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//QuestionGroup returns QuestionGroup:
	//    {QuestionGroup}
	//    ('if' guard=Expression )?
	//    '{'
	//        ( questionGroups+=QuestionGroup | questions+=Question)*
	//    '}';
	public QuestionGroupElements getQuestionGroupAccess() {
		return pQuestionGroup;
	}
	
	public ParserRule getQuestionGroupRule() {
		return getQuestionGroupAccess().getRule();
	}
	
	//Question returns Question:
	//    questionDefinition=[QuestionDefinition|QualifiedName]
	//    ;
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//ValueType_Impl returns ValueType:
	//    {ValueType}
	//    'ValueType'
	//    name=ID
	//    '{'
	//        ('unit' unit=EString)?
	//    '}';
	public ValueType_ImplElements getValueType_ImplAccess() {
		return pValueType_Impl;
	}
	
	public ParserRule getValueType_ImplRule() {
		return getValueType_ImplAccess().getRule();
	}
	
	//BasicBinaryExpression returns BasicBinaryExpression:
	//    'BasicBinaryExpression'
	//    '{'
	//        'operator' operator=BinaryOperatorKind
	//        ('resultType' resultType=[ValueType|EString])?
	//        'lhsOperand' lhsOperand=Expression
	//        'rhsOperand' rhsOperand=Expression
	//    '}';
	public BasicBinaryExpressionElements getBasicBinaryExpressionAccess() {
		return pBasicBinaryExpression;
	}
	
	public ParserRule getBasicBinaryExpressionRule() {
		return getBasicBinaryExpressionAccess().getRule();
	}
	
	//ConstantCall returns ConstantCall:
	//    {ConstantCall}
	//    value=(StringValue | IntegerValue | BooleanValue | DecimalValue )
	//    ;
	public ConstantCallElements getConstantCallAccess() {
		return pConstantCall;
	}
	
	public ParserRule getConstantCallRule() {
		return getConstantCallAccess().getRule();
	}
	
	//BasicUnaryExpression returns BasicUnaryExpression:
	//    'BasicUnaryExpression'
	//    '{'
	//        ('operator' operator=UnaryOperatorKind)?
	//        ('resultType' resultType=[ValueType|QualifiedName])?
	//        'operand' operand=Expression
	//    '}';
	public BasicUnaryExpressionElements getBasicUnaryExpressionAccess() {
		return pBasicUnaryExpression;
	}
	
	public ParserRule getBasicUnaryExpressionRule() {
		return getBasicUnaryExpressionAccess().getRule();
	}
	
	//QuestionCall returns QuestionCall:
	//    {QuestionCall}
	//    question=[QuestionDefinition|QualifiedName] '(' ')'
	//    ;
	public QuestionCallElements getQuestionCallAccess() {
		return pQuestionCall;
	}
	
	public ParserRule getQuestionCallRule() {
		return getQuestionCallAccess().getRule();
	}
	
	//BooleanValueType returns BooleanValueType:
	//    {BooleanValueType}
	//    'booleanType'
	//    name=ID
	//    ('{'
	//        ('unit' unit=EString)?
	//    '}')?;
	public BooleanValueTypeElements getBooleanValueTypeAccess() {
		return pBooleanValueType;
	}
	
	public ParserRule getBooleanValueTypeRule() {
		return getBooleanValueTypeAccess().getRule();
	}
	
	//IntegerValueType returns IntegerValueType:
	//    {IntegerValueType}
	//    'integerType'
	//    name=ID
	//    ('{'
	//        ('unit' unit=EString)?
	//        ('min' min=EInt)?
	//        ('max' max=EInt)?
	//    '}')?;
	public IntegerValueTypeElements getIntegerValueTypeAccess() {
		return pIntegerValueType;
	}
	
	public ParserRule getIntegerValueTypeRule() {
		return getIntegerValueTypeAccess().getRule();
	}
	
	//DecimalValueType returns DecimalValueType:
	//    {DecimalValueType}
	//    'decimalType'
	//    name=ID
	//    ('{'
	//        ('unit' unit=EString)?
	//    '}')?;
	public DecimalValueTypeElements getDecimalValueTypeAccess() {
		return pDecimalValueType;
	}
	
	public ParserRule getDecimalValueTypeRule() {
		return getDecimalValueTypeAccess().getRule();
	}
	
	//DateValueType returns DateValueType:
	//    {DateValueType}
	//    'dateType'
	//    name=ID
	//    ('{'
	//        ('unit' unit=EString)?
	//    '}')?;
	public DateValueTypeElements getDateValueTypeAccess() {
		return pDateValueType;
	}
	
	public ParserRule getDateValueTypeRule() {
		return getDateValueTypeAccess().getRule();
	}
	
	//EnumerationValueType returns EnumerationValueType:
	//    {EnumerationValueType}
	//    'enumerationType'
	//    name=ID
	//    ('{'
	//        ('unit' unit=EString)?
	//        ('literals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
	//    '}')?;
	public EnumerationValueTypeElements getEnumerationValueTypeAccess() {
		return pEnumerationValueType;
	}
	
	public ParserRule getEnumerationValueTypeRule() {
		return getEnumerationValueTypeAccess().getRule();
	}
	
	//StringValueType returns StringValueType:
	//    {StringValueType}
	//    'StringType'
	//    name=ID
	//    ('{'
	//        ('unit' unit=EString)?
	//    '}')?;
	public StringValueTypeElements getStringValueTypeAccess() {
		return pStringValueType;
	}
	
	public ParserRule getStringValueTypeRule() {
		return getStringValueTypeAccess().getRule();
	}
	
	//EnumerationLiteral returns EnumerationLiteral:
	//    {EnumerationLiteral}
	//    name=ID;
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return pEnumerationLiteral;
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}
	
	//enum BinaryOperatorKind returns BinaryOperatorKind:
	//                PLUS = 'PLUS' | MINUS = 'MINUS' | MULT = 'MULT' | DIV = 'DIV' | EQUAL = 'EQUAL' | NOTEQUAL = 'NOTEQUAL' | GREATER = 'GREATER' | LOWER = 'LOWER' | GREATEROREQUAL = 'GREATEROREQUAL' | LOWEROREQUAL = 'LOWEROREQUAL' | AND = 'AND' | OR = 'OR';
	public BinaryOperatorKindElements getBinaryOperatorKindAccess() {
		return eBinaryOperatorKind;
	}
	
	public EnumRule getBinaryOperatorKindRule() {
		return getBinaryOperatorKindAccess().getRule();
	}
	
	//IntegerValue returns IntegerValue:
	//    {IntegerValue}
	//    intValue=EInt
	//    ;
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}
	
	//StringValue returns StringValue:
	//    {StringValue}
	//    stringValue=STRING
	//    ;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//BooleanValue returns BooleanValue:
	//    {BooleanValue}
	//    booleanValue=EBoolean
	//    ;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//EnumerationCall returns EnumerationCall:
	//    {EnumerationCall}
	//    enumerationLiteral=[EnumerationLiteral|QualifiedName]
	//    ;
	public EnumerationCallElements getEnumerationCallAccess() {
		return pEnumerationCall;
	}
	
	public ParserRule getEnumerationCallRule() {
		return getEnumerationCallAccess().getRule();
	}
	
	//DateValue returns DateValue:
	//    {DateValue}
	//    'DateValue'
	//    '{'
	//        ('dateValue' dateValue=EDate)?
	//    '}';
	public DateValueElements getDateValueAccess() {
		return pDateValue;
	}
	
	public ParserRule getDateValueRule() {
		return getDateValueAccess().getRule();
	}
	
	//DecimalValue returns DecimalValue:
	//    {DecimalValue}
	//    decimalValue=EFloat
	//    ;
	public DecimalValueElements getDecimalValueAccess() {
		return pDecimalValue;
	}
	
	public ParserRule getDecimalValueRule() {
		return getDecimalValueAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    //'-'? INT;
	//    INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    //'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	//    INT? '.' INT (('E'|'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//enum UnaryOperatorKind returns UnaryOperatorKind:
	//                UNARYMINUS = '-' | NOT = 'not';
	public UnaryOperatorKindElements getUnaryOperatorKindAccess() {
		return eUnaryOperatorKind;
	}
	
	public EnumRule getUnaryOperatorKindRule() {
		return getUnaryOperatorKindAccess().getRule();
	}
	
	//enum AdditionOperatorKind returns BinaryOperatorKind:
	//    PLUS = '+' | MINUS = '-'
	//;
	public AdditionOperatorKindElements getAdditionOperatorKindAccess() {
		return eAdditionOperatorKind;
	}
	
	public EnumRule getAdditionOperatorKindRule() {
		return getAdditionOperatorKindAccess().getRule();
	}
	
	//enum MultiplicationOperatorKind returns BinaryOperatorKind:
	//    MULT = '*' | DIV = '/'
	//;
	public MultiplicationOperatorKindElements getMultiplicationOperatorKindAccess() {
		return eMultiplicationOperatorKind;
	}
	
	public EnumRule getMultiplicationOperatorKindRule() {
		return getMultiplicationOperatorKindAccess().getRule();
	}
	
	//enum EqualOperatorKind  returns BinaryOperatorKind:
	//    EQUAL = '='
	//;
	public EqualOperatorKindElements getEqualOperatorKindAccess() {
		return eEqualOperatorKind;
	}
	
	public EnumRule getEqualOperatorKindRule() {
		return getEqualOperatorKindAccess().getRule();
	}
	
	//enum ComparisionOperatorKind  returns BinaryOperatorKind:
	//    GREATER = '>' | LOWER = '<' | GREATEROREQUAL = '>=' | LOWEROREQUAL = '<='
	//;
	public ComparisionOperatorKindElements getComparisionOperatorKindAccess() {
		return eComparisionOperatorKind;
	}
	
	public EnumRule getComparisionOperatorKindRule() {
		return getComparisionOperatorKindAccess().getRule();
	}
	
	//enum AndOperatorKind  returns BinaryOperatorKind:
	//    AND = 'and';
	public AndOperatorKindElements getAndOperatorKindAccess() {
		return eAndOperatorKind;
	}
	
	public EnumRule getAndOperatorKindRule() {
		return getAndOperatorKindAccess().getRule();
	}
	
	//enum OrOperatorKind returns BinaryOperatorKind:
	//    OR = 'or';
	public OrOperatorKindElements getOrOperatorKindAccess() {
		return eOrOperatorKind;
	}
	
	public EnumRule getOrOperatorKindRule() {
		return getOrOperatorKindAccess().getRule();
	}
	
	//QuestionDefinition returns QuestionDefinition:
	//    (isMandatory?='mandatory')?
	//    'question'
	//    name=EString
	//    ( '('    (isDisplayed?='isDisplayed')?
	//        ('currentValue' currentValue=Value)? ')' )?
	//    ":" label=EString dataType=[ValueType|EString]
	//    ('=' computedExpression=Expression ';')?
	//    ;
	public QuestionDefinitionElements getQuestionDefinitionAccess() {
		return pQuestionDefinition;
	}
	
	public ParserRule getQuestionDefinitionRule() {
		return getQuestionDefinitionAccess().getRule();
	}
	
	//QualifiedName:
	//    ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
