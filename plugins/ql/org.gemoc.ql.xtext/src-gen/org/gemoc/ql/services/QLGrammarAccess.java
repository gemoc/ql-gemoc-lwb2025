/*
 * generated by Xtext 2.35.0
 */
package org.gemoc.ql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class QLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.QLModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQLModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCanSubmitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCanSubmitCanSubmitKeyword_1_0 = (Keyword)cCanSubmitAssignment_1.eContents().get(0);
		private final Keyword cQLModelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSubmitDateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSubmitDateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSubmitDateEDateParserRuleCall_4_1_0 = (RuleCall)cSubmitDateAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFormsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cFormsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cFormsFormParserRuleCall_5_2_0 = (RuleCall)cFormsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cFormsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cFormsFormParserRuleCall_5_3_1_0 = (RuleCall)cFormsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDefinitionGroupKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cDefinitionGroupAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDefinitionGroupDefinitionGroupParserRuleCall_6_2_0 = (RuleCall)cDefinitionGroupAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cDefinitionGroupAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cDefinitionGroupDefinitionGroupParserRuleCall_6_3_1_0 = (RuleCall)cDefinitionGroupAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//QLModel returns QLModel:
		//    {QLModel}
		//    (canSubmit?='canSubmit')?
		//    'QLModel'
		//    '{'
		//        ('submitDate' submitDate=EDate)?
		//        ('forms' '{' forms+=Form ( "," forms+=Form)* '}' )?
		//        ('definitionGroup' '{' definitionGroup+=DefinitionGroup ( "," definitionGroup+=DefinitionGroup)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{QLModel}
		//(canSubmit?='canSubmit')?
		//'QLModel'
		//'{'
		//    ('submitDate' submitDate=EDate)?
		//    ('forms' '{' forms+=Form ( "," forms+=Form)* '}' )?
		//    ('definitionGroup' '{' definitionGroup+=DefinitionGroup ( "," definitionGroup+=DefinitionGroup)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{QLModel}
		public Action getQLModelAction_0() { return cQLModelAction_0; }
		
		//(canSubmit?='canSubmit')?
		public Assignment getCanSubmitAssignment_1() { return cCanSubmitAssignment_1; }
		
		//'canSubmit'
		public Keyword getCanSubmitCanSubmitKeyword_1_0() { return cCanSubmitCanSubmitKeyword_1_0; }
		
		//'QLModel'
		public Keyword getQLModelKeyword_2() { return cQLModelKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('submitDate' submitDate=EDate)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'submitDate'
		public Keyword getSubmitDateKeyword_4_0() { return cSubmitDateKeyword_4_0; }
		
		//submitDate=EDate
		public Assignment getSubmitDateAssignment_4_1() { return cSubmitDateAssignment_4_1; }
		
		//EDate
		public RuleCall getSubmitDateEDateParserRuleCall_4_1_0() { return cSubmitDateEDateParserRuleCall_4_1_0; }
		
		//('forms' '{' forms+=Form ( "," forms+=Form)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'forms'
		public Keyword getFormsKeyword_5_0() { return cFormsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//forms+=Form
		public Assignment getFormsAssignment_5_2() { return cFormsAssignment_5_2; }
		
		//Form
		public RuleCall getFormsFormParserRuleCall_5_2_0() { return cFormsFormParserRuleCall_5_2_0; }
		
		//( "," forms+=Form)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//forms+=Form
		public Assignment getFormsAssignment_5_3_1() { return cFormsAssignment_5_3_1; }
		
		//Form
		public RuleCall getFormsFormParserRuleCall_5_3_1_0() { return cFormsFormParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('definitionGroup' '{' definitionGroup+=DefinitionGroup ( "," definitionGroup+=DefinitionGroup)* '}' )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'definitionGroup'
		public Keyword getDefinitionGroupKeyword_6_0() { return cDefinitionGroupKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//definitionGroup+=DefinitionGroup
		public Assignment getDefinitionGroupAssignment_6_2() { return cDefinitionGroupAssignment_6_2; }
		
		//DefinitionGroup
		public RuleCall getDefinitionGroupDefinitionGroupParserRuleCall_6_2_0() { return cDefinitionGroupDefinitionGroupParserRuleCall_6_2_0; }
		
		//( "," definitionGroup+=DefinitionGroup)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//definitionGroup+=DefinitionGroup
		public Assignment getDefinitionGroupAssignment_6_3_1() { return cDefinitionGroupAssignment_6_3_1; }
		
		//DefinitionGroup
		public RuleCall getDefinitionGroupDefinitionGroupParserRuleCall_6_3_1_0() { return cDefinitionGroupDefinitionGroupParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueType_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanValueTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerValueTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDecimalValueTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDateValueTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnumerationValueTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStringValueTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ValueType returns ValueType:
		//    ValueType_Impl | BooleanValueType | IntegerValueType | DecimalValueType | DateValueType | EnumerationValueType | StringValueType;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueType_Impl | BooleanValueType | IntegerValueType | DecimalValueType | DateValueType | EnumerationValueType | StringValueType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueType_Impl
		public RuleCall getValueType_ImplParserRuleCall_0() { return cValueType_ImplParserRuleCall_0; }
		
		//BooleanValueType
		public RuleCall getBooleanValueTypeParserRuleCall_1() { return cBooleanValueTypeParserRuleCall_1; }
		
		//IntegerValueType
		public RuleCall getIntegerValueTypeParserRuleCall_2() { return cIntegerValueTypeParserRuleCall_2; }
		
		//DecimalValueType
		public RuleCall getDecimalValueTypeParserRuleCall_3() { return cDecimalValueTypeParserRuleCall_3; }
		
		//DateValueType
		public RuleCall getDateValueTypeParserRuleCall_4() { return cDateValueTypeParserRuleCall_4; }
		
		//EnumerationValueType
		public RuleCall getEnumerationValueTypeParserRuleCall_5() { return cEnumerationValueTypeParserRuleCall_5; }
		
		//StringValueType
		public RuleCall getStringValueTypeParserRuleCall_6() { return cStringValueTypeParserRuleCall_6; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicBinaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBasicUnaryExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cQuestionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression returns Expression:
		//    BasicBinaryExpression | ConstantCall | BasicUnaryExpression | QuestionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicBinaryExpression | ConstantCall | BasicUnaryExpression | QuestionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicBinaryExpression
		public RuleCall getBasicBinaryExpressionParserRuleCall_0() { return cBasicBinaryExpressionParserRuleCall_0; }
		
		//ConstantCall
		public RuleCall getConstantCallParserRuleCall_1() { return cConstantCallParserRuleCall_1; }
		
		//BasicUnaryExpression
		public RuleCall getBasicUnaryExpressionParserRuleCall_2() { return cBasicUnaryExpressionParserRuleCall_2; }
		
		//QuestionCall
		public RuleCall getQuestionCallParserRuleCall_3() { return cQuestionCallParserRuleCall_3; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDecimalValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Value returns Value:
		//    IntegerValue | StringValue | BooleanValue | DateValue | DecimalValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerValue | StringValue | BooleanValue | DateValue | DecimalValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_0() { return cIntegerValueParserRuleCall_0; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_1() { return cStringValueParserRuleCall_1; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_2() { return cBooleanValueParserRuleCall_2; }
		
		//DateValue
		public RuleCall getDateValueParserRuleCall_3() { return cDateValueParserRuleCall_3; }
		
		//DecimalValue
		public RuleCall getDecimalValueParserRuleCall_4() { return cDecimalValueParserRuleCall_4; }
	}
	public class FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.Form");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cQuestionGroupKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cQuestionGroupAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQuestionGroupQuestionGroupParserRuleCall_4_0 = (RuleCall)cQuestionGroupAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Form returns Form:
		//    'Form'
		//    name=EString
		//    '{'
		//        'questionGroup' questionGroup=QuestionGroup
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Form'
		//name=EString
		//'{'
		//    'questionGroup' questionGroup=QuestionGroup
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Form'
		public Keyword getFormKeyword_0() { return cFormKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'questionGroup'
		public Keyword getQuestionGroupKeyword_3() { return cQuestionGroupKeyword_3; }
		
		//questionGroup=QuestionGroup
		public Assignment getQuestionGroupAssignment_4() { return cQuestionGroupAssignment_4; }
		
		//QuestionGroup
		public RuleCall getQuestionGroupQuestionGroupParserRuleCall_4_0() { return cQuestionGroupQuestionGroupParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DefinitionGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.DefinitionGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinitionGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefinitionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cQuestionDefinitionsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cQuestionDefinitionsQuestionDefinitionParserRuleCall_3_0_0 = (RuleCall)cQuestionDefinitionsAssignment_3_0.eContents().get(0);
		private final Assignment cDataTypesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDataTypesValueTypeParserRuleCall_3_1_0 = (RuleCall)cDataTypesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DefinitionGroup returns DefinitionGroup:
		//    {DefinitionGroup}
		//    'definitions'
		//    '{'
		//        ( questionDefinitions+=QuestionDefinition | dataTypes+=ValueType )*
		//        //('dataTypes' '{' dataTypes+=ValueType ( "," dataTypes+=ValueType)* '}' )?
		//        //('questionDefinitions' '{' questionDefinitions+=QuestionDefinition ( "," questionDefinitions+=QuestionDefinition)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinitionGroup}
		//'definitions'
		//'{'
		//    ( questionDefinitions+=QuestionDefinition | dataTypes+=ValueType )*
		//    //('dataTypes' '{' dataTypes+=ValueType ( "," dataTypes+=ValueType)* '}' )?
		//    //('questionDefinitions' '{' questionDefinitions+=QuestionDefinition ( "," questionDefinitions+=QuestionDefinition)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{DefinitionGroup}
		public Action getDefinitionGroupAction_0() { return cDefinitionGroupAction_0; }
		
		//'definitions'
		public Keyword getDefinitionsKeyword_1() { return cDefinitionsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//( questionDefinitions+=QuestionDefinition | dataTypes+=ValueType )*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//questionDefinitions+=QuestionDefinition
		public Assignment getQuestionDefinitionsAssignment_3_0() { return cQuestionDefinitionsAssignment_3_0; }
		
		//QuestionDefinition
		public RuleCall getQuestionDefinitionsQuestionDefinitionParserRuleCall_3_0_0() { return cQuestionDefinitionsQuestionDefinitionParserRuleCall_3_0_0; }
		
		//dataTypes+=ValueType
		public Assignment getDataTypesAssignment_3_1() { return cDataTypesAssignment_3_1; }
		
		//ValueType
		public RuleCall getDataTypesValueTypeParserRuleCall_3_1_0() { return cDataTypesValueTypeParserRuleCall_3_1_0; }
		
		//    //('dataTypes' '{' dataTypes+=ValueType ( "," dataTypes+=ValueType)* '}' )?
		//    //('questionDefinitions' '{' questionDefinitions+=QuestionDefinition ( "," questionDefinitions+=QuestionDefinition)* '}' )?
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EDate");
		private final Keyword cEDateKeyword = (Keyword)rule.eContents().get(1);
		
		//EDate returns ecore::EDate:
		//    'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;
		@Override public ParserRule getRule() { return rule; }
		
		//'EDate'
		public Keyword getEDateKeyword() { return cEDateKeyword; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class QuestionGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.QuestionGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuestionGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionGroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGuardKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGuardAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_3_1_0 = (RuleCall)cGuardAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cQuestionGroupsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cQuestionGroupsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cQuestionGroupsQuestionGroupParserRuleCall_4_2_0 = (RuleCall)cQuestionGroupsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cQuestionGroupsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cQuestionGroupsQuestionGroupParserRuleCall_4_3_1_0 = (RuleCall)cQuestionGroupsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cQuestionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cQuestionsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cQuestionsQuestionParserRuleCall_5_2_0 = (RuleCall)cQuestionsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cQuestionsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cQuestionsQuestionParserRuleCall_5_3_1_0 = (RuleCall)cQuestionsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//QuestionGroup returns QuestionGroup:
		//    {QuestionGroup}
		//    'QuestionGroup'
		//    '{'
		//        ('guard' guard=Expression)?
		//        ('questionGroups' '{' questionGroups+=QuestionGroup ( "," questionGroups+=QuestionGroup)* '}' )?
		//        ('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{QuestionGroup}
		//'QuestionGroup'
		//'{'
		//    ('guard' guard=Expression)?
		//    ('questionGroups' '{' questionGroups+=QuestionGroup ( "," questionGroups+=QuestionGroup)* '}' )?
		//    ('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{QuestionGroup}
		public Action getQuestionGroupAction_0() { return cQuestionGroupAction_0; }
		
		//'QuestionGroup'
		public Keyword getQuestionGroupKeyword_1() { return cQuestionGroupKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('guard' guard=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'guard'
		public Keyword getGuardKeyword_3_0() { return cGuardKeyword_3_0; }
		
		//guard=Expression
		public Assignment getGuardAssignment_3_1() { return cGuardAssignment_3_1; }
		
		//Expression
		public RuleCall getGuardExpressionParserRuleCall_3_1_0() { return cGuardExpressionParserRuleCall_3_1_0; }
		
		//('questionGroups' '{' questionGroups+=QuestionGroup ( "," questionGroups+=QuestionGroup)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'questionGroups'
		public Keyword getQuestionGroupsKeyword_4_0() { return cQuestionGroupsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//questionGroups+=QuestionGroup
		public Assignment getQuestionGroupsAssignment_4_2() { return cQuestionGroupsAssignment_4_2; }
		
		//QuestionGroup
		public RuleCall getQuestionGroupsQuestionGroupParserRuleCall_4_2_0() { return cQuestionGroupsQuestionGroupParserRuleCall_4_2_0; }
		
		//( "," questionGroups+=QuestionGroup)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//questionGroups+=QuestionGroup
		public Assignment getQuestionGroupsAssignment_4_3_1() { return cQuestionGroupsAssignment_4_3_1; }
		
		//QuestionGroup
		public RuleCall getQuestionGroupsQuestionGroupParserRuleCall_4_3_1_0() { return cQuestionGroupsQuestionGroupParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'questions'
		public Keyword getQuestionsKeyword_5_0() { return cQuestionsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//questions+=Question
		public Assignment getQuestionsAssignment_5_2() { return cQuestionsAssignment_5_2; }
		
		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_5_2_0() { return cQuestionsQuestionParserRuleCall_5_2_0; }
		
		//( "," questions+=Question)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//questions+=Question
		public Assignment getQuestionsAssignment_5_3_1() { return cQuestionsAssignment_5_3_1; }
		
		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_5_3_1_0() { return cQuestionsQuestionParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cQuestionDefinitionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQuestionDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cQuestionDefinitionQuestionDefinitionCrossReference_3_0 = (CrossReference)cQuestionDefinitionAssignment_3.eContents().get(0);
		private final RuleCall cQuestionDefinitionQuestionDefinitionEStringParserRuleCall_3_0_1 = (RuleCall)cQuestionDefinitionQuestionDefinitionCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Question returns Question:
		//    'Question'
		//    '{'
		//        'questionDefinition' questionDefinition=[QuestionDefinition|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Question'
		//'{'
		//    'questionDefinition' questionDefinition=[QuestionDefinition|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Question'
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'questionDefinition'
		public Keyword getQuestionDefinitionKeyword_2() { return cQuestionDefinitionKeyword_2; }
		
		//questionDefinition=[QuestionDefinition|EString]
		public Assignment getQuestionDefinitionAssignment_3() { return cQuestionDefinitionAssignment_3; }
		
		//[QuestionDefinition|EString]
		public CrossReference getQuestionDefinitionQuestionDefinitionCrossReference_3_0() { return cQuestionDefinitionQuestionDefinitionCrossReference_3_0; }
		
		//EString
		public RuleCall getQuestionDefinitionQuestionDefinitionEStringParserRuleCall_3_0_1() { return cQuestionDefinitionQuestionDefinitionEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ValueType_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.ValueType_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValueTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUnitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUnitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_4_1_0 = (RuleCall)cUnitAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ValueType_Impl returns ValueType:
		//    {ValueType}
		//    'ValueType'
		//    name=EString
		//    '{'
		//        ('unit' unit=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ValueType}
		//'ValueType'
		//name=EString
		//'{'
		//    ('unit' unit=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ValueType}
		public Action getValueTypeAction_0() { return cValueTypeAction_0; }
		
		//'ValueType'
		public Keyword getValueTypeKeyword_1() { return cValueTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('unit' unit=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'unit'
		public Keyword getUnitKeyword_4_0() { return cUnitKeyword_4_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_4_1() { return cUnitAssignment_4_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_4_1_0() { return cUnitEStringParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BasicBinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.BasicBinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBasicBinaryExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOperatorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorBinaryOperatorKindEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cResultTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cResultTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cResultTypeValueTypeCrossReference_4_1_0 = (CrossReference)cResultTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cResultTypeValueTypeEStringParserRuleCall_4_1_0_1 = (RuleCall)cResultTypeValueTypeCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLhsOperandKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLhsOperandAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLhsOperandExpressionParserRuleCall_6_0 = (RuleCall)cLhsOperandAssignment_6.eContents().get(0);
		private final Keyword cRhsOperandKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cRhsOperandAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRhsOperandExpressionParserRuleCall_8_0 = (RuleCall)cRhsOperandAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BasicBinaryExpression returns BasicBinaryExpression:
		//    'BasicBinaryExpression'
		//    '{'
		//        'operator' operator=BinaryOperatorKind
		//        ('resultType' resultType=[ValueType|EString])?
		//        'lhsOperand' lhsOperand=Expression
		//        'rhsOperand' rhsOperand=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BasicBinaryExpression'
		//'{'
		//    'operator' operator=BinaryOperatorKind
		//    ('resultType' resultType=[ValueType|EString])?
		//    'lhsOperand' lhsOperand=Expression
		//    'rhsOperand' rhsOperand=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'BasicBinaryExpression'
		public Keyword getBasicBinaryExpressionKeyword_0() { return cBasicBinaryExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'operator'
		public Keyword getOperatorKeyword_2() { return cOperatorKeyword_2; }
		
		//operator=BinaryOperatorKind
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//BinaryOperatorKind
		public RuleCall getOperatorBinaryOperatorKindEnumRuleCall_3_0() { return cOperatorBinaryOperatorKindEnumRuleCall_3_0; }
		
		//('resultType' resultType=[ValueType|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'resultType'
		public Keyword getResultTypeKeyword_4_0() { return cResultTypeKeyword_4_0; }
		
		//resultType=[ValueType|EString]
		public Assignment getResultTypeAssignment_4_1() { return cResultTypeAssignment_4_1; }
		
		//[ValueType|EString]
		public CrossReference getResultTypeValueTypeCrossReference_4_1_0() { return cResultTypeValueTypeCrossReference_4_1_0; }
		
		//EString
		public RuleCall getResultTypeValueTypeEStringParserRuleCall_4_1_0_1() { return cResultTypeValueTypeEStringParserRuleCall_4_1_0_1; }
		
		//'lhsOperand'
		public Keyword getLhsOperandKeyword_5() { return cLhsOperandKeyword_5; }
		
		//lhsOperand=Expression
		public Assignment getLhsOperandAssignment_6() { return cLhsOperandAssignment_6; }
		
		//Expression
		public RuleCall getLhsOperandExpressionParserRuleCall_6_0() { return cLhsOperandExpressionParserRuleCall_6_0; }
		
		//'rhsOperand'
		public Keyword getRhsOperandKeyword_7() { return cRhsOperandKeyword_7; }
		
		//rhsOperand=Expression
		public Assignment getRhsOperandAssignment_8() { return cRhsOperandAssignment_8; }
		
		//Expression
		public RuleCall getRhsOperandExpressionParserRuleCall_8_0() { return cRhsOperandExpressionParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ConstantCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.ConstantCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstantCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cResultTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cResultTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cResultTypeValueTypeCrossReference_3_1_0 = (CrossReference)cResultTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cResultTypeValueTypeEStringParserRuleCall_3_1_0_1 = (RuleCall)cResultTypeValueTypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConstantCall returns ConstantCall:
		//    {ConstantCall}
		//    'ConstantCall'
		//    '{'
		//        ('resultType' resultType=[ValueType|EString])?
		//        ('value' value=Value)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstantCall}
		//'ConstantCall'
		//'{'
		//    ('resultType' resultType=[ValueType|EString])?
		//    ('value' value=Value)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ConstantCall}
		public Action getConstantCallAction_0() { return cConstantCallAction_0; }
		
		//'ConstantCall'
		public Keyword getConstantCallKeyword_1() { return cConstantCallKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('resultType' resultType=[ValueType|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'resultType'
		public Keyword getResultTypeKeyword_3_0() { return cResultTypeKeyword_3_0; }
		
		//resultType=[ValueType|EString]
		public Assignment getResultTypeAssignment_3_1() { return cResultTypeAssignment_3_1; }
		
		//[ValueType|EString]
		public CrossReference getResultTypeValueTypeCrossReference_3_1_0() { return cResultTypeValueTypeCrossReference_3_1_0; }
		
		//EString
		public RuleCall getResultTypeValueTypeEStringParserRuleCall_3_1_0_1() { return cResultTypeValueTypeEStringParserRuleCall_3_1_0_1; }
		
		//('value' value=Value)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'value'
		public Keyword getValueKeyword_4_0() { return cValueKeyword_4_0; }
		
		//value=Value
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_4_1_0() { return cValueValueParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BasicUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.BasicUnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBasicUnaryExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOperatorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOperatorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorKindEnumRuleCall_2_1_0 = (RuleCall)cOperatorAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cResultTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cResultTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cResultTypeValueTypeCrossReference_3_1_0 = (CrossReference)cResultTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cResultTypeValueTypeEStringParserRuleCall_3_1_0_1 = (RuleCall)cResultTypeValueTypeCrossReference_3_1_0.eContents().get(1);
		private final Keyword cOperandKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperandAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperandExpressionParserRuleCall_5_0 = (RuleCall)cOperandAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BasicUnaryExpression returns BasicUnaryExpression:
		//    'BasicUnaryExpression'
		//    '{'
		//        ('operator' operator=UnaryOperatorKind)?
		//        ('resultType' resultType=[ValueType|EString])?
		//        'operand' operand=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BasicUnaryExpression'
		//'{'
		//    ('operator' operator=UnaryOperatorKind)?
		//    ('resultType' resultType=[ValueType|EString])?
		//    'operand' operand=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'BasicUnaryExpression'
		public Keyword getBasicUnaryExpressionKeyword_0() { return cBasicUnaryExpressionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('operator' operator=UnaryOperatorKind)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'operator'
		public Keyword getOperatorKeyword_2_0() { return cOperatorKeyword_2_0; }
		
		//operator=UnaryOperatorKind
		public Assignment getOperatorAssignment_2_1() { return cOperatorAssignment_2_1; }
		
		//UnaryOperatorKind
		public RuleCall getOperatorUnaryOperatorKindEnumRuleCall_2_1_0() { return cOperatorUnaryOperatorKindEnumRuleCall_2_1_0; }
		
		//('resultType' resultType=[ValueType|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'resultType'
		public Keyword getResultTypeKeyword_3_0() { return cResultTypeKeyword_3_0; }
		
		//resultType=[ValueType|EString]
		public Assignment getResultTypeAssignment_3_1() { return cResultTypeAssignment_3_1; }
		
		//[ValueType|EString]
		public CrossReference getResultTypeValueTypeCrossReference_3_1_0() { return cResultTypeValueTypeCrossReference_3_1_0; }
		
		//EString
		public RuleCall getResultTypeValueTypeEStringParserRuleCall_3_1_0_1() { return cResultTypeValueTypeEStringParserRuleCall_3_1_0_1; }
		
		//'operand'
		public Keyword getOperandKeyword_4() { return cOperandKeyword_4; }
		
		//operand=Expression
		public Assignment getOperandAssignment_5() { return cOperandAssignment_5; }
		
		//Expression
		public RuleCall getOperandExpressionParserRuleCall_5_0() { return cOperandExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class QuestionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.QuestionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cResultTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResultTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cResultTypeValueTypeCrossReference_2_1_0 = (CrossReference)cResultTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cResultTypeValueTypeEStringParserRuleCall_2_1_0_1 = (RuleCall)cResultTypeValueTypeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cQuestionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cQuestionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cQuestionQuestionDefinitionCrossReference_4_0 = (CrossReference)cQuestionAssignment_4.eContents().get(0);
		private final RuleCall cQuestionQuestionDefinitionEStringParserRuleCall_4_0_1 = (RuleCall)cQuestionQuestionDefinitionCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//QuestionCall returns QuestionCall:
		//    'QuestionCall'
		//    '{'
		//        ('resultType' resultType=[ValueType|EString])?
		//        'question' question=[QuestionDefinition|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'QuestionCall'
		//'{'
		//    ('resultType' resultType=[ValueType|EString])?
		//    'question' question=[QuestionDefinition|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'QuestionCall'
		public Keyword getQuestionCallKeyword_0() { return cQuestionCallKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('resultType' resultType=[ValueType|EString])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'resultType'
		public Keyword getResultTypeKeyword_2_0() { return cResultTypeKeyword_2_0; }
		
		//resultType=[ValueType|EString]
		public Assignment getResultTypeAssignment_2_1() { return cResultTypeAssignment_2_1; }
		
		//[ValueType|EString]
		public CrossReference getResultTypeValueTypeCrossReference_2_1_0() { return cResultTypeValueTypeCrossReference_2_1_0; }
		
		//EString
		public RuleCall getResultTypeValueTypeEStringParserRuleCall_2_1_0_1() { return cResultTypeValueTypeEStringParserRuleCall_2_1_0_1; }
		
		//'question'
		public Keyword getQuestionKeyword_3() { return cQuestionKeyword_3; }
		
		//question=[QuestionDefinition|EString]
		public Assignment getQuestionAssignment_4() { return cQuestionAssignment_4; }
		
		//[QuestionDefinition|EString]
		public CrossReference getQuestionQuestionDefinitionCrossReference_4_0() { return cQuestionQuestionDefinitionCrossReference_4_0; }
		
		//EString
		public RuleCall getQuestionQuestionDefinitionEStringParserRuleCall_4_0_1() { return cQuestionQuestionDefinitionEStringParserRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BooleanValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.BooleanValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanValueTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUnitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUnitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_4_1_0 = (RuleCall)cUnitAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BooleanValueType returns BooleanValueType:
		//    {BooleanValueType}
		//    'BooleanValueType'
		//    name=EString
		//    '{'
		//        ('unit' unit=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanValueType}
		//'BooleanValueType'
		//name=EString
		//'{'
		//    ('unit' unit=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{BooleanValueType}
		public Action getBooleanValueTypeAction_0() { return cBooleanValueTypeAction_0; }
		
		//'BooleanValueType'
		public Keyword getBooleanValueTypeKeyword_1() { return cBooleanValueTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('unit' unit=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'unit'
		public Keyword getUnitKeyword_4_0() { return cUnitKeyword_4_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_4_1() { return cUnitAssignment_4_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_4_1_0() { return cUnitEStringParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class IntegerValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.IntegerValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerValueTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUnitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUnitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_4_1_0 = (RuleCall)cUnitAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMinKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMinAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_5_1_0 = (RuleCall)cMinAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMaxKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMaxAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_6_1_0 = (RuleCall)cMaxAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IntegerValueType returns IntegerValueType:
		//    {IntegerValueType}
		//    'IntegerValueType'
		//    name=EString
		//    '{'
		//        ('unit' unit=EString)?
		//        ('min' min=EInt)?
		//        ('max' max=EInt)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerValueType}
		//'IntegerValueType'
		//name=EString
		//'{'
		//    ('unit' unit=EString)?
		//    ('min' min=EInt)?
		//    ('max' max=EInt)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{IntegerValueType}
		public Action getIntegerValueTypeAction_0() { return cIntegerValueTypeAction_0; }
		
		//'IntegerValueType'
		public Keyword getIntegerValueTypeKeyword_1() { return cIntegerValueTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('unit' unit=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'unit'
		public Keyword getUnitKeyword_4_0() { return cUnitKeyword_4_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_4_1() { return cUnitAssignment_4_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_4_1_0() { return cUnitEStringParserRuleCall_4_1_0; }
		
		//('min' min=EInt)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'min'
		public Keyword getMinKeyword_5_0() { return cMinKeyword_5_0; }
		
		//min=EInt
		public Assignment getMinAssignment_5_1() { return cMinAssignment_5_1; }
		
		//EInt
		public RuleCall getMinEIntParserRuleCall_5_1_0() { return cMinEIntParserRuleCall_5_1_0; }
		
		//('max' max=EInt)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'max'
		public Keyword getMaxKeyword_6_0() { return cMaxKeyword_6_0; }
		
		//max=EInt
		public Assignment getMaxAssignment_6_1() { return cMaxAssignment_6_1; }
		
		//EInt
		public RuleCall getMaxEIntParserRuleCall_6_1_0() { return cMaxEIntParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DecimalValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.DecimalValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecimalValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecimalValueTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUnitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUnitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_4_1_0 = (RuleCall)cUnitAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DecimalValueType returns DecimalValueType:
		//    {DecimalValueType}
		//    'DecimalValueType'
		//    name=EString
		//    '{'
		//        ('unit' unit=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DecimalValueType}
		//'DecimalValueType'
		//name=EString
		//'{'
		//    ('unit' unit=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{DecimalValueType}
		public Action getDecimalValueTypeAction_0() { return cDecimalValueTypeAction_0; }
		
		//'DecimalValueType'
		public Keyword getDecimalValueTypeKeyword_1() { return cDecimalValueTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('unit' unit=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'unit'
		public Keyword getUnitKeyword_4_0() { return cUnitKeyword_4_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_4_1() { return cUnitAssignment_4_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_4_1_0() { return cUnitEStringParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DateValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.DateValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDateValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDateValueTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUnitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUnitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_4_1_0 = (RuleCall)cUnitAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DateValueType returns DateValueType:
		//    {DateValueType}
		//    'DateValueType'
		//    name=EString
		//    '{'
		//        ('unit' unit=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DateValueType}
		//'DateValueType'
		//name=EString
		//'{'
		//    ('unit' unit=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{DateValueType}
		public Action getDateValueTypeAction_0() { return cDateValueTypeAction_0; }
		
		//'DateValueType'
		public Keyword getDateValueTypeKeyword_1() { return cDateValueTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('unit' unit=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'unit'
		public Keyword getUnitKeyword_4_0() { return cUnitKeyword_4_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_4_1() { return cUnitAssignment_4_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_4_1_0() { return cUnitEStringParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnumerationValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EnumerationValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumerationValueTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUnitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUnitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_4_1_0 = (RuleCall)cUnitAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEnumerationLiteralsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEnumerationLiteralsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEnumerationLiteralsEnumerationLiteralParserRuleCall_5_2_0 = (RuleCall)cEnumerationLiteralsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cEnumerationLiteralsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cEnumerationLiteralsEnumerationLiteralParserRuleCall_5_3_1_0 = (RuleCall)cEnumerationLiteralsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EnumerationValueType returns EnumerationValueType:
		//    {EnumerationValueType}
		//    'EnumerationValueType'
		//    name=EString
		//    '{'
		//        ('unit' unit=EString)?
		//        ('enumerationLiterals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumerationValueType}
		//'EnumerationValueType'
		//name=EString
		//'{'
		//    ('unit' unit=EString)?
		//    ('enumerationLiterals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{EnumerationValueType}
		public Action getEnumerationValueTypeAction_0() { return cEnumerationValueTypeAction_0; }
		
		//'EnumerationValueType'
		public Keyword getEnumerationValueTypeKeyword_1() { return cEnumerationValueTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('unit' unit=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'unit'
		public Keyword getUnitKeyword_4_0() { return cUnitKeyword_4_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_4_1() { return cUnitAssignment_4_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_4_1_0() { return cUnitEStringParserRuleCall_4_1_0; }
		
		//('enumerationLiterals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'enumerationLiterals'
		public Keyword getEnumerationLiteralsKeyword_5_0() { return cEnumerationLiteralsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//enumerationLiterals+=EnumerationLiteral
		public Assignment getEnumerationLiteralsAssignment_5_2() { return cEnumerationLiteralsAssignment_5_2; }
		
		//EnumerationLiteral
		public RuleCall getEnumerationLiteralsEnumerationLiteralParserRuleCall_5_2_0() { return cEnumerationLiteralsEnumerationLiteralParserRuleCall_5_2_0; }
		
		//( "," enumerationLiterals+=EnumerationLiteral)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//enumerationLiterals+=EnumerationLiteral
		public Assignment getEnumerationLiteralsAssignment_5_3_1() { return cEnumerationLiteralsAssignment_5_3_1; }
		
		//EnumerationLiteral
		public RuleCall getEnumerationLiteralsEnumerationLiteralParserRuleCall_5_3_1_0() { return cEnumerationLiteralsEnumerationLiteralParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StringValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.StringValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringValueTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUnitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUnitAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnitEStringParserRuleCall_4_1_0 = (RuleCall)cUnitAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StringValueType returns StringValueType:
		//    {StringValueType}
		//    'StringValueType'
		//    name=EString
		//    '{'
		//        ('unit' unit=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringValueType}
		//'StringValueType'
		//name=EString
		//'{'
		//    ('unit' unit=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{StringValueType}
		public Action getStringValueTypeAction_0() { return cStringValueTypeAction_0; }
		
		//'StringValueType'
		public Keyword getStringValueTypeKeyword_1() { return cStringValueTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('unit' unit=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'unit'
		public Keyword getUnitKeyword_4_0() { return cUnitKeyword_4_0; }
		
		//unit=EString
		public Assignment getUnitAssignment_4_1() { return cUnitAssignment_4_1; }
		
		//EString
		public RuleCall getUnitEStringParserRuleCall_4_1_0() { return cUnitEStringParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EnumerationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EnumerationLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumerationLiteralKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//EnumerationLiteral returns EnumerationLiteral:
		//    {EnumerationLiteral}
		//    'EnumerationLiteral'
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumerationLiteral}
		//'EnumerationLiteral'
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{EnumerationLiteral}
		public Action getEnumerationLiteralAction_0() { return cEnumerationLiteralAction_0; }
		
		//'EnumerationLiteral'
		public Keyword getEnumerationLiteralKeyword_1() { return cEnumerationLiteralKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.IntegerValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIntValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIntValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIntValueEIntParserRuleCall_3_1_0 = (RuleCall)cIntValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IntegerValue returns IntegerValue:
		//    {IntegerValue}
		//    'IntegerValue'
		//    '{'
		//        ('intValue' intValue=EInt)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerValue}
		//'IntegerValue'
		//'{'
		//    ('intValue' intValue=EInt)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{IntegerValue}
		public Action getIntegerValueAction_0() { return cIntegerValueAction_0; }
		
		//'IntegerValue'
		public Keyword getIntegerValueKeyword_1() { return cIntegerValueKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('intValue' intValue=EInt)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'intValue'
		public Keyword getIntValueKeyword_3_0() { return cIntValueKeyword_3_0; }
		
		//intValue=EInt
		public Assignment getIntValueAssignment_3_1() { return cIntValueAssignment_3_1; }
		
		//EInt
		public RuleCall getIntValueEIntParserRuleCall_3_1_0() { return cIntValueEIntParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.StringValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cStringValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStringValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStringValueEStringParserRuleCall_3_1_0 = (RuleCall)cStringValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StringValue returns StringValue:
		//    {StringValue}
		//    'StringValue'
		//    '{'
		//        ('stringValue' stringValue=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringValue}
		//'StringValue'
		//'{'
		//    ('stringValue' stringValue=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{StringValue}
		public Action getStringValueAction_0() { return cStringValueAction_0; }
		
		//'StringValue'
		public Keyword getStringValueKeyword_1() { return cStringValueKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('stringValue' stringValue=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'stringValue'
		public Keyword getStringValueKeyword_3_0() { return cStringValueKeyword_3_0; }
		
		//stringValue=EString
		public Assignment getStringValueAssignment_3_1() { return cStringValueAssignment_3_1; }
		
		//EString
		public RuleCall getStringValueEStringParserRuleCall_3_1_0() { return cStringValueEStringParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.BooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBooleanValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cBooleanValueBooleanValueKeyword_1_0 = (Keyword)cBooleanValueAssignment_1.eContents().get(0);
		private final Keyword cBooleanValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BooleanValue returns BooleanValue:
		//    {BooleanValue}
		//    (booleanValue?='booleanValue')?
		//    'BooleanValue'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanValue}
		//(booleanValue?='booleanValue')?
		//'BooleanValue'
		public Group getGroup() { return cGroup; }
		
		//{BooleanValue}
		public Action getBooleanValueAction_0() { return cBooleanValueAction_0; }
		
		//(booleanValue?='booleanValue')?
		public Assignment getBooleanValueAssignment_1() { return cBooleanValueAssignment_1; }
		
		//'booleanValue'
		public Keyword getBooleanValueBooleanValueKeyword_1_0() { return cBooleanValueBooleanValueKeyword_1_0; }
		
		//'BooleanValue'
		public Keyword getBooleanValueKeyword_2() { return cBooleanValueKeyword_2; }
	}
	public class DateValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.DateValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDateValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDateValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDateValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDateValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDateValueEDateParserRuleCall_3_1_0 = (RuleCall)cDateValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DateValue returns DateValue:
		//    {DateValue}
		//    'DateValue'
		//    '{'
		//        ('dateValue' dateValue=EDate)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DateValue}
		//'DateValue'
		//'{'
		//    ('dateValue' dateValue=EDate)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{DateValue}
		public Action getDateValueAction_0() { return cDateValueAction_0; }
		
		//'DateValue'
		public Keyword getDateValueKeyword_1() { return cDateValueKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('dateValue' dateValue=EDate)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'dateValue'
		public Keyword getDateValueKeyword_3_0() { return cDateValueKeyword_3_0; }
		
		//dateValue=EDate
		public Assignment getDateValueAssignment_3_1() { return cDateValueAssignment_3_1; }
		
		//EDate
		public RuleCall getDateValueEDateParserRuleCall_3_1_0() { return cDateValueEDateParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DecimalValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.DecimalValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecimalValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecimalValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDecimalValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDecimalValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDecimalValueEFloatParserRuleCall_3_1_0 = (RuleCall)cDecimalValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DecimalValue returns DecimalValue:
		//    {DecimalValue}
		//    'DecimalValue'
		//    '{'
		//        ('decimalValue' decimalValue=EFloat)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DecimalValue}
		//'DecimalValue'
		//'{'
		//    ('decimalValue' decimalValue=EFloat)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{DecimalValue}
		public Action getDecimalValueAction_0() { return cDecimalValueAction_0; }
		
		//'DecimalValue'
		public Keyword getDecimalValueKeyword_1() { return cDecimalValueKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('decimalValue' decimalValue=EFloat)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'decimalValue'
		public Keyword getDecimalValueKeyword_3_0() { return cDecimalValueKeyword_3_0; }
		
		//decimalValue=EFloat
		public Assignment getDecimalValueAssignment_3_1() { return cDecimalValueAssignment_3_1; }
		
		//EFloat
		public RuleCall getDecimalValueEFloatParserRuleCall_3_1_0() { return cDecimalValueEFloatParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class QuestionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.QuestionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsDisplayedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsDisplayedIsDisplayedKeyword_0_0 = (Keyword)cIsDisplayedAssignment_0.eContents().get(0);
		private final Assignment cIsMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsMandatoryIsMandatoryKeyword_1_0 = (Keyword)cIsMandatoryAssignment_1.eContents().get(0);
		private final Keyword cQuestionDefinitionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLabelKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLabelAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLabelEStringParserRuleCall_5_1_0 = (RuleCall)cLabelAssignment_5_1.eContents().get(0);
		private final Keyword cDataTypeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDataTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cDataTypeValueTypeCrossReference_7_0 = (CrossReference)cDataTypeAssignment_7.eContents().get(0);
		private final RuleCall cDataTypeValueTypeEStringParserRuleCall_7_0_1 = (RuleCall)cDataTypeValueTypeCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cComputedExpressionKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cComputedExpressionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cComputedExpressionExpressionParserRuleCall_8_1_0 = (RuleCall)cComputedExpressionAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCurrentValueKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cCurrentValueAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cCurrentValueValueParserRuleCall_9_1_0 = (RuleCall)cCurrentValueAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//QuestionDefinition returns QuestionDefinition:
		//    (isDisplayed?='isDisplayed')?
		//    (isMandatory?='isMandatory')?
		//    'QuestionDefinition'
		//    name=EString
		//    '{'
		//        ('label' label=EString)?
		//        'dataType' dataType=[ValueType|EString]
		//        ('computedExpression' computedExpression=Expression)?
		//        ('currentValue' currentValue=Value)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//(isDisplayed?='isDisplayed')?
		//(isMandatory?='isMandatory')?
		//'QuestionDefinition'
		//name=EString
		//'{'
		//    ('label' label=EString)?
		//    'dataType' dataType=[ValueType|EString]
		//    ('computedExpression' computedExpression=Expression)?
		//    ('currentValue' currentValue=Value)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(isDisplayed?='isDisplayed')?
		public Assignment getIsDisplayedAssignment_0() { return cIsDisplayedAssignment_0; }
		
		//'isDisplayed'
		public Keyword getIsDisplayedIsDisplayedKeyword_0_0() { return cIsDisplayedIsDisplayedKeyword_0_0; }
		
		//(isMandatory?='isMandatory')?
		public Assignment getIsMandatoryAssignment_1() { return cIsMandatoryAssignment_1; }
		
		//'isMandatory'
		public Keyword getIsMandatoryIsMandatoryKeyword_1_0() { return cIsMandatoryIsMandatoryKeyword_1_0; }
		
		//'QuestionDefinition'
		public Keyword getQuestionDefinitionKeyword_2() { return cQuestionDefinitionKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('label' label=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'label'
		public Keyword getLabelKeyword_5_0() { return cLabelKeyword_5_0; }
		
		//label=EString
		public Assignment getLabelAssignment_5_1() { return cLabelAssignment_5_1; }
		
		//EString
		public RuleCall getLabelEStringParserRuleCall_5_1_0() { return cLabelEStringParserRuleCall_5_1_0; }
		
		//'dataType'
		public Keyword getDataTypeKeyword_6() { return cDataTypeKeyword_6; }
		
		//dataType=[ValueType|EString]
		public Assignment getDataTypeAssignment_7() { return cDataTypeAssignment_7; }
		
		//[ValueType|EString]
		public CrossReference getDataTypeValueTypeCrossReference_7_0() { return cDataTypeValueTypeCrossReference_7_0; }
		
		//EString
		public RuleCall getDataTypeValueTypeEStringParserRuleCall_7_0_1() { return cDataTypeValueTypeEStringParserRuleCall_7_0_1; }
		
		//('computedExpression' computedExpression=Expression)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'computedExpression'
		public Keyword getComputedExpressionKeyword_8_0() { return cComputedExpressionKeyword_8_0; }
		
		//computedExpression=Expression
		public Assignment getComputedExpressionAssignment_8_1() { return cComputedExpressionAssignment_8_1; }
		
		//Expression
		public RuleCall getComputedExpressionExpressionParserRuleCall_8_1_0() { return cComputedExpressionExpressionParserRuleCall_8_1_0; }
		
		//('currentValue' currentValue=Value)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'currentValue'
		public Keyword getCurrentValueKeyword_9_0() { return cCurrentValueKeyword_9_0; }
		
		//currentValue=Value
		public Assignment getCurrentValueAssignment_9_1() { return cCurrentValueAssignment_9_1; }
		
		//Value
		public RuleCall getCurrentValueValueParserRuleCall_9_1_0() { return cCurrentValueValueParserRuleCall_9_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	
	public class BinaryOperatorKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.BinaryOperatorKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPLUSKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSMINUSKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTMULTKeyword_2_0 = (Keyword)cMULTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVDIVKeyword_3_0 = (Keyword)cDIVEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEQUALEQUALKeyword_4_0 = (Keyword)cEQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEQUALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNOTEQUALNOTEQUALKeyword_5_0 = (Keyword)cNOTEQUALEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGREATERGREATERKeyword_6_0 = (Keyword)cGREATEREnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEREnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cLOWERLOWERKeyword_7_0 = (Keyword)cLOWEREnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEROREQUALEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cGREATEROREQUALGREATEROREQUALKeyword_8_0 = (Keyword)cGREATEROREQUALEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEROREQUALEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cLOWEROREQUALLOWEROREQUALKeyword_9_0 = (Keyword)cLOWEROREQUALEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cANDANDKeyword_10_0 = (Keyword)cANDEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cORORKeyword_11_0 = (Keyword)cOREnumLiteralDeclaration_11.eContents().get(0);
		
		//enum BinaryOperatorKind returns BinaryOperatorKind:
		//                PLUS = 'PLUS' | MINUS = 'MINUS' | MULT = 'MULT' | DIV = 'DIV' | EQUAL = 'EQUAL' | NOTEQUAL = 'NOTEQUAL' | GREATER = 'GREATER' | LOWER = 'LOWER' | GREATEROREQUAL = 'GREATEROREQUAL' | LOWEROREQUAL = 'LOWEROREQUAL' | AND = 'AND' | OR = 'OR';
		public EnumRule getRule() { return rule; }
		
		//PLUS = 'PLUS' | MINUS = 'MINUS' | MULT = 'MULT' | DIV = 'DIV' | EQUAL = 'EQUAL' | NOTEQUAL = 'NOTEQUAL' | GREATER = 'GREATER' | LOWER = 'LOWER' | GREATEROREQUAL = 'GREATEROREQUAL' | LOWEROREQUAL = 'LOWEROREQUAL' | AND = 'AND' | OR = 'OR'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS = 'PLUS'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//'PLUS'
		public Keyword getPLUSPLUSKeyword_0_0() { return cPLUSPLUSKeyword_0_0; }
		
		//MINUS = 'MINUS'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//'MINUS'
		public Keyword getMINUSMINUSKeyword_1_0() { return cMINUSMINUSKeyword_1_0; }
		
		//MULT = 'MULT'
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_2() { return cMULTEnumLiteralDeclaration_2; }
		
		//'MULT'
		public Keyword getMULTMULTKeyword_2_0() { return cMULTMULTKeyword_2_0; }
		
		//DIV = 'DIV'
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_3() { return cDIVEnumLiteralDeclaration_3; }
		
		//'DIV'
		public Keyword getDIVDIVKeyword_3_0() { return cDIVDIVKeyword_3_0; }
		
		//EQUAL = 'EQUAL'
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_4() { return cEQUALEnumLiteralDeclaration_4; }
		
		//'EQUAL'
		public Keyword getEQUALEQUALKeyword_4_0() { return cEQUALEQUALKeyword_4_0; }
		
		//NOTEQUAL = 'NOTEQUAL'
		public EnumLiteralDeclaration getNOTEQUALEnumLiteralDeclaration_5() { return cNOTEQUALEnumLiteralDeclaration_5; }
		
		//'NOTEQUAL'
		public Keyword getNOTEQUALNOTEQUALKeyword_5_0() { return cNOTEQUALNOTEQUALKeyword_5_0; }
		
		//GREATER = 'GREATER'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_6() { return cGREATEREnumLiteralDeclaration_6; }
		
		//'GREATER'
		public Keyword getGREATERGREATERKeyword_6_0() { return cGREATERGREATERKeyword_6_0; }
		
		//LOWER = 'LOWER'
		public EnumLiteralDeclaration getLOWEREnumLiteralDeclaration_7() { return cLOWEREnumLiteralDeclaration_7; }
		
		//'LOWER'
		public Keyword getLOWERLOWERKeyword_7_0() { return cLOWERLOWERKeyword_7_0; }
		
		//GREATEROREQUAL = 'GREATEROREQUAL'
		public EnumLiteralDeclaration getGREATEROREQUALEnumLiteralDeclaration_8() { return cGREATEROREQUALEnumLiteralDeclaration_8; }
		
		//'GREATEROREQUAL'
		public Keyword getGREATEROREQUALGREATEROREQUALKeyword_8_0() { return cGREATEROREQUALGREATEROREQUALKeyword_8_0; }
		
		//LOWEROREQUAL = 'LOWEROREQUAL'
		public EnumLiteralDeclaration getLOWEROREQUALEnumLiteralDeclaration_9() { return cLOWEROREQUALEnumLiteralDeclaration_9; }
		
		//'LOWEROREQUAL'
		public Keyword getLOWEROREQUALLOWEROREQUALKeyword_9_0() { return cLOWEROREQUALLOWEROREQUALKeyword_9_0; }
		
		//AND = 'AND'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_10() { return cANDEnumLiteralDeclaration_10; }
		
		//'AND'
		public Keyword getANDANDKeyword_10_0() { return cANDANDKeyword_10_0; }
		
		//OR = 'OR'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_11() { return cOREnumLiteralDeclaration_11; }
		
		//'OR'
		public Keyword getORORKeyword_11_0() { return cORORKeyword_11_0; }
	}
	public class UnaryOperatorKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.ql.QL.UnaryOperatorKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNARYMINUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNARYMINUSUNARYMINUSKeyword_0_0 = (Keyword)cUNARYMINUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTNOTKeyword_1_0 = (Keyword)cNOTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UnaryOperatorKind returns UnaryOperatorKind:
		//                UNARYMINUS = 'UNARYMINUS' | NOT = 'NOT';
		public EnumRule getRule() { return rule; }
		
		//UNARYMINUS = 'UNARYMINUS' | NOT = 'NOT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNARYMINUS = 'UNARYMINUS'
		public EnumLiteralDeclaration getUNARYMINUSEnumLiteralDeclaration_0() { return cUNARYMINUSEnumLiteralDeclaration_0; }
		
		//'UNARYMINUS'
		public Keyword getUNARYMINUSUNARYMINUSKeyword_0_0() { return cUNARYMINUSUNARYMINUSKeyword_0_0; }
		
		//NOT = 'NOT'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_1() { return cNOTEnumLiteralDeclaration_1; }
		
		//'NOT'
		public Keyword getNOTNOTKeyword_1_0() { return cNOTNOTKeyword_1_0; }
	}
	
	private final QLModelElements pQLModel;
	private final ValueTypeElements pValueType;
	private final ExpressionElements pExpression;
	private final ValueElements pValue;
	private final FormElements pForm;
	private final DefinitionGroupElements pDefinitionGroup;
	private final EBooleanElements pEBoolean;
	private final EDateElements pEDate;
	private final EStringElements pEString;
	private final QuestionGroupElements pQuestionGroup;
	private final QuestionElements pQuestion;
	private final ValueType_ImplElements pValueType_Impl;
	private final BasicBinaryExpressionElements pBasicBinaryExpression;
	private final ConstantCallElements pConstantCall;
	private final BasicUnaryExpressionElements pBasicUnaryExpression;
	private final QuestionCallElements pQuestionCall;
	private final BooleanValueTypeElements pBooleanValueType;
	private final IntegerValueTypeElements pIntegerValueType;
	private final DecimalValueTypeElements pDecimalValueType;
	private final DateValueTypeElements pDateValueType;
	private final EnumerationValueTypeElements pEnumerationValueType;
	private final StringValueTypeElements pStringValueType;
	private final EIntElements pEInt;
	private final EnumerationLiteralElements pEnumerationLiteral;
	private final BinaryOperatorKindElements eBinaryOperatorKind;
	private final IntegerValueElements pIntegerValue;
	private final StringValueElements pStringValue;
	private final BooleanValueElements pBooleanValue;
	private final DateValueElements pDateValue;
	private final DecimalValueElements pDecimalValue;
	private final EFloatElements pEFloat;
	private final UnaryOperatorKindElements eUnaryOperatorKind;
	private final QuestionDefinitionElements pQuestionDefinition;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQLModel = new QLModelElements();
		this.pValueType = new ValueTypeElements();
		this.pExpression = new ExpressionElements();
		this.pValue = new ValueElements();
		this.pForm = new FormElements();
		this.pDefinitionGroup = new DefinitionGroupElements();
		this.pEBoolean = new EBooleanElements();
		this.pEDate = new EDateElements();
		this.pEString = new EStringElements();
		this.pQuestionGroup = new QuestionGroupElements();
		this.pQuestion = new QuestionElements();
		this.pValueType_Impl = new ValueType_ImplElements();
		this.pBasicBinaryExpression = new BasicBinaryExpressionElements();
		this.pConstantCall = new ConstantCallElements();
		this.pBasicUnaryExpression = new BasicUnaryExpressionElements();
		this.pQuestionCall = new QuestionCallElements();
		this.pBooleanValueType = new BooleanValueTypeElements();
		this.pIntegerValueType = new IntegerValueTypeElements();
		this.pDecimalValueType = new DecimalValueTypeElements();
		this.pDateValueType = new DateValueTypeElements();
		this.pEnumerationValueType = new EnumerationValueTypeElements();
		this.pStringValueType = new StringValueTypeElements();
		this.pEInt = new EIntElements();
		this.pEnumerationLiteral = new EnumerationLiteralElements();
		this.eBinaryOperatorKind = new BinaryOperatorKindElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pStringValue = new StringValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pDateValue = new DateValueElements();
		this.pDecimalValue = new DecimalValueElements();
		this.pEFloat = new EFloatElements();
		this.eUnaryOperatorKind = new UnaryOperatorKindElements();
		this.pQuestionDefinition = new QuestionDefinitionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.ql.QL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//QLModel returns QLModel:
	//    {QLModel}
	//    (canSubmit?='canSubmit')?
	//    'QLModel'
	//    '{'
	//        ('submitDate' submitDate=EDate)?
	//        ('forms' '{' forms+=Form ( "," forms+=Form)* '}' )?
	//        ('definitionGroup' '{' definitionGroup+=DefinitionGroup ( "," definitionGroup+=DefinitionGroup)* '}' )?
	//    '}';
	public QLModelElements getQLModelAccess() {
		return pQLModel;
	}
	
	public ParserRule getQLModelRule() {
		return getQLModelAccess().getRule();
	}
	
	//ValueType returns ValueType:
	//    ValueType_Impl | BooleanValueType | IntegerValueType | DecimalValueType | DateValueType | EnumerationValueType | StringValueType;
	public ValueTypeElements getValueTypeAccess() {
		return pValueType;
	}
	
	public ParserRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//Expression returns Expression:
	//    BasicBinaryExpression | ConstantCall | BasicUnaryExpression | QuestionCall;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Value returns Value:
	//    IntegerValue | StringValue | BooleanValue | DateValue | DecimalValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Form returns Form:
	//    'Form'
	//    name=EString
	//    '{'
	//        'questionGroup' questionGroup=QuestionGroup
	//    '}';
	public FormElements getFormAccess() {
		return pForm;
	}
	
	public ParserRule getFormRule() {
		return getFormAccess().getRule();
	}
	
	//DefinitionGroup returns DefinitionGroup:
	//    {DefinitionGroup}
	//    'definitions'
	//    '{'
	//        ( questionDefinitions+=QuestionDefinition | dataTypes+=ValueType )*
	//        //('dataTypes' '{' dataTypes+=ValueType ( "," dataTypes+=ValueType)* '}' )?
	//        //('questionDefinitions' '{' questionDefinitions+=QuestionDefinition ( "," questionDefinitions+=QuestionDefinition)* '}' )?
	//    '}';
	public DefinitionGroupElements getDefinitionGroupAccess() {
		return pDefinitionGroup;
	}
	
	public ParserRule getDefinitionGroupRule() {
		return getDefinitionGroupAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EDate returns ecore::EDate:
	//    'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;
	public EDateElements getEDateAccess() {
		return pEDate;
	}
	
	public ParserRule getEDateRule() {
		return getEDateAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//QuestionGroup returns QuestionGroup:
	//    {QuestionGroup}
	//    'QuestionGroup'
	//    '{'
	//        ('guard' guard=Expression)?
	//        ('questionGroups' '{' questionGroups+=QuestionGroup ( "," questionGroups+=QuestionGroup)* '}' )?
	//        ('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	//    '}';
	public QuestionGroupElements getQuestionGroupAccess() {
		return pQuestionGroup;
	}
	
	public ParserRule getQuestionGroupRule() {
		return getQuestionGroupAccess().getRule();
	}
	
	//Question returns Question:
	//    'Question'
	//    '{'
	//        'questionDefinition' questionDefinition=[QuestionDefinition|EString]
	//    '}';
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//ValueType_Impl returns ValueType:
	//    {ValueType}
	//    'ValueType'
	//    name=EString
	//    '{'
	//        ('unit' unit=EString)?
	//    '}';
	public ValueType_ImplElements getValueType_ImplAccess() {
		return pValueType_Impl;
	}
	
	public ParserRule getValueType_ImplRule() {
		return getValueType_ImplAccess().getRule();
	}
	
	//BasicBinaryExpression returns BasicBinaryExpression:
	//    'BasicBinaryExpression'
	//    '{'
	//        'operator' operator=BinaryOperatorKind
	//        ('resultType' resultType=[ValueType|EString])?
	//        'lhsOperand' lhsOperand=Expression
	//        'rhsOperand' rhsOperand=Expression
	//    '}';
	public BasicBinaryExpressionElements getBasicBinaryExpressionAccess() {
		return pBasicBinaryExpression;
	}
	
	public ParserRule getBasicBinaryExpressionRule() {
		return getBasicBinaryExpressionAccess().getRule();
	}
	
	//ConstantCall returns ConstantCall:
	//    {ConstantCall}
	//    'ConstantCall'
	//    '{'
	//        ('resultType' resultType=[ValueType|EString])?
	//        ('value' value=Value)?
	//    '}';
	public ConstantCallElements getConstantCallAccess() {
		return pConstantCall;
	}
	
	public ParserRule getConstantCallRule() {
		return getConstantCallAccess().getRule();
	}
	
	//BasicUnaryExpression returns BasicUnaryExpression:
	//    'BasicUnaryExpression'
	//    '{'
	//        ('operator' operator=UnaryOperatorKind)?
	//        ('resultType' resultType=[ValueType|EString])?
	//        'operand' operand=Expression
	//    '}';
	public BasicUnaryExpressionElements getBasicUnaryExpressionAccess() {
		return pBasicUnaryExpression;
	}
	
	public ParserRule getBasicUnaryExpressionRule() {
		return getBasicUnaryExpressionAccess().getRule();
	}
	
	//QuestionCall returns QuestionCall:
	//    'QuestionCall'
	//    '{'
	//        ('resultType' resultType=[ValueType|EString])?
	//        'question' question=[QuestionDefinition|EString]
	//    '}';
	public QuestionCallElements getQuestionCallAccess() {
		return pQuestionCall;
	}
	
	public ParserRule getQuestionCallRule() {
		return getQuestionCallAccess().getRule();
	}
	
	//BooleanValueType returns BooleanValueType:
	//    {BooleanValueType}
	//    'BooleanValueType'
	//    name=EString
	//    '{'
	//        ('unit' unit=EString)?
	//    '}';
	public BooleanValueTypeElements getBooleanValueTypeAccess() {
		return pBooleanValueType;
	}
	
	public ParserRule getBooleanValueTypeRule() {
		return getBooleanValueTypeAccess().getRule();
	}
	
	//IntegerValueType returns IntegerValueType:
	//    {IntegerValueType}
	//    'IntegerValueType'
	//    name=EString
	//    '{'
	//        ('unit' unit=EString)?
	//        ('min' min=EInt)?
	//        ('max' max=EInt)?
	//    '}';
	public IntegerValueTypeElements getIntegerValueTypeAccess() {
		return pIntegerValueType;
	}
	
	public ParserRule getIntegerValueTypeRule() {
		return getIntegerValueTypeAccess().getRule();
	}
	
	//DecimalValueType returns DecimalValueType:
	//    {DecimalValueType}
	//    'DecimalValueType'
	//    name=EString
	//    '{'
	//        ('unit' unit=EString)?
	//    '}';
	public DecimalValueTypeElements getDecimalValueTypeAccess() {
		return pDecimalValueType;
	}
	
	public ParserRule getDecimalValueTypeRule() {
		return getDecimalValueTypeAccess().getRule();
	}
	
	//DateValueType returns DateValueType:
	//    {DateValueType}
	//    'DateValueType'
	//    name=EString
	//    '{'
	//        ('unit' unit=EString)?
	//    '}';
	public DateValueTypeElements getDateValueTypeAccess() {
		return pDateValueType;
	}
	
	public ParserRule getDateValueTypeRule() {
		return getDateValueTypeAccess().getRule();
	}
	
	//EnumerationValueType returns EnumerationValueType:
	//    {EnumerationValueType}
	//    'EnumerationValueType'
	//    name=EString
	//    '{'
	//        ('unit' unit=EString)?
	//        ('enumerationLiterals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
	//    '}';
	public EnumerationValueTypeElements getEnumerationValueTypeAccess() {
		return pEnumerationValueType;
	}
	
	public ParserRule getEnumerationValueTypeRule() {
		return getEnumerationValueTypeAccess().getRule();
	}
	
	//StringValueType returns StringValueType:
	//    {StringValueType}
	//    'StringValueType'
	//    name=EString
	//    '{'
	//        ('unit' unit=EString)?
	//    '}';
	public StringValueTypeElements getStringValueTypeAccess() {
		return pStringValueType;
	}
	
	public ParserRule getStringValueTypeRule() {
		return getStringValueTypeAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EnumerationLiteral returns EnumerationLiteral:
	//    {EnumerationLiteral}
	//    'EnumerationLiteral'
	//    name=EString;
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return pEnumerationLiteral;
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}
	
	//enum BinaryOperatorKind returns BinaryOperatorKind:
	//                PLUS = 'PLUS' | MINUS = 'MINUS' | MULT = 'MULT' | DIV = 'DIV' | EQUAL = 'EQUAL' | NOTEQUAL = 'NOTEQUAL' | GREATER = 'GREATER' | LOWER = 'LOWER' | GREATEROREQUAL = 'GREATEROREQUAL' | LOWEROREQUAL = 'LOWEROREQUAL' | AND = 'AND' | OR = 'OR';
	public BinaryOperatorKindElements getBinaryOperatorKindAccess() {
		return eBinaryOperatorKind;
	}
	
	public EnumRule getBinaryOperatorKindRule() {
		return getBinaryOperatorKindAccess().getRule();
	}
	
	//IntegerValue returns IntegerValue:
	//    {IntegerValue}
	//    'IntegerValue'
	//    '{'
	//        ('intValue' intValue=EInt)?
	//    '}';
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}
	
	//StringValue returns StringValue:
	//    {StringValue}
	//    'StringValue'
	//    '{'
	//        ('stringValue' stringValue=EString)?
	//    '}';
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//BooleanValue returns BooleanValue:
	//    {BooleanValue}
	//    (booleanValue?='booleanValue')?
	//    'BooleanValue'
	//    ;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//DateValue returns DateValue:
	//    {DateValue}
	//    'DateValue'
	//    '{'
	//        ('dateValue' dateValue=EDate)?
	//    '}';
	public DateValueElements getDateValueAccess() {
		return pDateValue;
	}
	
	public ParserRule getDateValueRule() {
		return getDateValueAccess().getRule();
	}
	
	//DecimalValue returns DecimalValue:
	//    {DecimalValue}
	//    'DecimalValue'
	//    '{'
	//        ('decimalValue' decimalValue=EFloat)?
	//    '}';
	public DecimalValueElements getDecimalValueAccess() {
		return pDecimalValue;
	}
	
	public ParserRule getDecimalValueRule() {
		return getDecimalValueAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//enum UnaryOperatorKind returns UnaryOperatorKind:
	//                UNARYMINUS = 'UNARYMINUS' | NOT = 'NOT';
	public UnaryOperatorKindElements getUnaryOperatorKindAccess() {
		return eUnaryOperatorKind;
	}
	
	public EnumRule getUnaryOperatorKindRule() {
		return getUnaryOperatorKindAccess().getRule();
	}
	
	//QuestionDefinition returns QuestionDefinition:
	//    (isDisplayed?='isDisplayed')?
	//    (isMandatory?='isMandatory')?
	//    'QuestionDefinition'
	//    name=EString
	//    '{'
	//        ('label' label=EString)?
	//        'dataType' dataType=[ValueType|EString]
	//        ('computedExpression' computedExpression=Expression)?
	//        ('currentValue' currentValue=Value)?
	//    '}';
	public QuestionDefinitionElements getQuestionDefinitionAccess() {
		return pQuestionDefinition;
	}
	
	public ParserRule getQuestionDefinitionRule() {
		return getQuestionDefinitionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
