/*
 * generated by Xtext 2.35.0
 */
grammar InternalQL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.gemoc.ql.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.gemoc.ql.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.gemoc.ql.services.QLGrammarAccess;

}

@parser::members {

 	private QLGrammarAccess grammarAccess;

    public InternalQLParser(TokenStream input, QLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "QLModel";
   	}

   	@Override
   	protected QLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleQLModel
entryRuleQLModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQLModelRule()); }
	iv_ruleQLModel=ruleQLModel
	{ $current=$iv_ruleQLModel.current; }
	EOF;

// Rule QLModel
ruleQLModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQLModelAccess().getQLModelAction_0(),
					$current);
			}
		)
		(
			(
				lv_canSubmit_1_0='canSubmit'
				{
					newLeafNode(lv_canSubmit_1_0, grammarAccess.getQLModelAccess().getCanSubmitCanSubmitKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQLModelRule());
					}
					setWithLastConsumed($current, "canSubmit", lv_canSubmit_1_0 != null, "canSubmit");
				}
			)
		)?
		otherlv_2='QLModel'
		{
			newLeafNode(otherlv_2, grammarAccess.getQLModelAccess().getQLModelKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getQLModelAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='submitDate'
			{
				newLeafNode(otherlv_4, grammarAccess.getQLModelAccess().getSubmitDateKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQLModelAccess().getSubmitDateEDateParserRuleCall_4_1_0());
					}
					lv_submitDate_5_0=ruleEDate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQLModelRule());
						}
						set(
							$current,
							"submitDate",
							lv_submitDate_5_0,
							"org.gemoc.ql.QL.EDate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='forms'
			{
				newLeafNode(otherlv_6, grammarAccess.getQLModelAccess().getFormsKeyword_5_0());
			}
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getQLModelAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQLModelAccess().getFormsFormParserRuleCall_5_2_0());
					}
					lv_forms_8_0=ruleForm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQLModelRule());
						}
						add(
							$current,
							"forms",
							lv_forms_8_0,
							"org.gemoc.ql.QL.Form");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getQLModelAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getQLModelAccess().getFormsFormParserRuleCall_5_3_1_0());
						}
						lv_forms_10_0=ruleForm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getQLModelRule());
							}
							add(
								$current,
								"forms",
								lv_forms_10_0,
								"org.gemoc.ql.QL.Form");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getQLModelAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		(
			otherlv_12='definitionGroup'
			{
				newLeafNode(otherlv_12, grammarAccess.getQLModelAccess().getDefinitionGroupKeyword_6_0());
			}
			otherlv_13='{'
			{
				newLeafNode(otherlv_13, grammarAccess.getQLModelAccess().getLeftCurlyBracketKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQLModelAccess().getDefinitionGroupDefinitionGroupParserRuleCall_6_2_0());
					}
					lv_definitionGroup_14_0=ruleDefinitionGroup
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQLModelRule());
						}
						add(
							$current,
							"definitionGroup",
							lv_definitionGroup_14_0,
							"org.gemoc.ql.QL.DefinitionGroup");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_15=','
				{
					newLeafNode(otherlv_15, grammarAccess.getQLModelAccess().getCommaKeyword_6_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getQLModelAccess().getDefinitionGroupDefinitionGroupParserRuleCall_6_3_1_0());
						}
						lv_definitionGroup_16_0=ruleDefinitionGroup
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getQLModelRule());
							}
							add(
								$current,
								"definitionGroup",
								lv_definitionGroup_16_0,
								"org.gemoc.ql.QL.DefinitionGroup");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_17='}'
			{
				newLeafNode(otherlv_17, grammarAccess.getQLModelAccess().getRightCurlyBracketKeyword_6_4());
			}
		)?
		otherlv_18='}'
		{
			newLeafNode(otherlv_18, grammarAccess.getQLModelAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleValueType
entryRuleValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueTypeRule()); }
	iv_ruleValueType=ruleValueType
	{ $current=$iv_ruleValueType.current; }
	EOF;

// Rule ValueType
ruleValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getValueType_ImplParserRuleCall_0());
		}
		this_ValueType_Impl_0=ruleValueType_Impl
		{
			$current = $this_ValueType_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getBooleanValueTypeParserRuleCall_1());
		}
		this_BooleanValueType_1=ruleBooleanValueType
		{
			$current = $this_BooleanValueType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getIntegerValueTypeParserRuleCall_2());
		}
		this_IntegerValueType_2=ruleIntegerValueType
		{
			$current = $this_IntegerValueType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getDecimalValueTypeParserRuleCall_3());
		}
		this_DecimalValueType_3=ruleDecimalValueType
		{
			$current = $this_DecimalValueType_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getDateValueTypeParserRuleCall_4());
		}
		this_DateValueType_4=ruleDateValueType
		{
			$current = $this_DateValueType_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getEnumerationValueTypeParserRuleCall_5());
		}
		this_EnumerationValueType_5=ruleEnumerationValueType
		{
			$current = $this_EnumerationValueType_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getStringValueTypeParserRuleCall_6());
		}
		this_StringValueType_6=ruleStringValueType
		{
			$current = $this_StringValueType_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBasicBinaryExpressionParserRuleCall_0());
		}
		this_BasicBinaryExpression_0=ruleBasicBinaryExpression
		{
			$current = $this_BasicBinaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getConstantCallParserRuleCall_1());
		}
		this_ConstantCall_1=ruleConstantCall
		{
			$current = $this_ConstantCall_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBasicUnaryExpressionParserRuleCall_2());
		}
		this_BasicUnaryExpression_2=ruleBasicUnaryExpression
		{
			$current = $this_BasicUnaryExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getQuestionCallParserRuleCall_3());
		}
		this_QuestionCall_3=ruleQuestionCall
		{
			$current = $this_QuestionCall_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueAccess().getIntegerValueParserRuleCall_0());
		}
		this_IntegerValue_0=ruleIntegerValue
		{
			$current = $this_IntegerValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getStringValueParserRuleCall_1());
		}
		this_StringValue_1=ruleStringValue
		{
			$current = $this_StringValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_2());
		}
		this_BooleanValue_2=ruleBooleanValue
		{
			$current = $this_BooleanValue_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getDateValueParserRuleCall_3());
		}
		this_DateValue_3=ruleDateValue
		{
			$current = $this_DateValue_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getDecimalValueParserRuleCall_4());
		}
		this_DecimalValue_4=ruleDecimalValue
		{
			$current = $this_DecimalValue_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleForm
entryRuleForm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormRule()); }
	iv_ruleForm=ruleForm
	{ $current=$iv_ruleForm.current; }
	EOF;

// Rule Form
ruleForm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Form'
		{
			newLeafNode(otherlv_0, grammarAccess.getFormAccess().getFormKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFormAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getFormAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='questionGroup'
		{
			newLeafNode(otherlv_3, grammarAccess.getFormAccess().getQuestionGroupKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFormAccess().getQuestionGroupQuestionGroupParserRuleCall_4_0());
				}
				lv_questionGroup_4_0=ruleQuestionGroup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormRule());
					}
					set(
						$current,
						"questionGroup",
						lv_questionGroup_4_0,
						"org.gemoc.ql.QL.QuestionGroup");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getFormAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDefinitionGroup
entryRuleDefinitionGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionGroupRule()); }
	iv_ruleDefinitionGroup=ruleDefinitionGroup
	{ $current=$iv_ruleDefinitionGroup.current; }
	EOF;

// Rule DefinitionGroup
ruleDefinitionGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDefinitionGroupAccess().getDefinitionGroupAction_0(),
					$current);
			}
		)
		otherlv_1='DefinitionGroup'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefinitionGroupAccess().getDefinitionGroupKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDefinitionGroupAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='dataTypes'
			{
				newLeafNode(otherlv_3, grammarAccess.getDefinitionGroupAccess().getDataTypesKeyword_3_0());
			}
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getDefinitionGroupAccess().getLeftCurlyBracketKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionGroupAccess().getDataTypesValueTypeParserRuleCall_3_2_0());
					}
					lv_dataTypes_5_0=ruleValueType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionGroupRule());
						}
						add(
							$current,
							"dataTypes",
							lv_dataTypes_5_0,
							"org.gemoc.ql.QL.ValueType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getDefinitionGroupAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDefinitionGroupAccess().getDataTypesValueTypeParserRuleCall_3_3_1_0());
						}
						lv_dataTypes_7_0=ruleValueType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDefinitionGroupRule());
							}
							add(
								$current,
								"dataTypes",
								lv_dataTypes_7_0,
								"org.gemoc.ql.QL.ValueType");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getDefinitionGroupAccess().getRightCurlyBracketKeyword_3_4());
			}
		)?
		(
			otherlv_9='questionDefinitions'
			{
				newLeafNode(otherlv_9, grammarAccess.getDefinitionGroupAccess().getQuestionDefinitionsKeyword_4_0());
			}
			otherlv_10='{'
			{
				newLeafNode(otherlv_10, grammarAccess.getDefinitionGroupAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionGroupAccess().getQuestionDefinitionsQuestionDefinitionParserRuleCall_4_2_0());
					}
					lv_questionDefinitions_11_0=ruleQuestionDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionGroupRule());
						}
						add(
							$current,
							"questionDefinitions",
							lv_questionDefinitions_11_0,
							"org.gemoc.ql.QL.QuestionDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12=','
				{
					newLeafNode(otherlv_12, grammarAccess.getDefinitionGroupAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDefinitionGroupAccess().getQuestionDefinitionsQuestionDefinitionParserRuleCall_4_3_1_0());
						}
						lv_questionDefinitions_13_0=ruleQuestionDefinition
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDefinitionGroupRule());
							}
							add(
								$current,
								"questionDefinitions",
								lv_questionDefinitions_13_0,
								"org.gemoc.ql.QL.QuestionDefinition");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_14='}'
			{
				newLeafNode(otherlv_14, grammarAccess.getDefinitionGroupAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		otherlv_15='}'
		{
			newLeafNode(otherlv_15, grammarAccess.getDefinitionGroupAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEDate
entryRuleEDate returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDateRule()); }
	iv_ruleEDate=ruleEDate
	{ $current=$iv_ruleEDate.current.getText(); }
	EOF;

// Rule EDate
ruleEDate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='EDate'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEDateAccess().getEDateKeyword());
	}
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleQuestionGroup
entryRuleQuestionGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionGroupRule()); }
	iv_ruleQuestionGroup=ruleQuestionGroup
	{ $current=$iv_ruleQuestionGroup.current; }
	EOF;

// Rule QuestionGroup
ruleQuestionGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQuestionGroupAccess().getQuestionGroupAction_0(),
					$current);
			}
		)
		otherlv_1='QuestionGroup'
		{
			newLeafNode(otherlv_1, grammarAccess.getQuestionGroupAccess().getQuestionGroupKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getQuestionGroupAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='guard'
			{
				newLeafNode(otherlv_3, grammarAccess.getQuestionGroupAccess().getGuardKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionGroupAccess().getGuardExpressionParserRuleCall_3_1_0());
					}
					lv_guard_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionGroupRule());
						}
						set(
							$current,
							"guard",
							lv_guard_4_0,
							"org.gemoc.ql.QL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='questionGroups'
			{
				newLeafNode(otherlv_5, grammarAccess.getQuestionGroupAccess().getQuestionGroupsKeyword_4_0());
			}
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getQuestionGroupAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionGroupAccess().getQuestionGroupsQuestionGroupParserRuleCall_4_2_0());
					}
					lv_questionGroups_7_0=ruleQuestionGroup
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionGroupRule());
						}
						add(
							$current,
							"questionGroups",
							lv_questionGroups_7_0,
							"org.gemoc.ql.QL.QuestionGroup");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getQuestionGroupAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getQuestionGroupAccess().getQuestionGroupsQuestionGroupParserRuleCall_4_3_1_0());
						}
						lv_questionGroups_9_0=ruleQuestionGroup
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getQuestionGroupRule());
							}
							add(
								$current,
								"questionGroups",
								lv_questionGroups_9_0,
								"org.gemoc.ql.QL.QuestionGroup");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getQuestionGroupAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		(
			otherlv_11='questions'
			{
				newLeafNode(otherlv_11, grammarAccess.getQuestionGroupAccess().getQuestionsKeyword_5_0());
			}
			otherlv_12='{'
			{
				newLeafNode(otherlv_12, grammarAccess.getQuestionGroupAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionGroupAccess().getQuestionsQuestionParserRuleCall_5_2_0());
					}
					lv_questions_13_0=ruleQuestion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionGroupRule());
						}
						add(
							$current,
							"questions",
							lv_questions_13_0,
							"org.gemoc.ql.QL.Question");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_14=','
				{
					newLeafNode(otherlv_14, grammarAccess.getQuestionGroupAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getQuestionGroupAccess().getQuestionsQuestionParserRuleCall_5_3_1_0());
						}
						lv_questions_15_0=ruleQuestion
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getQuestionGroupRule());
							}
							add(
								$current,
								"questions",
								lv_questions_15_0,
								"org.gemoc.ql.QL.Question");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_16='}'
			{
				newLeafNode(otherlv_16, grammarAccess.getQuestionGroupAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		otherlv_17='}'
		{
			newLeafNode(otherlv_17, grammarAccess.getQuestionGroupAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	iv_ruleQuestion=ruleQuestion
	{ $current=$iv_ruleQuestion.current; }
	EOF;

// Rule Question
ruleQuestion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Question'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuestionAccess().getQuestionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='questionDefinition'
		{
			newLeafNode(otherlv_2, grammarAccess.getQuestionAccess().getQuestionDefinitionKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuestionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getQuestionAccess().getQuestionDefinitionQuestionDefinitionCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleValueType_Impl
entryRuleValueType_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueType_ImplRule()); }
	iv_ruleValueType_Impl=ruleValueType_Impl
	{ $current=$iv_ruleValueType_Impl.current; }
	EOF;

// Rule ValueType_Impl
ruleValueType_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getValueType_ImplAccess().getValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='ValueType'
		{
			newLeafNode(otherlv_1, grammarAccess.getValueType_ImplAccess().getValueTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueType_ImplAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueType_ImplRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getValueType_ImplAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='unit'
			{
				newLeafNode(otherlv_4, grammarAccess.getValueType_ImplAccess().getUnitKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getValueType_ImplAccess().getUnitEStringParserRuleCall_4_1_0());
					}
					lv_unit_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueType_ImplRule());
						}
						set(
							$current,
							"unit",
							lv_unit_5_0,
							"org.gemoc.ql.QL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getValueType_ImplAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleBasicBinaryExpression
entryRuleBasicBinaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicBinaryExpressionRule()); }
	iv_ruleBasicBinaryExpression=ruleBasicBinaryExpression
	{ $current=$iv_ruleBasicBinaryExpression.current; }
	EOF;

// Rule BasicBinaryExpression
ruleBasicBinaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BasicBinaryExpression'
		{
			newLeafNode(otherlv_0, grammarAccess.getBasicBinaryExpressionAccess().getBasicBinaryExpressionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBasicBinaryExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='operator'
		{
			newLeafNode(otherlv_2, grammarAccess.getBasicBinaryExpressionAccess().getOperatorKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicBinaryExpressionAccess().getOperatorBinaryOperatorKindEnumRuleCall_3_0());
				}
				lv_operator_3_0=ruleBinaryOperatorKind
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicBinaryExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_3_0,
						"org.gemoc.ql.QL.BinaryOperatorKind");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='resultType'
			{
				newLeafNode(otherlv_4, grammarAccess.getBasicBinaryExpressionAccess().getResultTypeKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBasicBinaryExpressionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getBasicBinaryExpressionAccess().getResultTypeValueTypeCrossReference_4_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='lhsOperand'
		{
			newLeafNode(otherlv_6, grammarAccess.getBasicBinaryExpressionAccess().getLhsOperandKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicBinaryExpressionAccess().getLhsOperandExpressionParserRuleCall_6_0());
				}
				lv_lhsOperand_7_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicBinaryExpressionRule());
					}
					set(
						$current,
						"lhsOperand",
						lv_lhsOperand_7_0,
						"org.gemoc.ql.QL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='rhsOperand'
		{
			newLeafNode(otherlv_8, grammarAccess.getBasicBinaryExpressionAccess().getRhsOperandKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicBinaryExpressionAccess().getRhsOperandExpressionParserRuleCall_8_0());
				}
				lv_rhsOperand_9_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicBinaryExpressionRule());
					}
					set(
						$current,
						"rhsOperand",
						lv_rhsOperand_9_0,
						"org.gemoc.ql.QL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getBasicBinaryExpressionAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleConstantCall
entryRuleConstantCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantCallRule()); }
	iv_ruleConstantCall=ruleConstantCall
	{ $current=$iv_ruleConstantCall.current; }
	EOF;

// Rule ConstantCall
ruleConstantCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstantCallAccess().getConstantCallAction_0(),
					$current);
			}
		)
		otherlv_1='ConstantCall'
		{
			newLeafNode(otherlv_1, grammarAccess.getConstantCallAccess().getConstantCallKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstantCallAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='resultType'
			{
				newLeafNode(otherlv_3, grammarAccess.getConstantCallAccess().getResultTypeKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantCallRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getConstantCallAccess().getResultTypeValueTypeCrossReference_3_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='value'
			{
				newLeafNode(otherlv_5, grammarAccess.getConstantCallAccess().getValueKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantCallAccess().getValueValueParserRuleCall_4_1_0());
					}
					lv_value_6_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantCallRule());
						}
						set(
							$current,
							"value",
							lv_value_6_0,
							"org.gemoc.ql.QL.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getConstantCallAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleBasicUnaryExpression
entryRuleBasicUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicUnaryExpressionRule()); }
	iv_ruleBasicUnaryExpression=ruleBasicUnaryExpression
	{ $current=$iv_ruleBasicUnaryExpression.current; }
	EOF;

// Rule BasicUnaryExpression
ruleBasicUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BasicUnaryExpression'
		{
			newLeafNode(otherlv_0, grammarAccess.getBasicUnaryExpressionAccess().getBasicUnaryExpressionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBasicUnaryExpressionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='operator'
			{
				newLeafNode(otherlv_2, grammarAccess.getBasicUnaryExpressionAccess().getOperatorKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBasicUnaryExpressionAccess().getOperatorUnaryOperatorKindEnumRuleCall_2_1_0());
					}
					lv_operator_3_0=ruleUnaryOperatorKind
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBasicUnaryExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_3_0,
							"org.gemoc.ql.QL.UnaryOperatorKind");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_4='resultType'
			{
				newLeafNode(otherlv_4, grammarAccess.getBasicUnaryExpressionAccess().getResultTypeKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBasicUnaryExpressionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getBasicUnaryExpressionAccess().getResultTypeValueTypeCrossReference_3_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='operand'
		{
			newLeafNode(otherlv_6, grammarAccess.getBasicUnaryExpressionAccess().getOperandKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicUnaryExpressionAccess().getOperandExpressionParserRuleCall_5_0());
				}
				lv_operand_7_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicUnaryExpressionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_7_0,
						"org.gemoc.ql.QL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getBasicUnaryExpressionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleQuestionCall
entryRuleQuestionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionCallRule()); }
	iv_ruleQuestionCall=ruleQuestionCall
	{ $current=$iv_ruleQuestionCall.current; }
	EOF;

// Rule QuestionCall
ruleQuestionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='QuestionCall'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuestionCallAccess().getQuestionCallKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getQuestionCallAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='resultType'
			{
				newLeafNode(otherlv_2, grammarAccess.getQuestionCallAccess().getResultTypeKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuestionCallRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getQuestionCallAccess().getResultTypeValueTypeCrossReference_2_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='question'
		{
			newLeafNode(otherlv_4, grammarAccess.getQuestionCallAccess().getQuestionKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuestionCallRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getQuestionCallAccess().getQuestionQuestionDefinitionCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getQuestionCallAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleBooleanValueType
entryRuleBooleanValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValueTypeRule()); }
	iv_ruleBooleanValueType=ruleBooleanValueType
	{ $current=$iv_ruleBooleanValueType.current; }
	EOF;

// Rule BooleanValueType
ruleBooleanValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanValueTypeAccess().getBooleanValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='BooleanValueType'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanValueTypeAccess().getBooleanValueTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanValueTypeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanValueTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getBooleanValueTypeAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='unit'
			{
				newLeafNode(otherlv_4, grammarAccess.getBooleanValueTypeAccess().getUnitKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanValueTypeAccess().getUnitEStringParserRuleCall_4_1_0());
					}
					lv_unit_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanValueTypeRule());
						}
						set(
							$current,
							"unit",
							lv_unit_5_0,
							"org.gemoc.ql.QL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getBooleanValueTypeAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleIntegerValueType
entryRuleIntegerValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerValueTypeRule()); }
	iv_ruleIntegerValueType=ruleIntegerValueType
	{ $current=$iv_ruleIntegerValueType.current; }
	EOF;

// Rule IntegerValueType
ruleIntegerValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerValueTypeAccess().getIntegerValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='IntegerValueType'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerValueTypeAccess().getIntegerValueTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerValueTypeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerValueTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getIntegerValueTypeAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='unit'
			{
				newLeafNode(otherlv_4, grammarAccess.getIntegerValueTypeAccess().getUnitKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntegerValueTypeAccess().getUnitEStringParserRuleCall_4_1_0());
					}
					lv_unit_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntegerValueTypeRule());
						}
						set(
							$current,
							"unit",
							lv_unit_5_0,
							"org.gemoc.ql.QL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='min'
			{
				newLeafNode(otherlv_6, grammarAccess.getIntegerValueTypeAccess().getMinKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntegerValueTypeAccess().getMinEIntParserRuleCall_5_1_0());
					}
					lv_min_7_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntegerValueTypeRule());
						}
						set(
							$current,
							"min",
							lv_min_7_0,
							"org.gemoc.ql.QL.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_8='max'
			{
				newLeafNode(otherlv_8, grammarAccess.getIntegerValueTypeAccess().getMaxKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntegerValueTypeAccess().getMaxEIntParserRuleCall_6_1_0());
					}
					lv_max_9_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntegerValueTypeRule());
						}
						set(
							$current,
							"max",
							lv_max_9_0,
							"org.gemoc.ql.QL.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getIntegerValueTypeAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleDecimalValueType
entryRuleDecimalValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecimalValueTypeRule()); }
	iv_ruleDecimalValueType=ruleDecimalValueType
	{ $current=$iv_ruleDecimalValueType.current; }
	EOF;

// Rule DecimalValueType
ruleDecimalValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDecimalValueTypeAccess().getDecimalValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='DecimalValueType'
		{
			newLeafNode(otherlv_1, grammarAccess.getDecimalValueTypeAccess().getDecimalValueTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDecimalValueTypeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDecimalValueTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getDecimalValueTypeAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='unit'
			{
				newLeafNode(otherlv_4, grammarAccess.getDecimalValueTypeAccess().getUnitKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDecimalValueTypeAccess().getUnitEStringParserRuleCall_4_1_0());
					}
					lv_unit_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDecimalValueTypeRule());
						}
						set(
							$current,
							"unit",
							lv_unit_5_0,
							"org.gemoc.ql.QL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getDecimalValueTypeAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDateValueType
entryRuleDateValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateValueTypeRule()); }
	iv_ruleDateValueType=ruleDateValueType
	{ $current=$iv_ruleDateValueType.current; }
	EOF;

// Rule DateValueType
ruleDateValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDateValueTypeAccess().getDateValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='DateValueType'
		{
			newLeafNode(otherlv_1, grammarAccess.getDateValueTypeAccess().getDateValueTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDateValueTypeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDateValueTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getDateValueTypeAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='unit'
			{
				newLeafNode(otherlv_4, grammarAccess.getDateValueTypeAccess().getUnitKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDateValueTypeAccess().getUnitEStringParserRuleCall_4_1_0());
					}
					lv_unit_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDateValueTypeRule());
						}
						set(
							$current,
							"unit",
							lv_unit_5_0,
							"org.gemoc.ql.QL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getDateValueTypeAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEnumerationValueType
entryRuleEnumerationValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationValueTypeRule()); }
	iv_ruleEnumerationValueType=ruleEnumerationValueType
	{ $current=$iv_ruleEnumerationValueType.current; }
	EOF;

// Rule EnumerationValueType
ruleEnumerationValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnumerationValueTypeAccess().getEnumerationValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='EnumerationValueType'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumerationValueTypeAccess().getEnumerationValueTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationValueTypeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationValueTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getEnumerationValueTypeAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='unit'
			{
				newLeafNode(otherlv_4, grammarAccess.getEnumerationValueTypeAccess().getUnitKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumerationValueTypeAccess().getUnitEStringParserRuleCall_4_1_0());
					}
					lv_unit_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumerationValueTypeRule());
						}
						set(
							$current,
							"unit",
							lv_unit_5_0,
							"org.gemoc.ql.QL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='enumerationLiterals'
			{
				newLeafNode(otherlv_6, grammarAccess.getEnumerationValueTypeAccess().getEnumerationLiteralsKeyword_5_0());
			}
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getEnumerationValueTypeAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumerationValueTypeAccess().getEnumerationLiteralsEnumerationLiteralParserRuleCall_5_2_0());
					}
					lv_enumerationLiterals_8_0=ruleEnumerationLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumerationValueTypeRule());
						}
						add(
							$current,
							"enumerationLiterals",
							lv_enumerationLiterals_8_0,
							"org.gemoc.ql.QL.EnumerationLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getEnumerationValueTypeAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEnumerationValueTypeAccess().getEnumerationLiteralsEnumerationLiteralParserRuleCall_5_3_1_0());
						}
						lv_enumerationLiterals_10_0=ruleEnumerationLiteral
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEnumerationValueTypeRule());
							}
							add(
								$current,
								"enumerationLiterals",
								lv_enumerationLiterals_10_0,
								"org.gemoc.ql.QL.EnumerationLiteral");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getEnumerationValueTypeAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getEnumerationValueTypeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleStringValueType
entryRuleStringValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueTypeRule()); }
	iv_ruleStringValueType=ruleStringValueType
	{ $current=$iv_ruleStringValueType.current; }
	EOF;

// Rule StringValueType
ruleStringValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringValueTypeAccess().getStringValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='StringValueType'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringValueTypeAccess().getStringValueTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStringValueTypeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringValueTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getStringValueTypeAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='unit'
			{
				newLeafNode(otherlv_4, grammarAccess.getStringValueTypeAccess().getUnitKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStringValueTypeAccess().getUnitEStringParserRuleCall_4_1_0());
					}
					lv_unit_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringValueTypeRule());
						}
						set(
							$current,
							"unit",
							lv_unit_5_0,
							"org.gemoc.ql.QL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getStringValueTypeAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationLiteralRule()); }
	iv_ruleEnumerationLiteral=ruleEnumerationLiteral
	{ $current=$iv_ruleEnumerationLiteral.current; }
	EOF;

// Rule EnumerationLiteral
ruleEnumerationLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnumerationLiteralAccess().getEnumerationLiteralAction_0(),
					$current);
			}
		)
		otherlv_1='EnumerationLiteral'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumerationLiteralAccess().getEnumerationLiteralKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationLiteralAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationLiteralRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIntegerValue
entryRuleIntegerValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerValueRule()); }
	iv_ruleIntegerValue=ruleIntegerValue
	{ $current=$iv_ruleIntegerValue.current; }
	EOF;

// Rule IntegerValue
ruleIntegerValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerValueAccess().getIntegerValueAction_0(),
					$current);
			}
		)
		otherlv_1='IntegerValue'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerValueAccess().getIntegerValueKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getIntegerValueAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='intValue'
			{
				newLeafNode(otherlv_3, grammarAccess.getIntegerValueAccess().getIntValueKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntegerValueAccess().getIntValueEIntParserRuleCall_3_1_0());
					}
					lv_intValue_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntegerValueRule());
						}
						set(
							$current,
							"intValue",
							lv_intValue_4_0,
							"org.gemoc.ql.QL.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getIntegerValueAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringValueAccess().getStringValueAction_0(),
					$current);
			}
		)
		otherlv_1='StringValue'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringValueAccess().getStringValueKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getStringValueAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='stringValue'
			{
				newLeafNode(otherlv_3, grammarAccess.getStringValueAccess().getStringValueKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStringValueAccess().getStringValueEStringParserRuleCall_3_1_0());
					}
					lv_stringValue_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringValueRule());
						}
						set(
							$current,
							"stringValue",
							lv_stringValue_4_0,
							"org.gemoc.ql.QL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getStringValueAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	iv_ruleBooleanValue=ruleBooleanValue
	{ $current=$iv_ruleBooleanValue.current; }
	EOF;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanValueAccess().getBooleanValueAction_0(),
					$current);
			}
		)
		(
			(
				lv_booleanValue_1_0='booleanValue'
				{
					newLeafNode(lv_booleanValue_1_0, grammarAccess.getBooleanValueAccess().getBooleanValueBooleanValueKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanValueRule());
					}
					setWithLastConsumed($current, "booleanValue", lv_booleanValue_1_0 != null, "booleanValue");
				}
			)
		)?
		otherlv_2='BooleanValue'
		{
			newLeafNode(otherlv_2, grammarAccess.getBooleanValueAccess().getBooleanValueKeyword_2());
		}
	)
;

// Entry rule entryRuleDateValue
entryRuleDateValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateValueRule()); }
	iv_ruleDateValue=ruleDateValue
	{ $current=$iv_ruleDateValue.current; }
	EOF;

// Rule DateValue
ruleDateValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDateValueAccess().getDateValueAction_0(),
					$current);
			}
		)
		otherlv_1='DateValue'
		{
			newLeafNode(otherlv_1, grammarAccess.getDateValueAccess().getDateValueKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDateValueAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='dateValue'
			{
				newLeafNode(otherlv_3, grammarAccess.getDateValueAccess().getDateValueKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDateValueAccess().getDateValueEDateParserRuleCall_3_1_0());
					}
					lv_dateValue_4_0=ruleEDate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDateValueRule());
						}
						set(
							$current,
							"dateValue",
							lv_dateValue_4_0,
							"org.gemoc.ql.QL.EDate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getDateValueAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleDecimalValue
entryRuleDecimalValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecimalValueRule()); }
	iv_ruleDecimalValue=ruleDecimalValue
	{ $current=$iv_ruleDecimalValue.current; }
	EOF;

// Rule DecimalValue
ruleDecimalValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDecimalValueAccess().getDecimalValueAction_0(),
					$current);
			}
		)
		otherlv_1='DecimalValue'
		{
			newLeafNode(otherlv_1, grammarAccess.getDecimalValueAccess().getDecimalValueKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDecimalValueAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='decimalValue'
			{
				newLeafNode(otherlv_3, grammarAccess.getDecimalValueAccess().getDecimalValueKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDecimalValueAccess().getDecimalValueEFloatParserRuleCall_3_1_0());
					}
					lv_decimalValue_4_0=ruleEFloat
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDecimalValueRule());
						}
						set(
							$current,
							"decimalValue",
							lv_decimalValue_4_0,
							"org.gemoc.ql.QL.EFloat");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getDecimalValueAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEFloatRule()); }
	iv_ruleEFloat=ruleEFloat
	{ $current=$iv_ruleEFloat.current.getText(); }
	EOF;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Entry rule entryRuleQuestionDefinition
entryRuleQuestionDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionDefinitionRule()); }
	iv_ruleQuestionDefinition=ruleQuestionDefinition
	{ $current=$iv_ruleQuestionDefinition.current; }
	EOF;

// Rule QuestionDefinition
ruleQuestionDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_isDisplayed_0_0='isDisplayed'
				{
					newLeafNode(lv_isDisplayed_0_0, grammarAccess.getQuestionDefinitionAccess().getIsDisplayedIsDisplayedKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuestionDefinitionRule());
					}
					setWithLastConsumed($current, "isDisplayed", lv_isDisplayed_0_0 != null, "isDisplayed");
				}
			)
		)?
		(
			(
				lv_isMandatory_1_0='isMandatory'
				{
					newLeafNode(lv_isMandatory_1_0, grammarAccess.getQuestionDefinitionAccess().getIsMandatoryIsMandatoryKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuestionDefinitionRule());
					}
					setWithLastConsumed($current, "isMandatory", lv_isMandatory_1_0 != null, "isMandatory");
				}
			)
		)?
		otherlv_2='QuestionDefinition'
		{
			newLeafNode(otherlv_2, grammarAccess.getQuestionDefinitionAccess().getQuestionDefinitionKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionDefinitionAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionDefinitionRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getQuestionDefinitionAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			otherlv_5='label'
			{
				newLeafNode(otherlv_5, grammarAccess.getQuestionDefinitionAccess().getLabelKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionDefinitionAccess().getLabelEStringParserRuleCall_5_1_0());
					}
					lv_label_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionDefinitionRule());
						}
						set(
							$current,
							"label",
							lv_label_6_0,
							"org.gemoc.ql.QL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='dataType'
		{
			newLeafNode(otherlv_7, grammarAccess.getQuestionDefinitionAccess().getDataTypeKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuestionDefinitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getQuestionDefinitionAccess().getDataTypeValueTypeCrossReference_7_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_9='computedExpression'
			{
				newLeafNode(otherlv_9, grammarAccess.getQuestionDefinitionAccess().getComputedExpressionKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionDefinitionAccess().getComputedExpressionExpressionParserRuleCall_8_1_0());
					}
					lv_computedExpression_10_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionDefinitionRule());
						}
						set(
							$current,
							"computedExpression",
							lv_computedExpression_10_0,
							"org.gemoc.ql.QL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_11='currentValue'
			{
				newLeafNode(otherlv_11, grammarAccess.getQuestionDefinitionAccess().getCurrentValueKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionDefinitionAccess().getCurrentValueValueParserRuleCall_9_1_0());
					}
					lv_currentValue_12_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionDefinitionRule());
						}
						set(
							$current,
							"currentValue",
							lv_currentValue_12_0,
							"org.gemoc.ql.QL.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getQuestionDefinitionAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Rule BinaryOperatorKind
ruleBinaryOperatorKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='PLUS'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBinaryOperatorKindAccess().getPLUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='MINUS'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBinaryOperatorKindAccess().getMINUSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='MULT'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getMULTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBinaryOperatorKindAccess().getMULTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='DIV'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getDIVEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBinaryOperatorKindAccess().getDIVEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='EQUAL'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getEQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getBinaryOperatorKindAccess().getEQUALEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='NOTEQUAL'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getNOTEQUALEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getBinaryOperatorKindAccess().getNOTEQUALEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='GREATER'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getGREATEREnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getBinaryOperatorKindAccess().getGREATEREnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='LOWER'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getLOWEREnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getBinaryOperatorKindAccess().getLOWEREnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='GREATEROREQUAL'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getGREATEROREQUALEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getBinaryOperatorKindAccess().getGREATEROREQUALEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='LOWEROREQUAL'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getLOWEROREQUALEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getBinaryOperatorKindAccess().getLOWEROREQUALEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='AND'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getANDEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getBinaryOperatorKindAccess().getANDEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='OR'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getOREnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getBinaryOperatorKindAccess().getOREnumLiteralDeclaration_11());
			}
		)
	)
;

// Rule UnaryOperatorKind
ruleUnaryOperatorKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='UNARYMINUS'
			{
				$current = grammarAccess.getUnaryOperatorKindAccess().getUNARYMINUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorKindAccess().getUNARYMINUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='NOT'
			{
				$current = grammarAccess.getUnaryOperatorKindAccess().getNOTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorKindAccess().getNOTEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
