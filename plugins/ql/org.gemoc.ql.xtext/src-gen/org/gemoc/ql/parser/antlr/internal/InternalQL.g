/*
 * generated by Xtext 2.35.0
 */
grammar InternalQL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.gemoc.ql.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.gemoc.ql.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.gemoc.ql.services.QLGrammarAccess;

}

@parser::members {

 	private QLGrammarAccess grammarAccess;

    public InternalQLParser(TokenStream input, QLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "QLModel";
   	}

   	@Override
   	protected QLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleQLModel
entryRuleQLModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQLModelRule()); }
	iv_ruleQLModel=ruleQLModel
	{ $current=$iv_ruleQLModel.current; }
	EOF;

// Rule QLModel
ruleQLModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQLModelAccess().getQLModelAction_0(),
					$current);
			}
		)
		otherlv_1='QLModel'
		{
			newLeafNode(otherlv_1, grammarAccess.getQLModelAccess().getQLModelKeyword_1());
		}
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getQLModelAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					lv_canSubmit_3_0='canSubmit'
					{
						newLeafNode(lv_canSubmit_3_0, grammarAccess.getQLModelAccess().getCanSubmitCanSubmitKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQLModelRule());
						}
						setWithLastConsumed($current, "canSubmit", lv_canSubmit_3_0 != null, "canSubmit");
					}
				)
			)?
			(
				otherlv_4='submitDate'
				{
					newLeafNode(otherlv_4, grammarAccess.getQLModelAccess().getSubmitDateKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getQLModelAccess().getSubmitDateEDateParserRuleCall_2_2_1_0());
						}
						lv_submitDate_5_0=ruleEDate
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getQLModelRule());
							}
							set(
								$current,
								"submitDate",
								lv_submitDate_5_0,
								"org.gemoc.ql.QL.EDate");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getQLModelAccess().getRightParenthesisKeyword_2_3());
			}
		)?
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getQLModelAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getQLModelAccess().getDefinitionGroupDefinitionGroupParserRuleCall_4_0_0());
					}
					lv_definitionGroup_8_0=ruleDefinitionGroup
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQLModelRule());
						}
						add(
							$current,
							"definitionGroup",
							lv_definitionGroup_8_0,
							"org.gemoc.ql.QL.DefinitionGroup");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getQLModelAccess().getFormsFormParserRuleCall_4_1_0());
					}
					lv_forms_9_0=ruleForm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQLModelRule());
						}
						add(
							$current,
							"forms",
							lv_forms_9_0,
							"org.gemoc.ql.QL.Form");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getQLModelAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleValueType
entryRuleValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueTypeRule()); }
	iv_ruleValueType=ruleValueType
	{ $current=$iv_ruleValueType.current; }
	EOF;

// Rule ValueType
ruleValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getValueType_ImplParserRuleCall_0());
		}
		this_ValueType_Impl_0=ruleValueType_Impl
		{
			$current = $this_ValueType_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getBooleanValueTypeParserRuleCall_1());
		}
		this_BooleanValueType_1=ruleBooleanValueType
		{
			$current = $this_BooleanValueType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getIntegerValueTypeParserRuleCall_2());
		}
		this_IntegerValueType_2=ruleIntegerValueType
		{
			$current = $this_IntegerValueType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getDecimalValueTypeParserRuleCall_3());
		}
		this_DecimalValueType_3=ruleDecimalValueType
		{
			$current = $this_DecimalValueType_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getDateValueTypeParserRuleCall_4());
		}
		this_DateValueType_4=ruleDateValueType
		{
			$current = $this_DateValueType_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getEnumerationValueTypeParserRuleCall_5());
		}
		this_EnumerationValueType_5=ruleEnumerationValueType
		{
			$current = $this_EnumerationValueType_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueTypeAccess().getStringValueTypeParserRuleCall_6());
		}
		this_StringValueType_6=ruleStringValueType
		{
			$current = $this_StringValueType_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getUnaryOrPrimaryExpressionParserRuleCall());
	}
	this_UnaryOrPrimaryExpression_0=ruleUnaryOrPrimaryExpression
	{
		$current = $this_UnaryOrPrimaryExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleUnaryOrPrimaryExpression
entryRuleUnaryOrPrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOrPrimaryExpressionRule()); }
	iv_ruleUnaryOrPrimaryExpression=ruleUnaryOrPrimaryExpression
	{ $current=$iv_ruleUnaryOrPrimaryExpression.current; }
	EOF;

// Rule UnaryOrPrimaryExpression
ruleUnaryOrPrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryOrPrimaryExpressionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryOrPrimaryExpressionAccess().getUnaryExpressionParserRuleCall_1());
		}
		this_UnaryExpression_1=ruleUnaryExpression
		{
			$current = $this_UnaryExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUnaryExpressionAccess().getBasicUnaryExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorKindEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleUnaryOperatorKind
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"org.gemoc.ql.QL.UnaryOperatorKind");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOperandUnaryOrPrimaryExpressionParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleUnaryOrPrimaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_2_0,
						"org.gemoc.ql.QL.UnaryOrPrimaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getCallParserRuleCall_0());
		}
		this_Call_0=ruleCall
		{
			$current = $this_Call_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOrExpressionParserRuleCall_1_1_0());
				}
				this_OrExpression_2=ruleOrExpression
				{
					$current = $this_OrExpression_2.current;
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getUnaryExpressionParserRuleCall_1_1_1());
				}
				this_UnaryExpression_3=ruleUnaryExpression
				{
					$current = $this_UnaryExpression_3.current;
					afterParserOrEnumRuleCall();
				}
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrExpressionAccess().getBasicBinaryExpressionLhsOperandAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getOperatorOrOperatorKindEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleOrOperatorKind
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.gemoc.ql.QL.OrOperatorKind");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRhsOperandAndExpressionParserRuleCall_1_2_0());
					}
					lv_rhsOperand_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"rhsOperand",
							lv_rhsOperand_3_0,
							"org.gemoc.ql.QL.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getEqualExpressionParserRuleCall_0());
		}
		this_EqualExpression_0=ruleEqualExpression
		{
			$current = $this_EqualExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getBasicBinaryExpressionLhsOperandAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getOperatorAndOperatorKindEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleAndOperatorKind
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.gemoc.ql.QL.AndOperatorKind");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRhsOperandEqualExpressionParserRuleCall_1_2_0());
					}
					lv_rhsOperand_3_0=ruleEqualExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"rhsOperand",
							lv_rhsOperand_3_0,
							"org.gemoc.ql.QL.EqualExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqualExpression
entryRuleEqualExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualExpressionRule()); }
	iv_ruleEqualExpression=ruleEqualExpression
	{ $current=$iv_ruleEqualExpression.current; }
	EOF;

// Rule EqualExpression
ruleEqualExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualExpressionAccess().getComparisionExpressionParserRuleCall_0());
		}
		this_ComparisionExpression_0=ruleComparisionExpression
		{
			$current = $this_ComparisionExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualExpressionAccess().getBasicBinaryExpressionLhsOperandAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualExpressionAccess().getOperatorEqualOperatorKindEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleEqualOperatorKind
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.gemoc.ql.QL.EqualOperatorKind");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualExpressionAccess().getRhsOperandComparisionExpressionParserRuleCall_1_2_0());
					}
					lv_rhsOperand_3_0=ruleComparisionExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualExpressionRule());
						}
						set(
							$current,
							"rhsOperand",
							lv_rhsOperand_3_0,
							"org.gemoc.ql.QL.ComparisionExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparisionExpression
entryRuleComparisionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisionExpressionRule()); }
	iv_ruleComparisionExpression=ruleComparisionExpression
	{ $current=$iv_ruleComparisionExpression.current; }
	EOF;

// Rule ComparisionExpression
ruleComparisionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisionExpressionAccess().getAdditionExpressionParserRuleCall_0());
		}
		this_AdditionExpression_0=ruleAdditionExpression
		{
			$current = $this_AdditionExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisionExpressionAccess().getBasicBinaryExpressionLhsOperandAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisionExpressionAccess().getOperatorComparisionOperatorKindEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleComparisionOperatorKind
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisionExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.gemoc.ql.QL.ComparisionOperatorKind");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisionExpressionAccess().getRhsOperandAdditionExpressionParserRuleCall_1_2_0());
					}
					lv_rhsOperand_3_0=ruleAdditionExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisionExpressionRule());
						}
						set(
							$current,
							"rhsOperand",
							lv_rhsOperand_3_0,
							"org.gemoc.ql.QL.AdditionExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAdditionExpression
entryRuleAdditionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionExpressionRule()); }
	iv_ruleAdditionExpression=ruleAdditionExpression
	{ $current=$iv_ruleAdditionExpression.current; }
	EOF;

// Rule AdditionExpression
ruleAdditionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0());
		}
		this_MultiplicationExpression_0=ruleMultiplicationExpression
		{
			$current = $this_MultiplicationExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionExpressionAccess().getBasicBinaryExpressionLhsOperandAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionExpressionAccess().getOperatorAdditionOperatorKindEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleAdditionOperatorKind
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.gemoc.ql.QL.AdditionOperatorKind");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionExpressionAccess().getRhsOperandMultiplicationExpressionParserRuleCall_1_2_0());
					}
					lv_rhsOperand_3_0=ruleMultiplicationExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
						}
						set(
							$current,
							"rhsOperand",
							lv_rhsOperand_3_0,
							"org.gemoc.ql.QL.MultiplicationExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationExpressionRule()); }
	iv_ruleMultiplicationExpression=ruleMultiplicationExpression
	{ $current=$iv_ruleMultiplicationExpression.current; }
	EOF;

// Rule MultiplicationExpression
ruleMultiplicationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationExpressionAccess().getBasicBinaryExpressionLhsOperandAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getOperatorMultiplicationOperatorKindEnumRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleMultiplicationOperatorKind
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.gemoc.ql.QL.MultiplicationOperatorKind");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getRhsOperandUnaryOrPrimaryExpressionParserRuleCall_1_2_0());
					}
					lv_rhsOperand_3_0=ruleUnaryOrPrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
						}
						set(
							$current,
							"rhsOperand",
							lv_rhsOperand_3_0,
							"org.gemoc.ql.QL.UnaryOrPrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	iv_ruleCall=ruleCall
	{ $current=$iv_ruleCall.current; }
	EOF;

// Rule Call
ruleCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCallAccess().getConstantCallParserRuleCall_0());
		}
		this_ConstantCall_0=ruleConstantCall
		{
			$current = $this_ConstantCall_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCallAccess().getQuestionCallParserRuleCall_1());
		}
		this_QuestionCall_1=ruleQuestionCall
		{
			$current = $this_QuestionCall_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleForm
entryRuleForm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormRule()); }
	iv_ruleForm=ruleForm
	{ $current=$iv_ruleForm.current; }
	EOF;

// Rule Form
ruleForm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Form'
		{
			newLeafNode(otherlv_0, grammarAccess.getFormAccess().getFormKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFormAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFormAccess().getQuestionGroupQuestionGroupParserRuleCall_2_0());
				}
				lv_questionGroup_2_0=ruleQuestionGroup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormRule());
					}
					set(
						$current,
						"questionGroup",
						lv_questionGroup_2_0,
						"org.gemoc.ql.QL.QuestionGroup");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDefinitionGroup
entryRuleDefinitionGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionGroupRule()); }
	iv_ruleDefinitionGroup=ruleDefinitionGroup
	{ $current=$iv_ruleDefinitionGroup.current; }
	EOF;

// Rule DefinitionGroup
ruleDefinitionGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDefinitionGroupAccess().getDefinitionGroupAction_0(),
					$current);
			}
		)
		otherlv_1='definitions'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefinitionGroupAccess().getDefinitionsKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDefinitionGroupAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionGroupAccess().getQuestionDefinitionsQuestionDefinitionParserRuleCall_3_0_0());
					}
					lv_questionDefinitions_3_0=ruleQuestionDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionGroupRule());
						}
						add(
							$current,
							"questionDefinitions",
							lv_questionDefinitions_3_0,
							"org.gemoc.ql.QL.QuestionDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionGroupAccess().getDataTypesValueTypeParserRuleCall_3_1_0());
					}
					lv_dataTypes_4_0=ruleValueType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionGroupRule());
						}
						add(
							$current,
							"dataTypes",
							lv_dataTypes_4_0,
							"org.gemoc.ql.QL.ValueType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getDefinitionGroupAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEDate
entryRuleEDate returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDateRule()); }
	iv_ruleEDate=ruleEDate
	{ $current=$iv_ruleEDate.current.getText(); }
	EOF;

// Rule EDate
ruleEDate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='EDate'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEDateAccess().getEDateKeyword());
	}
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleQuestionGroup
entryRuleQuestionGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionGroupRule()); }
	iv_ruleQuestionGroup=ruleQuestionGroup
	{ $current=$iv_ruleQuestionGroup.current; }
	EOF;

// Rule QuestionGroup
ruleQuestionGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQuestionGroupAccess().getQuestionGroupAction_0(),
					$current);
			}
		)
		(
			otherlv_1='if'
			{
				newLeafNode(otherlv_1, grammarAccess.getQuestionGroupAccess().getIfKeyword_1_0());
			}
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getQuestionGroupAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionGroupAccess().getGuardExpressionParserRuleCall_1_2_0());
					}
					lv_guard_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionGroupRule());
						}
						set(
							$current,
							"guard",
							lv_guard_3_0,
							"org.gemoc.ql.QL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getQuestionGroupAccess().getRightParenthesisKeyword_1_3());
			}
		)?
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getQuestionGroupAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionGroupAccess().getQuestionGroupsQuestionGroupParserRuleCall_3_0_0());
					}
					lv_questionGroups_6_0=ruleQuestionGroup
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionGroupRule());
						}
						add(
							$current,
							"questionGroups",
							lv_questionGroups_6_0,
							"org.gemoc.ql.QL.QuestionGroup");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionGroupAccess().getQuestionsQuestionParserRuleCall_3_1_0());
					}
					lv_questions_7_0=ruleQuestion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionGroupRule());
						}
						add(
							$current,
							"questions",
							lv_questions_7_0,
							"org.gemoc.ql.QL.Question");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getQuestionGroupAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	iv_ruleQuestion=ruleQuestion
	{ $current=$iv_ruleQuestion.current; }
	EOF;

// Rule Question
ruleQuestion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getQuestionRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getQuestionAccess().getQuestionDefinitionQuestionDefinitionCrossReference_0());
			}
			ruleEString
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleValueType_Impl
entryRuleValueType_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueType_ImplRule()); }
	iv_ruleValueType_Impl=ruleValueType_Impl
	{ $current=$iv_ruleValueType_Impl.current; }
	EOF;

// Rule ValueType_Impl
ruleValueType_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getValueType_ImplAccess().getValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='ValueType'
		{
			newLeafNode(otherlv_1, grammarAccess.getValueType_ImplAccess().getValueTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueType_ImplAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueType_ImplRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getValueType_ImplAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='unit'
			{
				newLeafNode(otherlv_4, grammarAccess.getValueType_ImplAccess().getUnitKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getValueType_ImplAccess().getUnitEStringParserRuleCall_4_1_0());
					}
					lv_unit_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueType_ImplRule());
						}
						set(
							$current,
							"unit",
							lv_unit_5_0,
							"org.gemoc.ql.QL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getValueType_ImplAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleConstantCall
entryRuleConstantCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantCallRule()); }
	iv_ruleConstantCall=ruleConstantCall
	{ $current=$iv_ruleConstantCall.current; }
	EOF;

// Rule ConstantCall
ruleConstantCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstantCallAccess().getConstantCallAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantCallAccess().getValueStringValueParserRuleCall_1_0_0());
					}
					lv_value_1_1=ruleStringValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantCallRule());
						}
						set(
							$current,
							"value",
							lv_value_1_1,
							"org.gemoc.ql.QL.StringValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getConstantCallAccess().getValueIntegerValueParserRuleCall_1_0_1());
					}
					lv_value_1_2=ruleIntegerValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantCallRule());
						}
						set(
							$current,
							"value",
							lv_value_1_2,
							"org.gemoc.ql.QL.IntegerValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getConstantCallAccess().getValueBooleanValueParserRuleCall_1_0_2());
					}
					lv_value_1_3=ruleBooleanValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantCallRule());
						}
						set(
							$current,
							"value",
							lv_value_1_3,
							"org.gemoc.ql.QL.BooleanValue");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getConstantCallAccess().getValueDecimalValueParserRuleCall_1_0_3());
					}
					lv_value_1_4=ruleDecimalValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantCallRule());
						}
						set(
							$current,
							"value",
							lv_value_1_4,
							"org.gemoc.ql.QL.DecimalValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleQuestionCall
entryRuleQuestionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionCallRule()); }
	iv_ruleQuestionCall=ruleQuestionCall
	{ $current=$iv_ruleQuestionCall.current; }
	EOF;

// Rule QuestionCall
ruleQuestionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQuestionCallAccess().getQuestionCallAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuestionCallRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getQuestionCallAccess().getQuestionQuestionDefinitionCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanValueType
entryRuleBooleanValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValueTypeRule()); }
	iv_ruleBooleanValueType=ruleBooleanValueType
	{ $current=$iv_ruleBooleanValueType.current; }
	EOF;

// Rule BooleanValueType
ruleBooleanValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanValueTypeAccess().getBooleanValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='booleanType'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanValueTypeAccess().getBooleanTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanValueTypeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanValueTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getBooleanValueTypeAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				otherlv_4='unit'
				{
					newLeafNode(otherlv_4, grammarAccess.getBooleanValueTypeAccess().getUnitKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBooleanValueTypeAccess().getUnitEStringParserRuleCall_3_1_1_0());
						}
						lv_unit_5_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBooleanValueTypeRule());
							}
							set(
								$current,
								"unit",
								lv_unit_5_0,
								"org.gemoc.ql.QL.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getBooleanValueTypeAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleIntegerValueType
entryRuleIntegerValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerValueTypeRule()); }
	iv_ruleIntegerValueType=ruleIntegerValueType
	{ $current=$iv_ruleIntegerValueType.current; }
	EOF;

// Rule IntegerValueType
ruleIntegerValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerValueTypeAccess().getIntegerValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='integerType'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerValueTypeAccess().getIntegerTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerValueTypeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerValueTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getIntegerValueTypeAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				otherlv_4='unit'
				{
					newLeafNode(otherlv_4, grammarAccess.getIntegerValueTypeAccess().getUnitKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getIntegerValueTypeAccess().getUnitEStringParserRuleCall_3_1_1_0());
						}
						lv_unit_5_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIntegerValueTypeRule());
							}
							set(
								$current,
								"unit",
								lv_unit_5_0,
								"org.gemoc.ql.QL.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			(
				otherlv_6='min'
				{
					newLeafNode(otherlv_6, grammarAccess.getIntegerValueTypeAccess().getMinKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getIntegerValueTypeAccess().getMinEIntParserRuleCall_3_2_1_0());
						}
						lv_min_7_0=ruleEInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIntegerValueTypeRule());
							}
							set(
								$current,
								"min",
								lv_min_7_0,
								"org.gemoc.ql.QL.EInt");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			(
				otherlv_8='max'
				{
					newLeafNode(otherlv_8, grammarAccess.getIntegerValueTypeAccess().getMaxKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getIntegerValueTypeAccess().getMaxEIntParserRuleCall_3_3_1_0());
						}
						lv_max_9_0=ruleEInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIntegerValueTypeRule());
							}
							set(
								$current,
								"max",
								lv_max_9_0,
								"org.gemoc.ql.QL.EInt");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getIntegerValueTypeAccess().getRightCurlyBracketKeyword_3_4());
			}
		)?
	)
;

// Entry rule entryRuleDecimalValueType
entryRuleDecimalValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecimalValueTypeRule()); }
	iv_ruleDecimalValueType=ruleDecimalValueType
	{ $current=$iv_ruleDecimalValueType.current; }
	EOF;

// Rule DecimalValueType
ruleDecimalValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDecimalValueTypeAccess().getDecimalValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='decimalType'
		{
			newLeafNode(otherlv_1, grammarAccess.getDecimalValueTypeAccess().getDecimalTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDecimalValueTypeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDecimalValueTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getDecimalValueTypeAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				otherlv_4='unit'
				{
					newLeafNode(otherlv_4, grammarAccess.getDecimalValueTypeAccess().getUnitKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDecimalValueTypeAccess().getUnitEStringParserRuleCall_3_1_1_0());
						}
						lv_unit_5_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDecimalValueTypeRule());
							}
							set(
								$current,
								"unit",
								lv_unit_5_0,
								"org.gemoc.ql.QL.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getDecimalValueTypeAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleDateValueType
entryRuleDateValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateValueTypeRule()); }
	iv_ruleDateValueType=ruleDateValueType
	{ $current=$iv_ruleDateValueType.current; }
	EOF;

// Rule DateValueType
ruleDateValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDateValueTypeAccess().getDateValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='dateType'
		{
			newLeafNode(otherlv_1, grammarAccess.getDateValueTypeAccess().getDateTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDateValueTypeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDateValueTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getDateValueTypeAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				otherlv_4='unit'
				{
					newLeafNode(otherlv_4, grammarAccess.getDateValueTypeAccess().getUnitKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDateValueTypeAccess().getUnitEStringParserRuleCall_3_1_1_0());
						}
						lv_unit_5_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDateValueTypeRule());
							}
							set(
								$current,
								"unit",
								lv_unit_5_0,
								"org.gemoc.ql.QL.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getDateValueTypeAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleEnumerationValueType
entryRuleEnumerationValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationValueTypeRule()); }
	iv_ruleEnumerationValueType=ruleEnumerationValueType
	{ $current=$iv_ruleEnumerationValueType.current; }
	EOF;

// Rule EnumerationValueType
ruleEnumerationValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnumerationValueTypeAccess().getEnumerationValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='enumerationType'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumerationValueTypeAccess().getEnumerationTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationValueTypeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationValueTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getEnumerationValueTypeAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				otherlv_4='unit'
				{
					newLeafNode(otherlv_4, grammarAccess.getEnumerationValueTypeAccess().getUnitKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEnumerationValueTypeAccess().getUnitEStringParserRuleCall_3_1_1_0());
						}
						lv_unit_5_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEnumerationValueTypeRule());
							}
							set(
								$current,
								"unit",
								lv_unit_5_0,
								"org.gemoc.ql.QL.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			(
				otherlv_6='literals'
				{
					newLeafNode(otherlv_6, grammarAccess.getEnumerationValueTypeAccess().getLiteralsKeyword_3_2_0());
				}
				otherlv_7='{'
				{
					newLeafNode(otherlv_7, grammarAccess.getEnumerationValueTypeAccess().getLeftCurlyBracketKeyword_3_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEnumerationValueTypeAccess().getEnumerationLiteralsEnumerationLiteralParserRuleCall_3_2_2_0());
						}
						lv_enumerationLiterals_8_0=ruleEnumerationLiteral
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEnumerationValueTypeRule());
							}
							add(
								$current,
								"enumerationLiterals",
								lv_enumerationLiterals_8_0,
								"org.gemoc.ql.QL.EnumerationLiteral");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_9=','
					{
						newLeafNode(otherlv_9, grammarAccess.getEnumerationValueTypeAccess().getCommaKeyword_3_2_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getEnumerationValueTypeAccess().getEnumerationLiteralsEnumerationLiteralParserRuleCall_3_2_3_1_0());
							}
							lv_enumerationLiterals_10_0=ruleEnumerationLiteral
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getEnumerationValueTypeRule());
								}
								add(
									$current,
									"enumerationLiterals",
									lv_enumerationLiterals_10_0,
									"org.gemoc.ql.QL.EnumerationLiteral");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_11='}'
				{
					newLeafNode(otherlv_11, grammarAccess.getEnumerationValueTypeAccess().getRightCurlyBracketKeyword_3_2_4());
				}
			)?
			otherlv_12='}'
			{
				newLeafNode(otherlv_12, grammarAccess.getEnumerationValueTypeAccess().getRightCurlyBracketKeyword_3_3());
			}
		)?
	)
;

// Entry rule entryRuleStringValueType
entryRuleStringValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueTypeRule()); }
	iv_ruleStringValueType=ruleStringValueType
	{ $current=$iv_ruleStringValueType.current; }
	EOF;

// Rule StringValueType
ruleStringValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringValueTypeAccess().getStringValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='StringValueType'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringValueTypeAccess().getStringValueTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStringValueTypeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringValueTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getStringValueTypeAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				otherlv_4='unit'
				{
					newLeafNode(otherlv_4, grammarAccess.getStringValueTypeAccess().getUnitKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStringValueTypeAccess().getUnitEStringParserRuleCall_3_1_1_0());
						}
						lv_unit_5_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStringValueTypeRule());
							}
							set(
								$current,
								"unit",
								lv_unit_5_0,
								"org.gemoc.ql.QL.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getStringValueTypeAccess().getRightCurlyBracketKeyword_3_2());
			}
		)?
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationLiteralRule()); }
	iv_ruleEnumerationLiteral=ruleEnumerationLiteral
	{ $current=$iv_ruleEnumerationLiteral.current; }
	EOF;

// Rule EnumerationLiteral
ruleEnumerationLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnumerationLiteralAccess().getEnumerationLiteralAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationLiteralAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationLiteralRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIntegerValue
entryRuleIntegerValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerValueRule()); }
	iv_ruleIntegerValue=ruleIntegerValue
	{ $current=$iv_ruleIntegerValue.current; }
	EOF;

// Rule IntegerValue
ruleIntegerValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerValueAccess().getIntegerValueAction_0(),
					$current);
			}
		)
		otherlv_1='IntegerValue'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerValueAccess().getIntegerValueKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getIntegerValueAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='intValue'
			{
				newLeafNode(otherlv_3, grammarAccess.getIntegerValueAccess().getIntValueKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntegerValueAccess().getIntValueEIntParserRuleCall_3_1_0());
					}
					lv_intValue_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntegerValueRule());
						}
						set(
							$current,
							"intValue",
							lv_intValue_4_0,
							"org.gemoc.ql.QL.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getIntegerValueAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringValueAccess().getStringValueAction_0(),
					$current);
			}
		)
		otherlv_1='StringValue'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringValueAccess().getStringValueKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getStringValueAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='stringValue'
			{
				newLeafNode(otherlv_3, grammarAccess.getStringValueAccess().getStringValueKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStringValueAccess().getStringValueEStringParserRuleCall_3_1_0());
					}
					lv_stringValue_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringValueRule());
						}
						set(
							$current,
							"stringValue",
							lv_stringValue_4_0,
							"org.gemoc.ql.QL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getStringValueAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	iv_ruleBooleanValue=ruleBooleanValue
	{ $current=$iv_ruleBooleanValue.current; }
	EOF;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanValueAccess().getBooleanValueAction_0(),
					$current);
			}
		)
		(
			(
				lv_booleanValue_1_0='booleanValue'
				{
					newLeafNode(lv_booleanValue_1_0, grammarAccess.getBooleanValueAccess().getBooleanValueBooleanValueKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanValueRule());
					}
					setWithLastConsumed($current, "booleanValue", lv_booleanValue_1_0 != null, "booleanValue");
				}
			)
		)?
		otherlv_2='BooleanValue'
		{
			newLeafNode(otherlv_2, grammarAccess.getBooleanValueAccess().getBooleanValueKeyword_2());
		}
	)
;

// Entry rule entryRuleDateValue
entryRuleDateValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateValueRule()); }
	iv_ruleDateValue=ruleDateValue
	{ $current=$iv_ruleDateValue.current; }
	EOF;

// Rule DateValue
ruleDateValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDateValueAccess().getDateValueAction_0(),
					$current);
			}
		)
		otherlv_1='DateValue'
		{
			newLeafNode(otherlv_1, grammarAccess.getDateValueAccess().getDateValueKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDateValueAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='dateValue'
			{
				newLeafNode(otherlv_3, grammarAccess.getDateValueAccess().getDateValueKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDateValueAccess().getDateValueEDateParserRuleCall_3_1_0());
					}
					lv_dateValue_4_0=ruleEDate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDateValueRule());
						}
						set(
							$current,
							"dateValue",
							lv_dateValue_4_0,
							"org.gemoc.ql.QL.EDate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getDateValueAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleDecimalValue
entryRuleDecimalValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecimalValueRule()); }
	iv_ruleDecimalValue=ruleDecimalValue
	{ $current=$iv_ruleDecimalValue.current; }
	EOF;

// Rule DecimalValue
ruleDecimalValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDecimalValueAccess().getDecimalValueAction_0(),
					$current);
			}
		)
		otherlv_1='DecimalValue'
		{
			newLeafNode(otherlv_1, grammarAccess.getDecimalValueAccess().getDecimalValueKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getDecimalValueAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='decimalValue'
			{
				newLeafNode(otherlv_3, grammarAccess.getDecimalValueAccess().getDecimalValueKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDecimalValueAccess().getDecimalValueEFloatParserRuleCall_3_1_0());
					}
					lv_decimalValue_4_0=ruleEFloat
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDecimalValueRule());
						}
						set(
							$current,
							"decimalValue",
							lv_decimalValue_4_0,
							"org.gemoc.ql.QL.EFloat");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getDecimalValueAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEFloatRule()); }
	iv_ruleEFloat=ruleEFloat
	{ $current=$iv_ruleEFloat.current.getText(); }
	EOF;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Entry rule entryRuleQuestionDefinition
entryRuleQuestionDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionDefinitionRule()); }
	iv_ruleQuestionDefinition=ruleQuestionDefinition
	{ $current=$iv_ruleQuestionDefinition.current; }
	EOF;

// Rule QuestionDefinition
ruleQuestionDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_isMandatory_0_0='mandatory'
				{
					newLeafNode(lv_isMandatory_0_0, grammarAccess.getQuestionDefinitionAccess().getIsMandatoryMandatoryKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuestionDefinitionRule());
					}
					setWithLastConsumed($current, "isMandatory", lv_isMandatory_0_0 != null, "mandatory");
				}
			)
		)?
		otherlv_1='question'
		{
			newLeafNode(otherlv_1, grammarAccess.getQuestionDefinitionAccess().getQuestionKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionDefinitionAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionDefinitionRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getQuestionDefinitionAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionDefinitionAccess().getLabelEStringParserRuleCall_4_0());
				}
				lv_label_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionDefinitionRule());
					}
					set(
						$current,
						"label",
						lv_label_4_0,
						"org.gemoc.ql.QL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuestionDefinitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getQuestionDefinitionAccess().getDataTypeValueTypeCrossReference_5_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='='
			{
				newLeafNode(otherlv_6, grammarAccess.getQuestionDefinitionAccess().getEqualsSignKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionDefinitionAccess().getComputedExpressionExpressionParserRuleCall_6_1_0());
					}
					lv_computedExpression_7_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionDefinitionRule());
						}
						set(
							$current,
							"computedExpression",
							lv_computedExpression_7_0,
							"org.gemoc.ql.QL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getQuestionDefinitionAccess().getSemicolonKeyword_6_2());
			}
		)?
	)
;

// Rule BinaryOperatorKind
ruleBinaryOperatorKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='PLUS'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBinaryOperatorKindAccess().getPLUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='MINUS'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBinaryOperatorKindAccess().getMINUSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='MULT'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getMULTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBinaryOperatorKindAccess().getMULTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='DIV'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getDIVEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBinaryOperatorKindAccess().getDIVEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='EQUAL'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getEQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getBinaryOperatorKindAccess().getEQUALEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='NOTEQUAL'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getNOTEQUALEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getBinaryOperatorKindAccess().getNOTEQUALEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='GREATER'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getGREATEREnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getBinaryOperatorKindAccess().getGREATEREnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='LOWER'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getLOWEREnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getBinaryOperatorKindAccess().getLOWEREnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='GREATEROREQUAL'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getGREATEROREQUALEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getBinaryOperatorKindAccess().getGREATEROREQUALEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='LOWEROREQUAL'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getLOWEROREQUALEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getBinaryOperatorKindAccess().getLOWEROREQUALEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='AND'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getANDEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getBinaryOperatorKindAccess().getANDEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='OR'
			{
				$current = grammarAccess.getBinaryOperatorKindAccess().getOREnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getBinaryOperatorKindAccess().getOREnumLiteralDeclaration_11());
			}
		)
	)
;

// Rule UnaryOperatorKind
ruleUnaryOperatorKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='-'
			{
				$current = grammarAccess.getUnaryOperatorKindAccess().getUNARYMINUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorKindAccess().getUNARYMINUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='not'
			{
				$current = grammarAccess.getUnaryOperatorKindAccess().getNOTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorKindAccess().getNOTEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule AdditionOperatorKind
ruleAdditionOperatorKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getAdditionOperatorKindAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAdditionOperatorKindAccess().getPLUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getAdditionOperatorKindAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAdditionOperatorKindAccess().getMINUSEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MultiplicationOperatorKind
ruleMultiplicationOperatorKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='*'
			{
				$current = grammarAccess.getMultiplicationOperatorKindAccess().getMULTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicationOperatorKindAccess().getMULTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='/'
			{
				$current = grammarAccess.getMultiplicationOperatorKindAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicationOperatorKindAccess().getDIVEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule EqualOperatorKind
ruleEqualOperatorKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='='
		{
			$current = grammarAccess.getEqualOperatorKindAccess().getEQUALEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getEqualOperatorKindAccess().getEQUALEnumLiteralDeclaration());
		}
	)
;

// Rule ComparisionOperatorKind
ruleComparisionOperatorKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getComparisionOperatorKindAccess().getGREATEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getComparisionOperatorKindAccess().getGREATEREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getComparisionOperatorKindAccess().getLOWEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getComparisionOperatorKindAccess().getLOWEREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>='
			{
				$current = grammarAccess.getComparisionOperatorKindAccess().getGREATEROREQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getComparisionOperatorKindAccess().getGREATEROREQUALEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<='
			{
				$current = grammarAccess.getComparisionOperatorKindAccess().getLOWEROREQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getComparisionOperatorKindAccess().getLOWEROREQUALEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule AndOperatorKind
ruleAndOperatorKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='and'
		{
			$current = grammarAccess.getAndOperatorKindAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getAndOperatorKindAccess().getANDEnumLiteralDeclaration());
		}
	)
;

// Rule OrOperatorKind
ruleOrOperatorKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='or'
		{
			$current = grammarAccess.getOrOperatorKindAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getOrOperatorKindAccess().getOREnumLiteralDeclaration());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
