// automatically generated by Xtext
grammar org.gemoc.ql.QL with org.eclipse.xtext.common.Terminals

import "http://www.gemoc.org/ql" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

QLModel returns QLModel:
	{QLModel}
	
	'QLModel' name=ID
	('(' (canSubmit?='canSubmit')? ('submitDate' submitDate=EDate)? ')')?
	'{'
		( 'definitions' definitionGroup+=DefinitionGroup | ( 'displayableQuestions' questionGroups+=QuestionGroup))* 
	'}';




ValueType returns ValueType:
	ValueType_Impl | BooleanValueType | IntegerValueType | DecimalValueType | DateValueType | EnumerationValueType | StringValueType;


Expression returns Expression:
	UnaryOrPrimaryExpression;
	//BasicBinaryExpression | ConstantCall | BasicUnaryExpression | QuestionCall;

UnaryOrPrimaryExpression returns Expression: 
	PrimaryExpression | UnaryExpression
	;
UnaryExpression returns Expression : 
	{BasicUnaryExpression} 
	operator=UnaryOperatorKind operand=UnaryOrPrimaryExpression 
	;
PrimaryExpression returns Expression:
	Call  | IfExpression | '(' (OrExpression | UnaryExpression) ')'  ;

IfExpression returns IfExpression:
	{IfExpression}
	'if' condition=Expression
	'then' thenExpression=Expression
	('else' elseExpression=Expression )?
	'endif'
;

OrExpression returns Expression:
	AndExpression (
		{BasicBinaryExpression.lhsOperand=current} 
		operator=OrOperatorKind
		rhsOperand=AndExpression
	)*
;
AndExpression returns Expression:
	EqualExpression (
		{BasicBinaryExpression.lhsOperand=current} 
		operator=AndOperatorKind
		rhsOperand=EqualExpression
	)*
;
EqualExpression returns Expression:
	ComparisionExpression (
		{BasicBinaryExpression.lhsOperand=current}
		operator=EqualOperatorKind
		rhsOperand=ComparisionExpression
	)*
;

ComparisionExpression returns Expression:
	AdditionExpression (
		{BasicBinaryExpression.lhsOperand=current}
		operator=ComparisionOperatorKind
		rhsOperand=AdditionExpression
	)*
;
AdditionExpression returns Expression:
	MultiplicationExpression (
		{BasicBinaryExpression.lhsOperand=current} 
		operator=AdditionOperatorKind
		rhsOperand=MultiplicationExpression
	)*
;
MultiplicationExpression returns Expression:
	PrimaryExpression (
		{BasicBinaryExpression.lhsOperand=current} 
		operator=MultiplicationOperatorKind
		rhsOperand=UnaryOrPrimaryExpression
	)*
;

Call returns Call:
	ConstantCall | QuestionCall | EnumerationCall;

	
Value returns Value:
	IntegerValue | StringValue | BooleanValue | DateValue | DecimalValue;


DefinitionGroup returns DefinitionGroup:
	{DefinitionGroup}
	'{'
		( questionDefinitions+=QuestionDefinition | dataTypes+=ValueType )*
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

EString returns ecore::EString:
	STRING | ID;

QuestionGroup returns QuestionGroup:
	{QuestionGroup}
	('if' guard=Expression )?
	'{'
		( questionGroups+=QuestionGroup | questions+=Question)*
	'}';

Question returns Question:
	questionDefinition=[QuestionDefinition|QualifiedName]
	;

ValueType_Impl returns ValueType:
	{ValueType}
	'ValueType'
	name=ID
	'{'
		('unit' unit=EString)?
	'}';

BasicBinaryExpression returns BasicBinaryExpression:
	'BasicBinaryExpression'
	'{'
		'operator' operator=BinaryOperatorKind
		('resultType' resultType=[ValueType|EString])?
		'lhsOperand' lhsOperand=Expression
		'rhsOperand' rhsOperand=Expression
	'}';

ConstantCall returns ConstantCall:
	{ConstantCall}
	value=(StringValue | IntegerValue | BooleanValue | DecimalValue )

	;

BasicUnaryExpression returns BasicUnaryExpression:
	'BasicUnaryExpression'
	'{'
		('operator' operator=UnaryOperatorKind)?
		('resultType' resultType=[ValueType|QualifiedName])?
		'operand' operand=Expression
	'}';

QuestionCall returns QuestionCall:
	{QuestionCall}
	question=[QuestionDefinition|QualifiedName] '(' ')'
	;

BooleanValueType returns BooleanValueType:
	{BooleanValueType}
	'booleanType'
	name=ID
	('{'
		('unit' unit=EString)?
	'}')?;

IntegerValueType returns IntegerValueType:
	{IntegerValueType}
	'integerType'
	name=ID
	('{'
		('unit' unit=EString)?
		('min' min=EInt)?
		('max' max=EInt)?
	'}')?;

DecimalValueType returns DecimalValueType:
	{DecimalValueType}
	'decimalType'
	name=ID
	('{'
		('unit' unit=EString)?
	'}')?;

DateValueType returns DateValueType:
	{DateValueType}
	'dateType'
	name=ID
	('{'
		('unit' unit=EString)?
	'}')?;

EnumerationValueType returns EnumerationValueType:
	{EnumerationValueType}
	'enumerationType'
	name=ID
	('{'
		('unit' unit=EString)?
		('literals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
	'}')?;

StringValueType returns StringValueType:
	{StringValueType}
	'StringType'
	name=ID
	('{'
		('unit' unit=EString)?
	'}')?;


	
	
EnumerationLiteral returns EnumerationLiteral:
	{EnumerationLiteral}
	name=ID;

enum BinaryOperatorKind returns BinaryOperatorKind:
				PLUS = 'PLUS' | MINUS = 'MINUS' | MULT = 'MULT' | DIV = 'DIV' | EQUAL = 'EQUAL' | NOTEQUAL = 'NOTEQUAL' | GREATER = 'GREATER' | LOWER = 'LOWER' | GREATEROREQUAL = 'GREATEROREQUAL' | LOWEROREQUAL = 'LOWEROREQUAL' | AND = 'AND' | OR = 'OR';

IntegerValue returns IntegerValue:
	{IntegerValue}
	intValue=EInt
	;

StringValue returns StringValue:
	{StringValue}
	stringValue=STRING
	;

BooleanValue returns BooleanValue:
	{BooleanValue}
	booleanValue=EBoolean
	;

EnumerationCall returns EnumerationCall:
	{EnumerationCall}
	enumerationLiteral=[EnumerationLiteral|QualifiedName]
	;

DateValue returns DateValue:
	{DateValue}
	'DateValue'
	'{'
		('dateValue' dateValue=EDate)?
	'}';

DecimalValue returns DecimalValue:
	{DecimalValue}
	decimalValue=EDouble
	;

EInt returns ecore::EInt:
	//'-'? INT;
	INT;

EDouble returns ecore::EDouble:
	//'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	INT? '.' INT (('E'|'e') '-'? INT)?;

enum UnaryOperatorKind returns UnaryOperatorKind:
				UNARYMINUS = '-' | NOT = 'not';

enum AdditionOperatorKind returns BinaryOperatorKind: 
	PLUS = '+' | MINUS = '-'
;
enum MultiplicationOperatorKind returns BinaryOperatorKind: 
	MULT = '*' | DIV = '/'  
;
enum EqualOperatorKind  returns BinaryOperatorKind: 
	EQUAL = '=' 
;
enum ComparisionOperatorKind  returns BinaryOperatorKind: 
	GREATER = '>' | LOWER = '<' | GREATEROREQUAL = '>=' | LOWEROREQUAL = '<=' 
;
enum AndOperatorKind  returns BinaryOperatorKind: 
	AND = 'and';
enum OrOperatorKind returns BinaryOperatorKind:
	OR = 'or';

QuestionDefinition returns QuestionDefinition:
	
	(isMandatory?='mandatory')?
	'question'
	name=EString
	( '('	(isDisplayed?='isDisplayed')?
		('currentValue' currentValue=Value)? ')' )? 
	":" label=EString dataType=[ValueType|EString]
	('=' computedExpression=Expression ';')?
	;
	
QualifiedName:
	ID ('.' ID)*;
