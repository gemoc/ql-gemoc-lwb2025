// automatically generated by Xtext
grammar org.gemoc.ql.QL with org.eclipse.xtext.common.Terminals

import "http://www.gemoc.org/ql" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

QLModel returns QLModel:
	{QLModel}
	(canSubmit?='canSubmit')?
	'QLModel'
	'{'
		('submitDate' submitDate=EDate)?
		('forms' '{' forms+=Form ( "," forms+=Form)* '}' )?
		('definitionGroup' '{' definitionGroup+=DefinitionGroup ( "," definitionGroup+=DefinitionGroup)* '}' )?
	'}';




ValueType returns ValueType:
	ValueType_Impl | BooleanValueType | IntegerValueType | DecimalValueType | DateValueType | EnumerationValueType | StringValueType;


Expression returns Expression:
	BasicBinaryExpression | ConstantCall | BasicUnaryExpression | QuestionCall;


Value returns Value:
	IntegerValue | StringValue | BooleanValue | DateValue | DecimalValue;


Form returns Form:
	'Form'
	name=EString
	'{'
		'questionGroup' questionGroup=QuestionGroup
	'}';

DefinitionGroup returns DefinitionGroup:
	{DefinitionGroup}
	'DefinitionGroup'
	'{'
		('dataTypes' '{' dataTypes+=ValueType ( "," dataTypes+=ValueType)* '}' )?
		('questionDefinitions' '{' questionDefinitions+=QuestionDefinition ( "," questionDefinitions+=QuestionDefinition)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

EString returns ecore::EString:
	STRING | ID;

QuestionGroup returns QuestionGroup:
	{QuestionGroup}
	'QuestionGroup'
	'{'
		('guard' guard=Expression)?
		('questionGroups' '{' questionGroups+=QuestionGroup ( "," questionGroups+=QuestionGroup)* '}' )?
		('questions' '{' questions+=Question ( "," questions+=Question)* '}' )?
	'}';

Question returns Question:
	'Question'
	'{'
		'questionDefinition' questionDefinition=[QuestionDefinition|EString]
	'}';

ValueType_Impl returns ValueType:
	{ValueType}
	'ValueType'
	name=EString
	'{'
		('unit' unit=EString)?
	'}';

BasicBinaryExpression returns BasicBinaryExpression:
	'BasicBinaryExpression'
	'{'
		'operator' operator=BinaryOperatorKind
		('resultType' resultType=[ValueType|EString])?
		'lhsOperand' lhsOperand=Expression
		'rhsOperand' rhsOperand=Expression
	'}';

ConstantCall returns ConstantCall:
	{ConstantCall}
	'ConstantCall'
	'{'
		('resultType' resultType=[ValueType|EString])?
		('value' value=Value)?
	'}';

BasicUnaryExpression returns BasicUnaryExpression:
	'BasicUnaryExpression'
	'{'
		('operator' operator=UnaryOperatorKind)?
		('resultType' resultType=[ValueType|EString])?
		'operand' operand=Expression
	'}';

QuestionCall returns QuestionCall:
	'QuestionCall'
	'{'
		('resultType' resultType=[ValueType|EString])?
		'question' question=[QuestionDefinition|EString]
	'}';

BooleanValueType returns BooleanValueType:
	{BooleanValueType}
	'BooleanValueType'
	name=EString
	'{'
		('unit' unit=EString)?
	'}';

IntegerValueType returns IntegerValueType:
	{IntegerValueType}
	'IntegerValueType'
	name=EString
	'{'
		('unit' unit=EString)?
		('min' min=EInt)?
		('max' max=EInt)?
	'}';

DecimalValueType returns DecimalValueType:
	{DecimalValueType}
	'DecimalValueType'
	name=EString
	'{'
		('unit' unit=EString)?
	'}';

DateValueType returns DateValueType:
	{DateValueType}
	'DateValueType'
	name=EString
	'{'
		('unit' unit=EString)?
	'}';

EnumerationValueType returns EnumerationValueType:
	{EnumerationValueType}
	'EnumerationValueType'
	name=EString
	'{'
		('unit' unit=EString)?
		('enumerationLiterals' '{' enumerationLiterals+=EnumerationLiteral ( "," enumerationLiterals+=EnumerationLiteral)* '}' )?
	'}';

StringValueType returns StringValueType:
	{StringValueType}
	'StringValueType'
	name=EString
	'{'
		('unit' unit=EString)?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

EnumerationLiteral returns EnumerationLiteral:
	{EnumerationLiteral}
	'EnumerationLiteral'
	name=EString;

enum BinaryOperatorKind returns BinaryOperatorKind:
				PLUS = 'PLUS' | MINUS = 'MINUS' | MULT = 'MULT' | DIV = 'DIV' | EQUAL = 'EQUAL' | NOTEQUAL = 'NOTEQUAL' | GREATER = 'GREATER' | LOWER = 'LOWER' | GREATEROREQUAL = 'GREATEROREQUAL' | LOWEROREQUAL = 'LOWEROREQUAL' | AND = 'AND' | OR = 'OR';

IntegerValue returns IntegerValue:
	{IntegerValue}
	'IntegerValue'
	'{'
		('intValue' intValue=EInt)?
	'}';

StringValue returns StringValue:
	{StringValue}
	'StringValue'
	'{'
		('stringValue' stringValue=EString)?
	'}';

BooleanValue returns BooleanValue:
	{BooleanValue}
	(booleanValue?='booleanValue')?
	'BooleanValue'
	;

DateValue returns DateValue:
	{DateValue}
	'DateValue'
	'{'
		('dateValue' dateValue=EDate)?
	'}';

DecimalValue returns DecimalValue:
	{DecimalValue}
	'DecimalValue'
	'{'
		('decimalValue' decimalValue=EFloat)?
	'}';

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

enum UnaryOperatorKind returns UnaryOperatorKind:
				UNARYMINUS = 'UNARYMINUS' | NOT = 'NOT';

QuestionDefinition returns QuestionDefinition:
	(isDisplayed?='isDisplayed')?
	(isMandatory?='isMandatory')?
	'QuestionDefinition'
	name=EString
	'{'
		('label' label=EString)?
		'dataType' dataType=[ValueType|EString]
		('computedExpression' computedExpression=Expression)?
		('currentValue' currentValue=Value)?
	'}';
