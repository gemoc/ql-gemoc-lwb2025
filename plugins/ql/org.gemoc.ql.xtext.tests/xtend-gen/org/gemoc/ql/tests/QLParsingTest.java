/**
 * generated by Xtext 2.35.0
 */
package org.gemoc.ql.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.gemoc.ql.model.ql.QLModel;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(QLInjectorProvider.class)
@SuppressWarnings("all")
public class QLParsingTest {
  @Inject
  private ParseHelper<QLModel> parseHelper;

  @Test
  public void loadChallengeHouseOwningModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("QLModel {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("definitions {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("booleanType boolean");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("decimalType money { unit \"Euro\" }");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("definitions {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("question hasSoldHouse: \"Did you sell a house in 2010?\"  boolean");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("question hasBoughtHouse: \"Did you buy a house in 2010?\" boolean");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("question hasMaintLoan: \"Did you enter a loan for maintenance/reconstruction?\"  boolean");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("mandatory question sellingPrice: \"Price the house was sold for:\"  money");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("mandatory question privateDebt: \"Private debts for the sold house:\"  money");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("question valueResidue: \"Value residue:\"  money = (sellingPrice() - privateDebt());");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("} ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Form Box1HouseOwning {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("hasSoldHouse");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("hasBoughtHouse");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("hasMaintLoan");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (hasSoldHouse()) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("sellingPrice");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("privateDebt");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("valueResidue");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final QLModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void loadGuessWhoMiniModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("QLModel {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("definitions {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("booleanType boolean");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("enumerationType yesNo  { literals {Unknown, Yes , No} }");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("enumerationType gender { literals {Unknown, Male , Female} }");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("enumerationType hairColor { literals {Unknown, Brown, Blonde, Black, Red, Grey} }");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("enumerationType facialHair { literals {Unknown, Beard, Mustache, None}}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("enumerationType glasses { literals {Unknown, Yes, No}}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("enumerationType hat { literals {Unknown, Yes, No}}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("enumerationType eyeColor { literals {Unknown, Blue, Brown, Green}}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("definitions {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//- Gender:");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("question isMale : \"Is your person a male?\" yesNo");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("question isFemale : \"Is your person a female?\" yesNo");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("question personGender : \"Your person is a \" gender = if ( (isMale() = yesNo.Yes) or (isFemale() = yesNo.No)) then (gender.Male) endif;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Form GuessWho {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("isMale");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("isFemale");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final QLModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
