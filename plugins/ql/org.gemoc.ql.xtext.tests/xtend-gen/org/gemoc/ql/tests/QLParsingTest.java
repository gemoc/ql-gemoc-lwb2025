/**
 * generated by Xtext 2.35.0
 */
package org.gemoc.ql.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.gemoc.ql.model.ql.QLModel;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(QLInjectorProvider.class)
@SuppressWarnings("all")
public class QLParsingTest {
  @Inject
  private ParseHelper<QLModel> parseHelper;

  @Test
  public void loadChallengeHouseOwningModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("QLModel { forms { Form \" Box1HouseOwning\" { questionGroup QuestionGroup { questionGroups { QuestionGroup { guard QuestionCall { question hasSoldHouse } questions { Question { questionDefinition sellingPrice } , Question { questionDefinition privateDebt } , Question { questionDefinition valueResidue } } } } questions { Question { questionDefinition hasSoldHouse } , Question { questionDefinition hasBoughtHouse } , Question { questionDefinition hasMaintLoan } } } } } definitionGroup { DefinitionGroup { dataTypes { BooleanValueType boolean { } , DecimalValueType money { unit Euro } } questionDefinitions { QuestionDefinition hasSoldHouse { label \"Did you sell a house in 2010?\" dataType boolean } , QuestionDefinition hasBoughtHouse { label \"Did you buy a house in 2010?\" dataType boolean } , QuestionDefinition hasMaintLoan { label \"Did you enter a loan for maintenance/reconstruction?\" dataType boolean } , isMandatory QuestionDefinition sellingPrice { label \"Price the house was sold for:\" dataType money } , isMandatory QuestionDefinition privateDebt { label \"Private debts for the sold house:\" dataType money } , QuestionDefinition valueResidue { label \"Value residue:\" dataType money computedExpression BasicBinaryExpression { operator MINUS resultType money lhsOperand QuestionCall { question sellingPrice } rhsOperand QuestionCall { question privateDebt } } } } } } }");
      _builder.newLine();
      final QLModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
