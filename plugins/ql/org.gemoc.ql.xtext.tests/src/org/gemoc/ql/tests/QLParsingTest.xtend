/*
 * generated by Xtext 2.35.0
 */
package org.gemoc.ql.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.gemoc.ql.model.ql.QLModel
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(QLInjectorProvider)
class QLParsingTest {
	@Inject
	ParseHelper<QLModel> parseHelper
	
	@Test
	def void loadChallengeHouseOwningModel() {
		val result = parseHelper.parse('''
			QLModel {
				definitions {
					booleanType boolean
					decimalType money { unit "Euro" }
				}
				definitions {
					question hasSoldHouse: "Did you sell a house in 2010?"  boolean
					question hasBoughtHouse: "Did you buy a house in 2010?" boolean
					question hasMaintLoan: "Did you enter a loan for maintenance/reconstruction?"  boolean
					mandatory question sellingPrice: "Price the house was sold for:"  money
					mandatory question privateDebt: "Private debts for the sold house:"  money
					question valueResidue: "Value residue:"  money = (sellingPrice() - privateDebt());
				} 
				Form Box1HouseOwning {
					{
						hasSoldHouse
						hasBoughtHouse
						hasMaintLoan
					}
					if (hasSoldHouse()) {
						sellingPrice
						privateDebt
						valueResidue
					}
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadGuessWhoMiniModel() {
		val result = parseHelper.parse('''
			QLModel {
				definitions {
					booleanType boolean
					enumerationType yesNo  { literals {Unknown, Yes , No} }
					enumerationType gender { literals {Unknown, Male , Female} }
					enumerationType hairColor { literals {Unknown, Brown, Blonde, Black, Red, Grey} }
					enumerationType facialHair { literals {Unknown, Beard, Mustache, None}}
					enumerationType glasses { literals {Unknown, Yes, No}}
					enumerationType hat { literals {Unknown, Yes, No}}
					enumerationType eyeColor { literals {Unknown, Blue, Brown, Green}}
				}
				definitions {
					//- Gender:
					question isMale : "Is your person a male?" yesNo
					question isFemale : "Is your person a female?" yesNo
					question personGender : "Your person is a " gender = if ( (isMale() = yesNo.Yes) or (isFemale() = yesNo.No)) then (gender.Male) endif;
				}
				Form GuessWho {
					{
						isMale
						isFemale
					}
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
		@Test
	def void loadProjectBudgetEstimationModel() {
		val result = parseHelper.parse('''
			QLModel {
				definitions {
					booleanType boolean
					decimalType personHour {}
					decimalType euroPerHour { unit "€/hour"}
					decimalType money { unit "€" }
				}
			
				definitions {
					question estimatedPersonHourForDev : "Estimated person-hours required for development?" personHour
					question hourlyRateForDev : "What is the hourly rate for development (€/hour)?" euroPerHour
					question estimatedDevCost : "Estimated Development Cost:" money = (estimatedPersonHourForDev() * hourlyRateForDev()) ;
					
					question requireDesignAndUX : "Does this project require custom design and UI/UX work? (Yes/No)" boolean
					question estimatedPersonHourForDesignUX : "Estimated person-hours for design and UI/UX?" personHour
					question hourlyRateForDesignUX : "What is the hourly rate for design and UI/UX (€/hour)?" euroPerHour
					question estimatedDesignUXCost : "Estimated Design Cost:" money = (estimatedPersonHourForDesignUX() * hourlyRateForDesignUX()) ;
					question subtotalProjectCostDesignUX : "Subtotal Project Cost (with design):" money = (estimatedDevCost() + estimatedDesignUXCost()) ;
					
					question requireTestingAndQA :  "Will dedicated testing and QA be required for this project?" boolean
					question estimatedPersonHourForTestingAndQA: "Estimated person-hours for testing and QA ?" personHour
					question hourlyRateForTestingAndQ : "What is the hourly rate for testing and QA (€/hour)?" euroPerHour
					question estimatedTestingAndQACost : "Estimated Design Cost:" money = (estimatedPersonHourForTestingAndQA() * hourlyRateForTestingAndQ()) ;
					question subtotalProjectCostTesting1 : "Subtotal Project Cost (with testing):" money = (estimatedDevCost() + estimatedTestingAndQACost()) ;
					question subtotalProjectCostTesting2 : "Subtotal Project Cost (with design and testing):" money = (estimatedDevCost() + estimatedTestingAndQACost() + estimatedDesignUXCost()) ;
					
					question requireDeploymentAndMaintenance : "Will deployment and ongoing maintenance be part of this project scope?" boolean
					question estimatedDeploymentCost : "Estimated cost for deployment?" money
					question estimatedMaintenanceCost : "Estimated annual maintenance cost?" money
					question estimatedDeploymentAndMaintenanceCost : "Estimated Deployment & First Year Maintenance Cost:" money = (estimatedDeploymentCost() + estimatedMaintenanceCost());
					
					question minimalCost : "Minimum Project Cost (Development Only):" money = (estimatedDevCost());
					question totalProjectCost : "Total Project Cost (including Design & UX, Testing & QA, and  deployment & first year maintenance, if selected):"  money = (
						estimatedDevCost() + 
						if requireDesignAndUX() then 	estimatedDesignUXCost() else 0 endif + 
						if requireTestingAndQA() then estimatedTestingAndQACost() else 0  endif +
						if requireDeploymentAndMaintenance() then estimatedDeploymentAndMaintenanceCost() else 0 endif
					);
				}	
				
				Form ProjectBudgetEstimation {
					{ // Core Project Elements (Always Present)
						estimatedPersonHourForDev
						hourlyRateForDev
						estimatedDevCost
						requireDesignAndUX
						requireTestingAndQA
					}
					if (requireDesignAndUX()) { // Optional Design & UI/UX
						estimatedPersonHourForDesignUX
						hourlyRateForDesignUX
						estimatedDesignUXCost
						subtotalProjectCostDesignUX
					}
					if (requireTestingAndQA()) { // Optional Testing & Quality Assurance
						estimatedPersonHourForTestingAndQA
						hourlyRateForTestingAndQ
						estimatedTestingAndQACost
						if ( not requireDesignAndUX()) {
							subtotalProjectCostTesting1
						}
						if ( requireDesignAndUX()) {
							subtotalProjectCostTesting2
						}
					}
					if (requireDeploymentAndMaintenance()) { // Optional Deployment & Maintenance
						estimatedDeploymentCost
						estimatedMaintenanceCost
						estimatedDeploymentAndMaintenanceCost
					}
					{ // Results
						minimalCost
						totalProjectCost
					}
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
