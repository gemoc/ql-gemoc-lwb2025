/*
 * generated by Xtext 2.35.0
 */
package org.gemoc.ql.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.gemoc.ql.model.ql.QLModel
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(QLInjectorProvider)
class QLParsingTest {
	@Inject
	ParseHelper<QLModel> parseHelper
	
	@Test
	def void loadChallengeHouseOwningModel() {
		val result = parseHelper.parse('''
			QLModel {
				definitions {
					booleanType boolean
					decimalType money { unit "Euro" }
				}
				definitions {
					question hasSoldHouse: "Did you sell a house in 2010?"  boolean
					question hasBoughtHouse: "Did you buy a house in 2010?" boolean
					question hasMaintLoan: "Did you enter a loan for maintenance/reconstruction?"  boolean
					mandatory question sellingPrice: "Price the house was sold for:"  money
					mandatory question privateDebt: "Private debts for the sold house:"  money
					question valueResidue: "Value residue:"  money = (sellingPrice() - privateDebt());
				}
				Form "Box1HouseOwning" {
					{
						hasSoldHouse
						hasBoughtHouse
						hasMaintLoan
					}
					if (hasSoldHouse) {
						sellingPrice
						privateDebt
						valueResidue
					}
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void loadIfModel() {
		val result = parseHelper.parse('''
			QLModel {
				definitions {
					booleanType boolean
					decimalType money { unit "Euro" }
				}
				definitions {
					question hasSoldHouse: "Did you sell a house in 2010?"  boolean
					question hasBoughtHouse: "Did you buy a house in 2010?" boolean
					question hasMaintLoan: "Did you enter a loan for maintenance/reconstruction?"  boolean
					mandatory question sellingPrice: "Price the house was sold for:"  money
					mandatory question privateDebt: "Private debts for the sold house:"  money
					question valueResidue: "Value residue:"  money = (sellingPrice - privateDebt);
				}
				Form " Box1HouseOwning" {
					{
						hasSoldHouse
						hasBoughtHouse
						hasMaintLoan
					}
					if (hasSoldHouse) {
						sellingPrice
						privateDebt
						valueResidue
					}
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
