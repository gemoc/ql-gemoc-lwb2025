/**
 */
package org.gemoc.ql.model.ql.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.gemoc.ql.model.ql.util.QlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class QlItemProviderAdapterFactory extends QlAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public QlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.QLModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QLModelItemProvider qlModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.QLModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQLModelAdapter() {
		if (qlModelItemProvider == null) {
			qlModelItemProvider = new QLModelItemProvider(this);
		}

		return qlModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.QuestionDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionDefinitionItemProvider questionDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.QuestionDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionDefinitionAdapter() {
		if (questionDefinitionItemProvider == null) {
			questionDefinitionItemProvider = new QuestionDefinitionItemProvider(this);
		}

		return questionDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.BasicBinaryExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicBinaryExpressionItemProvider basicBinaryExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.BasicBinaryExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicBinaryExpressionAdapter() {
		if (basicBinaryExpressionItemProvider == null) {
			basicBinaryExpressionItemProvider = new BasicBinaryExpressionItemProvider(this);
		}

		return basicBinaryExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.ConstantCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantCallItemProvider constantCallItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.ConstantCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantCallAdapter() {
		if (constantCallItemProvider == null) {
			constantCallItemProvider = new ConstantCallItemProvider(this);
		}

		return constantCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.IntegerValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerValueItemProvider integerValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.IntegerValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerValueAdapter() {
		if (integerValueItemProvider == null) {
			integerValueItemProvider = new IntegerValueItemProvider(this);
		}

		return integerValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.StringValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringValueItemProvider stringValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.StringValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringValueAdapter() {
		if (stringValueItemProvider == null) {
			stringValueItemProvider = new StringValueItemProvider(this);
		}

		return stringValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.BooleanValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanValueItemProvider booleanValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.BooleanValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanValueAdapter() {
		if (booleanValueItemProvider == null) {
			booleanValueItemProvider = new BooleanValueItemProvider(this);
		}

		return booleanValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.BasicUnaryExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicUnaryExpressionItemProvider basicUnaryExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.BasicUnaryExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicUnaryExpressionAdapter() {
		if (basicUnaryExpressionItemProvider == null) {
			basicUnaryExpressionItemProvider = new BasicUnaryExpressionItemProvider(this);
		}

		return basicUnaryExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.DateValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateValueItemProvider dateValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.DateValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateValueAdapter() {
		if (dateValueItemProvider == null) {
			dateValueItemProvider = new DateValueItemProvider(this);
		}

		return dateValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.DecimalValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecimalValueItemProvider decimalValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.DecimalValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecimalValueAdapter() {
		if (decimalValueItemProvider == null) {
			decimalValueItemProvider = new DecimalValueItemProvider(this);
		}

		return decimalValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.ValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueTypeItemProvider valueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.ValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueTypeAdapter() {
		if (valueTypeItemProvider == null) {
			valueTypeItemProvider = new ValueTypeItemProvider(this);
		}

		return valueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.BooleanValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanValueTypeItemProvider booleanValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.BooleanValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanValueTypeAdapter() {
		if (booleanValueTypeItemProvider == null) {
			booleanValueTypeItemProvider = new BooleanValueTypeItemProvider(this);
		}

		return booleanValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.IntegerValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerValueTypeItemProvider integerValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.IntegerValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerValueTypeAdapter() {
		if (integerValueTypeItemProvider == null) {
			integerValueTypeItemProvider = new IntegerValueTypeItemProvider(this);
		}

		return integerValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.DecimalValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecimalValueTypeItemProvider decimalValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.DecimalValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecimalValueTypeAdapter() {
		if (decimalValueTypeItemProvider == null) {
			decimalValueTypeItemProvider = new DecimalValueTypeItemProvider(this);
		}

		return decimalValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.DateValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateValueTypeItemProvider dateValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.DateValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateValueTypeAdapter() {
		if (dateValueTypeItemProvider == null) {
			dateValueTypeItemProvider = new DateValueTypeItemProvider(this);
		}

		return dateValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.EnumerationValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationValueTypeItemProvider enumerationValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.EnumerationValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationValueTypeAdapter() {
		if (enumerationValueTypeItemProvider == null) {
			enumerationValueTypeItemProvider = new EnumerationValueTypeItemProvider(this);
		}

		return enumerationValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.EnumerationLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationLiteralItemProvider enumerationLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.EnumerationLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationLiteralAdapter() {
		if (enumerationLiteralItemProvider == null) {
			enumerationLiteralItemProvider = new EnumerationLiteralItemProvider(this);
		}

		return enumerationLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.QuestionGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionGroupItemProvider questionGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.QuestionGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionGroupAdapter() {
		if (questionGroupItemProvider == null) {
			questionGroupItemProvider = new QuestionGroupItemProvider(this);
		}

		return questionGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.DefinitionGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefinitionGroupItemProvider definitionGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.DefinitionGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefinitionGroupAdapter() {
		if (definitionGroupItemProvider == null) {
			definitionGroupItemProvider = new DefinitionGroupItemProvider(this);
		}

		return definitionGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.QuestionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionCallItemProvider questionCallItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.QuestionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionCallAdapter() {
		if (questionCallItemProvider == null) {
			questionCallItemProvider = new QuestionCallItemProvider(this);
		}

		return questionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.EnumerationCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationCallItemProvider enumerationCallItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.EnumerationCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationCallAdapter() {
		if (enumerationCallItemProvider == null) {
			enumerationCallItemProvider = new EnumerationCallItemProvider(this);
		}

		return enumerationCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.StringValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringValueTypeItemProvider stringValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.StringValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringValueTypeAdapter() {
		if (stringValueTypeItemProvider == null) {
			stringValueTypeItemProvider = new StringValueTypeItemProvider(this);
		}

		return stringValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.Question} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionItemProvider questionItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.Question}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionAdapter() {
		if (questionItemProvider == null) {
			questionItemProvider = new QuestionItemProvider(this);
		}

		return questionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.ql.model.ql.IfExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfExpressionItemProvider ifExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.ql.model.ql.IfExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfExpressionAdapter() {
		if (ifExpressionItemProvider == null) {
			ifExpressionItemProvider = new IfExpressionItemProvider(this);
		}

		return ifExpressionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (qlModelItemProvider != null)
			qlModelItemProvider.dispose();
		if (questionDefinitionItemProvider != null)
			questionDefinitionItemProvider.dispose();
		if (basicBinaryExpressionItemProvider != null)
			basicBinaryExpressionItemProvider.dispose();
		if (constantCallItemProvider != null)
			constantCallItemProvider.dispose();
		if (integerValueItemProvider != null)
			integerValueItemProvider.dispose();
		if (stringValueItemProvider != null)
			stringValueItemProvider.dispose();
		if (booleanValueItemProvider != null)
			booleanValueItemProvider.dispose();
		if (basicUnaryExpressionItemProvider != null)
			basicUnaryExpressionItemProvider.dispose();
		if (dateValueItemProvider != null)
			dateValueItemProvider.dispose();
		if (decimalValueItemProvider != null)
			decimalValueItemProvider.dispose();
		if (valueTypeItemProvider != null)
			valueTypeItemProvider.dispose();
		if (booleanValueTypeItemProvider != null)
			booleanValueTypeItemProvider.dispose();
		if (integerValueTypeItemProvider != null)
			integerValueTypeItemProvider.dispose();
		if (decimalValueTypeItemProvider != null)
			decimalValueTypeItemProvider.dispose();
		if (dateValueTypeItemProvider != null)
			dateValueTypeItemProvider.dispose();
		if (enumerationValueTypeItemProvider != null)
			enumerationValueTypeItemProvider.dispose();
		if (enumerationLiteralItemProvider != null)
			enumerationLiteralItemProvider.dispose();
		if (questionGroupItemProvider != null)
			questionGroupItemProvider.dispose();
		if (definitionGroupItemProvider != null)
			definitionGroupItemProvider.dispose();
		if (questionCallItemProvider != null)
			questionCallItemProvider.dispose();
		if (enumerationCallItemProvider != null)
			enumerationCallItemProvider.dispose();
		if (stringValueTypeItemProvider != null)
			stringValueTypeItemProvider.dispose();
		if (questionItemProvider != null)
			questionItemProvider.dispose();
		if (ifExpressionItemProvider != null)
			ifExpressionItemProvider.dispose();
	}

}
